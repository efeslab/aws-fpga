// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_gradient_z_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        frame1_a_V_dout,
        frame1_a_V_empty_n,
        frame1_a_V_read,
        frame2_a_V_dout,
        frame2_a_V_empty_n,
        frame2_a_V_read,
        frame4_a_V_dout,
        frame4_a_V_empty_n,
        frame4_a_V_read,
        frame5_a_V_dout,
        frame5_a_V_empty_n,
        frame5_a_V_read,
        gradient_z_V_din,
        gradient_z_V_full_n,
        gradient_z_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] frame1_a_V_dout;
input   frame1_a_V_empty_n;
output   frame1_a_V_read;
input  [23:0] frame2_a_V_dout;
input   frame2_a_V_empty_n;
output   frame2_a_V_read;
input  [23:0] frame4_a_V_dout;
input   frame4_a_V_empty_n;
output   frame4_a_V_read;
input  [23:0] frame5_a_V_dout;
input   frame5_a_V_empty_n;
output   frame5_a_V_read;
output  [31:0] gradient_z_V_din;
input   gradient_z_V_full_n;
output   gradient_z_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame1_a_V_read;
reg frame2_a_V_read;
reg frame4_a_V_read;
reg frame5_a_V_read;
reg gradient_z_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    frame1_a_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln113_reg_258;
reg    frame2_a_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg    gradient_z_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln113_reg_258_pp0_iter4_reg;
reg   [18:0] indvar_flatten_reg_95;
wire   [18:0] add_ln113_fu_106_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln113_fu_112_p2;
reg   [0:0] icmp_ln113_reg_258_pp0_iter1_reg;
reg   [0:0] icmp_ln113_reg_258_pp0_iter2_reg;
reg   [0:0] icmp_ln113_reg_258_pp0_iter3_reg;
wire   [20:0] sub_ln731_1_fu_170_p2;
reg   [20:0] sub_ln731_1_reg_262;
reg   [0:0] tmp_27_reg_267;
reg   [0:0] tmp_27_reg_267_pp0_iter2_reg;
reg   [0:0] tmp_27_reg_267_pp0_iter3_reg;
wire   [64:0] grp_fu_195_p2;
reg   [64:0] mul_ln1148_reg_278;
reg   [28:0] tmp_reg_283;
wire   [31:0] select_ln1148_1_fu_246_p3;
reg   [31:0] select_ln1148_1_reg_288;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] trunc_ln1116_1_fu_122_p1;
wire   [16:0] trunc_ln1116_fu_118_p1;
wire   [16:0] trunc_ln1116_2_fu_134_p1;
wire   [16:0] trunc_ln1116_3_fu_142_p1;
wire  signed [17:0] sext_ln731_2_fu_138_p1;
wire  signed [17:0] sext_ln731_fu_126_p1;
wire   [17:0] sub_ln731_fu_150_p2;
wire   [20:0] shl_ln_fu_156_p3;
wire  signed [20:0] sext_ln731_1_fu_130_p1;
wire   [20:0] add_ln731_fu_164_p2;
wire  signed [20:0] sext_ln731_3_fu_146_p1;
wire  signed [31:0] t_V_fu_184_p3;
wire   [33:0] grp_fu_195_p1;
wire   [64:0] sub_ln1148_fu_211_p2;
wire   [28:0] tmp_28_fu_216_p4;
wire  signed [31:0] sext_ln1148_1_fu_226_p1;
wire  signed [31:0] sext_ln1148_2_fu_230_p1;
wire   [31:0] select_ln1148_fu_233_p3;
wire   [31:0] sub_ln1148_1_fu_240_p2;
reg    grp_fu_195_ce;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

optical_flow_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t_V_fu_184_p3),
    .din1(grp_fu_195_p1),
    .ce(grp_fu_195_ce),
    .dout(grp_fu_195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln113_fu_112_p2 == 1'd0))) begin
        indvar_flatten_reg_95 <= add_ln113_fu_106_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_95 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln113_reg_258 <= icmp_ln113_fu_112_p2;
        icmp_ln113_reg_258_pp0_iter1_reg <= icmp_ln113_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln113_reg_258_pp0_iter2_reg <= icmp_ln113_reg_258_pp0_iter1_reg;
        icmp_ln113_reg_258_pp0_iter3_reg <= icmp_ln113_reg_258_pp0_iter2_reg;
        icmp_ln113_reg_258_pp0_iter4_reg <= icmp_ln113_reg_258_pp0_iter3_reg;
        tmp_27_reg_267_pp0_iter2_reg <= tmp_27_reg_267;
        tmp_27_reg_267_pp0_iter3_reg <= tmp_27_reg_267_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln113_reg_258_pp0_iter2_reg == 1'd0))) begin
        mul_ln1148_reg_278 <= grp_fu_195_p2;
        tmp_reg_283 <= {{grp_fu_195_p2[64:36]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln113_reg_258_pp0_iter3_reg == 1'd0))) begin
        select_ln1148_1_reg_288 <= select_ln1148_1_fu_246_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln731_1_reg_262 <= sub_ln731_1_fu_170_p2;
        tmp_27_reg_267 <= sub_ln731_1_fu_170_p2[32'd20];
    end
end

always @ (*) begin
    if ((icmp_ln113_fu_112_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_empty_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_read = 1'b1;
    end else begin
        frame1_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_empty_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_read = 1'b1;
    end else begin
        frame2_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_empty_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_read = 1'b1;
    end else begin
        frame4_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_empty_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_read = 1'b1;
    end else begin
        frame5_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gradient_z_V_blk_n = gradient_z_V_full_n;
    end else begin
        gradient_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_V_write = 1'b1;
    end else begin
        gradient_z_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_195_ce = 1'b1;
    end else begin
        grp_fu_195_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln113_fu_112_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln113_fu_112_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_fu_106_p2 = (indvar_flatten_reg_95 + 19'd1);

assign add_ln731_fu_164_p2 = ($signed(shl_ln_fu_156_p3) + $signed(sext_ln731_1_fu_130_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (gradient_z_V_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln113_reg_258 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (gradient_z_V_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln113_reg_258 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (gradient_z_V_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln113_reg_258 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln113_reg_258 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((icmp_ln113_reg_258 == 1'd0) & (frame1_a_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((icmp_ln113_reg_258_pp0_iter4_reg == 1'd0) & (gradient_z_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign gradient_z_V_din = select_ln1148_1_reg_288;

assign grp_fu_195_p1 = 65'd5726623062;

assign icmp_ln113_fu_112_p2 = ((indvar_flatten_reg_95 == 19'd446464) ? 1'b1 : 1'b0);

assign select_ln1148_1_fu_246_p3 = ((tmp_27_reg_267_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln1148_1_fu_240_p2 : sext_ln1148_2_fu_230_p1);

assign select_ln1148_fu_233_p3 = ((tmp_27_reg_267_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln1148_1_fu_226_p1 : sext_ln1148_2_fu_230_p1);

assign sext_ln1148_1_fu_226_p1 = $signed(tmp_28_fu_216_p4);

assign sext_ln1148_2_fu_230_p1 = $signed(tmp_reg_283);

assign sext_ln731_1_fu_130_p1 = $signed(trunc_ln1116_fu_118_p1);

assign sext_ln731_2_fu_138_p1 = $signed(trunc_ln1116_2_fu_134_p1);

assign sext_ln731_3_fu_146_p1 = $signed(trunc_ln1116_3_fu_142_p1);

assign sext_ln731_fu_126_p1 = $signed(trunc_ln1116_1_fu_122_p1);

assign shl_ln_fu_156_p3 = {{sub_ln731_fu_150_p2}, {3'd0}};

assign sub_ln1148_1_fu_240_p2 = (32'd0 - select_ln1148_fu_233_p3);

assign sub_ln1148_fu_211_p2 = (65'd0 - mul_ln1148_reg_278);

assign sub_ln731_1_fu_170_p2 = ($signed(add_ln731_fu_164_p2) - $signed(sext_ln731_3_fu_146_p1));

assign sub_ln731_fu_150_p2 = ($signed(sext_ln731_2_fu_138_p1) - $signed(sext_ln731_fu_126_p1));

assign t_V_fu_184_p3 = {{sub_ln731_1_reg_262}, {11'd0}};

assign tmp_28_fu_216_p4 = {{sub_ln1148_fu_211_p2[64:36]}};

assign trunc_ln1116_1_fu_122_p1 = frame2_a_V_dout[16:0];

assign trunc_ln1116_2_fu_134_p1 = frame4_a_V_dout[16:0];

assign trunc_ln1116_3_fu_142_p1 = frame5_a_V_dout[16:0];

assign trunc_ln1116_fu_118_p1 = frame1_a_V_dout[16:0];

endmodule //optical_flow_gradient_z_calc
