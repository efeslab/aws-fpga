// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_Loop_FRAMES_CP_OUTER_proc45 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        frames_dout,
        frames_empty_n,
        frames_read,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        outputs_dout,
        outputs_empty_n,
        outputs_read,
        outputs_out_din,
        outputs_out_full_n,
        outputs_out_write,
        frame1_a_V_din,
        frame1_a_V_full_n,
        frame1_a_V_write,
        frame2_a_V_din,
        frame2_a_V_full_n,
        frame2_a_V_write,
        frame3_a_V_din,
        frame3_a_V_full_n,
        frame3_a_V_write,
        frame4_a_V_din,
        frame4_a_V_full_n,
        frame4_a_V_write,
        frame5_a_V_din,
        frame5_a_V_full_n,
        frame5_a_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state12 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] frames_dout;
input   frames_empty_n;
output   frames_read;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] outputs_dout;
input   outputs_empty_n;
output   outputs_read;
output  [63:0] outputs_out_din;
input   outputs_out_full_n;
output   outputs_out_write;
output  [23:0] frame1_a_V_din;
input   frame1_a_V_full_n;
output   frame1_a_V_write;
output  [23:0] frame2_a_V_din;
input   frame2_a_V_full_n;
output   frame2_a_V_write;
output  [23:0] frame3_a_V_din;
input   frame3_a_V_full_n;
output   frame3_a_V_write;
output  [23:0] frame4_a_V_din;
input   frame4_a_V_full_n;
output   frame4_a_V_write;
output  [23:0] frame5_a_V_din;
input   frame5_a_V_full_n;
output   frame5_a_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg frames_read;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg outputs_read;
reg outputs_out_write;
reg frame1_a_V_write;
reg frame2_a_V_write;
reg frame3_a_V_write;
reg frame4_a_V_write;
reg frame5_a_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    frames_blk_n;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln448_reg_421;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln448_reg_421_pp0_iter7_reg;
reg    outputs_blk_n;
reg    outputs_out_blk_n;
reg    frame1_a_V_blk_n;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln448_reg_421_pp0_iter8_reg;
reg    frame2_a_V_blk_n;
reg    frame3_a_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg   [18:0] indvar_flatten_i_reg_179;
reg   [8:0] r_reg_190;
reg   [10:0] c_reg_201;
reg   [63:0] frames_read_reg_406;
wire   [5:0] empty_fu_212_p1;
reg   [5:0] empty_reg_411;
wire   [18:0] add_ln448_fu_216_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln448_fu_222_p2;
reg   [0:0] icmp_ln448_reg_421_pp0_iter1_reg;
reg   [0:0] icmp_ln448_reg_421_pp0_iter2_reg;
reg   [0:0] icmp_ln448_reg_421_pp0_iter3_reg;
reg   [0:0] icmp_ln448_reg_421_pp0_iter4_reg;
reg   [0:0] icmp_ln448_reg_421_pp0_iter5_reg;
reg   [0:0] icmp_ln448_reg_421_pp0_iter6_reg;
wire   [8:0] select_ln448_1_fu_248_p3;
reg   [8:0] select_ln448_1_reg_425;
wire   [2:0] trunc_ln455_1_fu_260_p1;
reg   [2:0] trunc_ln455_1_reg_430;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter1_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter2_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter3_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter4_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter5_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter6_reg;
reg   [2:0] trunc_ln455_1_reg_430_pp0_iter7_reg;
reg   [57:0] trunc_ln455_1_i_reg_435;
wire   [10:0] add_ln450_fu_293_p2;
reg   [511:0] gmem_addr_read_reg_451;
wire   [5:0] add_ln455_1_fu_316_p2;
reg   [5:0] add_ln455_1_reg_456;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [8:0] ap_phi_mux_r_phi_fu_194_p4;
wire  signed [63:0] sext_ln455_fu_299_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln450_fu_234_p2;
wire   [8:0] add_ln448_1_fu_228_p2;
wire   [10:0] select_ln448_fu_240_p3;
wire   [9:0] trunc_ln455_fu_256_p1;
wire   [21:0] tmp_i_fu_264_p4;
wire   [63:0] zext_ln455_fu_274_p1;
wire   [63:0] add_ln455_fu_278_p2;
wire   [5:0] trunc_ln_i_fu_309_p3;
wire   [8:0] shl_ln455_1_i_fu_321_p3;
wire   [511:0] zext_ln455_1_fu_328_p1;
wire   [511:0] lshr_ln455_fu_332_p2;
wire   [7:0] trunc_ln674_fu_337_p1;
wire   [7:0] p_Result_1_i_i_i_i_i_fu_346_p4;
wire   [7:0] p_Result_2_i_i_i_i_i_fu_361_p4;
wire   [7:0] p_Result_3_i_i_i_i_i_fu_376_p4;
wire   [7:0] p_Result_4_i_i_i_i_i_fu_391_p4;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln448_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_reg_201 <= add_ln450_fu_293_p2;
    end else if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_reg_201 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln448_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_i_reg_179 <= add_ln448_fu_216_p2;
    end else if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_179 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln448_reg_421 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_reg_190 <= select_ln448_1_reg_425;
    end else if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_190 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln455_1_reg_456 <= add_ln455_1_fu_316_p2;
        gmem_addr_read_reg_451 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_411 <= empty_fu_212_p1;
        frames_read_reg_406 <= frames_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln448_reg_421 <= icmp_ln448_fu_222_p2;
        icmp_ln448_reg_421_pp0_iter1_reg <= icmp_ln448_reg_421;
        trunc_ln455_1_reg_430_pp0_iter1_reg <= trunc_ln455_1_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln448_reg_421_pp0_iter2_reg <= icmp_ln448_reg_421_pp0_iter1_reg;
        icmp_ln448_reg_421_pp0_iter3_reg <= icmp_ln448_reg_421_pp0_iter2_reg;
        icmp_ln448_reg_421_pp0_iter4_reg <= icmp_ln448_reg_421_pp0_iter3_reg;
        icmp_ln448_reg_421_pp0_iter5_reg <= icmp_ln448_reg_421_pp0_iter4_reg;
        icmp_ln448_reg_421_pp0_iter6_reg <= icmp_ln448_reg_421_pp0_iter5_reg;
        icmp_ln448_reg_421_pp0_iter7_reg <= icmp_ln448_reg_421_pp0_iter6_reg;
        icmp_ln448_reg_421_pp0_iter8_reg <= icmp_ln448_reg_421_pp0_iter7_reg;
        trunc_ln455_1_reg_430_pp0_iter2_reg <= trunc_ln455_1_reg_430_pp0_iter1_reg;
        trunc_ln455_1_reg_430_pp0_iter3_reg <= trunc_ln455_1_reg_430_pp0_iter2_reg;
        trunc_ln455_1_reg_430_pp0_iter4_reg <= trunc_ln455_1_reg_430_pp0_iter3_reg;
        trunc_ln455_1_reg_430_pp0_iter5_reg <= trunc_ln455_1_reg_430_pp0_iter4_reg;
        trunc_ln455_1_reg_430_pp0_iter6_reg <= trunc_ln455_1_reg_430_pp0_iter5_reg;
        trunc_ln455_1_reg_430_pp0_iter7_reg <= trunc_ln455_1_reg_430_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln448_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln448_1_reg_425 <= select_ln448_1_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln448_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln455_1_i_reg_435 <= {{add_ln455_fu_278_p2[63:6]}};
        trunc_ln455_1_reg_430 <= trunc_ln455_1_fu_260_p1;
    end
end

always @ (*) begin
    if ((icmp_ln448_fu_222_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln448_reg_421 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_r_phi_fu_194_p4 = select_ln448_1_reg_425;
    end else begin
        ap_phi_mux_r_phi_fu_194_p4 = r_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_full_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame1_a_V_write = 1'b1;
    end else begin
        frame1_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_full_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame2_a_V_write = 1'b1;
    end else begin
        frame2_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame3_a_V_blk_n = frame3_a_V_full_n;
    end else begin
        frame3_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame3_a_V_write = 1'b1;
    end else begin
        frame3_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_full_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame4_a_V_write = 1'b1;
    end else begin
        frame4_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_full_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame5_a_V_write = 1'b1;
    end else begin
        frame5_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        frames_blk_n = frames_empty_n;
    end else begin
        frames_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frames_read = 1'b1;
    end else begin
        frames_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln448_reg_421 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln448_reg_421 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_blk_n = outputs_empty_n;
    end else begin
        outputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_out_blk_n = outputs_out_full_n;
    end else begin
        outputs_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_out_write = 1'b1;
    end else begin
        outputs_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_read = 1'b1;
    end else begin
        outputs_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln448_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln448_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln448_1_fu_228_p2 = (ap_phi_mux_r_phi_fu_194_p4 + 9'd1);

assign add_ln448_fu_216_p2 = (indvar_flatten_i_reg_179 + 19'd1);

assign add_ln450_fu_293_p2 = (select_ln448_fu_240_p3 + 11'd1);

assign add_ln455_1_fu_316_p2 = (empty_reg_411 + trunc_ln_i_fu_309_p3);

assign add_ln455_fu_278_p2 = (zext_ln455_fu_274_p1 + frames_read_reg_406);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_gmem_RVALID == 1'b0) & (icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_RVALID == 1'b0) & (icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_RVALID == 1'b0) & (icmp_ln448_reg_421_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (frames_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (outputs_out_full_n == 1'b0) | (outputs_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln448_reg_421_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = (((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((icmp_ln448_reg_421_pp0_iter8_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln448_reg_421 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_fu_212_p1 = frames_dout[5:0];

assign frame1_a_V_din = trunc_ln674_fu_337_p1;

assign frame2_a_V_din = p_Result_1_i_i_i_i_i_fu_346_p4;

assign frame3_a_V_din = p_Result_2_i_i_i_i_i_fu_361_p4;

assign frame4_a_V_din = p_Result_3_i_i_i_i_i_fu_376_p4;

assign frame5_a_V_din = p_Result_4_i_i_i_i_i_fu_391_p4;

assign icmp_ln448_fu_222_p2 = ((indvar_flatten_i_reg_179 == 19'd446464) ? 1'b1 : 1'b0);

assign icmp_ln450_fu_234_p2 = ((c_reg_201 == 11'd1024) ? 1'b1 : 1'b0);

assign lshr_ln455_fu_332_p2 = gmem_addr_read_reg_451 >> zext_ln455_1_fu_328_p1;

assign m_axi_gmem_ARADDR = sext_ln455_fu_299_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign outputs_out_din = outputs_dout;

assign p_Result_1_i_i_i_i_i_fu_346_p4 = {{lshr_ln455_fu_332_p2[15:8]}};

assign p_Result_2_i_i_i_i_i_fu_361_p4 = {{lshr_ln455_fu_332_p2[23:16]}};

assign p_Result_3_i_i_i_i_i_fu_376_p4 = {{lshr_ln455_fu_332_p2[31:24]}};

assign p_Result_4_i_i_i_i_i_fu_391_p4 = {{lshr_ln455_fu_332_p2[39:32]}};

assign select_ln448_1_fu_248_p3 = ((icmp_ln450_fu_234_p2[0:0] == 1'b1) ? add_ln448_1_fu_228_p2 : ap_phi_mux_r_phi_fu_194_p4);

assign select_ln448_fu_240_p3 = ((icmp_ln450_fu_234_p2[0:0] == 1'b1) ? 11'd0 : c_reg_201);

assign sext_ln455_fu_299_p1 = $signed(trunc_ln455_1_i_reg_435);

assign shl_ln455_1_i_fu_321_p3 = {{add_ln455_1_reg_456}, {3'd0}};

assign start_out = real_start;

assign tmp_i_fu_264_p4 = {{{select_ln448_1_fu_248_p3}, {trunc_ln455_fu_256_p1}}, {3'd0}};

assign trunc_ln455_1_fu_260_p1 = select_ln448_fu_240_p3[2:0];

assign trunc_ln455_fu_256_p1 = select_ln448_fu_240_p3[9:0];

assign trunc_ln674_fu_337_p1 = lshr_ln455_fu_332_p2[7:0];

assign trunc_ln_i_fu_309_p3 = {{trunc_ln455_1_reg_430_pp0_iter7_reg}, {3'd0}};

assign zext_ln455_1_fu_328_p1 = shl_ln455_1_i_fu_321_p3;

assign zext_ln455_fu_274_p1 = tmp_i_fu_264_p4;

endmodule //optical_flow_Loop_FRAMES_CP_OUTER_proc45
