// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_gradient_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gradient_x_V_dout,
        gradient_x_V_empty_n,
        gradient_x_V_read,
        gradient_y_V_dout,
        gradient_y_V_empty_n,
        gradient_y_V_read,
        gradient_z_V_dout,
        gradient_z_V_empty_n,
        gradient_z_V_read,
        y_filtered_x_V_din,
        y_filtered_x_V_full_n,
        y_filtered_x_V_write,
        y_filtered_y_V_din,
        y_filtered_y_V_full_n,
        y_filtered_y_V_write,
        y_filtered_z_V_din,
        y_filtered_z_V_full_n,
        y_filtered_z_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] gradient_x_V_dout;
input   gradient_x_V_empty_n;
output   gradient_x_V_read;
input  [31:0] gradient_y_V_dout;
input   gradient_y_V_empty_n;
output   gradient_y_V_read;
input  [31:0] gradient_z_V_dout;
input   gradient_z_V_empty_n;
output   gradient_z_V_read;
output  [31:0] y_filtered_x_V_din;
input   y_filtered_x_V_full_n;
output   y_filtered_x_V_write;
output  [31:0] y_filtered_y_V_din;
input   y_filtered_y_V_full_n;
output   y_filtered_y_V_write;
output  [31:0] y_filtered_z_V_din;
input   y_filtered_z_V_full_n;
output   y_filtered_z_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gradient_x_V_read;
reg gradient_y_V_read;
reg gradient_z_V_read;
reg[31:0] y_filtered_x_V_din;
reg y_filtered_x_V_write;
reg[31:0] y_filtered_y_V_din;
reg y_filtered_y_V_write;
reg[31:0] y_filtered_z_V_din;
reg y_filtered_z_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gradient_x_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln135_reg_1453;
reg   [0:0] select_ln135_1_reg_1457;
reg    gradient_y_V_blk_n;
reg    gradient_z_V_blk_n;
reg    y_filtered_x_V_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] select_ln135_3_reg_1465;
reg   [0:0] select_ln135_3_reg_1465_pp0_iter5_reg;
reg   [0:0] select_ln135_2_reg_1461;
reg   [0:0] select_ln135_2_reg_1461_pp0_iter5_reg;
reg    y_filtered_y_V_blk_n;
reg    y_filtered_z_V_blk_n;
reg   [18:0] indvar_flatten_reg_519;
reg   [8:0] r_reg_530;
reg   [10:0] c_reg_541;
reg  signed [31:0] buf_val_x_V_load_6_6_i_reg_552;
reg  signed [31:0] buf_val_x_V_load_6_6_i_reg_552_pp0_iter2_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op158_read_state3;
reg    ap_predicate_op159_read_state3;
reg    ap_predicate_op160_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_predicate_op310_write_state8;
reg    ap_predicate_op311_write_state8;
reg    ap_predicate_op312_write_state8;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] buf_val_y_V_load_6_6_i_reg_566;
reg  signed [31:0] buf_val_y_V_load_6_6_i_reg_566_pp0_iter2_reg;
reg  signed [31:0] buf_val_z_V_load_6_6_i_reg_580;
reg  signed [31:0] buf_val_z_V_load_6_6_i_reg_580_pp0_iter2_reg;
wire   [18:0] add_ln135_1_fu_594_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln135_fu_630_p2;
wire   [0:0] select_ln135_1_fu_662_p3;
wire   [0:0] select_ln135_2_fu_676_p3;
reg   [0:0] select_ln135_2_reg_1461_pp0_iter1_reg;
reg   [0:0] select_ln135_2_reg_1461_pp0_iter2_reg;
reg   [0:0] select_ln135_2_reg_1461_pp0_iter3_reg;
reg   [0:0] select_ln135_2_reg_1461_pp0_iter4_reg;
wire   [0:0] select_ln135_3_fu_702_p3;
reg   [0:0] select_ln135_3_reg_1465_pp0_iter1_reg;
reg   [0:0] select_ln135_3_reg_1465_pp0_iter2_reg;
reg   [0:0] select_ln135_3_reg_1465_pp0_iter3_reg;
reg   [0:0] select_ln135_3_reg_1465_pp0_iter4_reg;
wire   [8:0] select_ln135_4_fu_710_p3;
reg   [9:0] buf_val_x_V_1_addr_reg_1474;
reg   [9:0] buf_val_y_V_1_addr_reg_1480;
reg   [9:0] buf_val_z_V_1_addr_reg_1486;
reg   [9:0] buf_val_x_V_2_addr_reg_1492;
reg   [9:0] buf_val_y_V_2_addr_reg_1498;
reg   [9:0] buf_val_z_V_2_addr_reg_1504;
reg   [9:0] buf_val_x_V_3_addr_reg_1510;
reg   [9:0] buf_val_y_V_3_addr_reg_1516;
reg   [9:0] buf_val_z_V_3_addr_reg_1522;
reg   [9:0] buf_val_x_V_4_addr_reg_1528;
reg   [9:0] buf_val_y_V_4_addr_reg_1534;
reg   [9:0] buf_val_z_V_4_addr_reg_1540;
reg   [9:0] buf_val_x_V_5_addr_reg_1546;
reg   [9:0] buf_val_y_V_5_addr_reg_1552;
reg   [9:0] buf_val_z_V_5_addr_reg_1558;
reg   [9:0] buf_val_x_V_6_addr_reg_1564;
reg   [9:0] buf_val_y_V_6_addr_reg_1570;
reg   [9:0] buf_val_z_V_6_addr_reg_1576;
wire   [10:0] add_ln137_fu_740_p2;
wire   [31:0] buf_val_x_V_1_q0;
reg  signed [31:0] buf_val_x_V_1_load_reg_1587;
wire   [31:0] buf_val_y_V_1_q0;
reg  signed [31:0] buf_val_y_V_1_load_reg_1592;
wire   [31:0] buf_val_z_V_1_q0;
reg  signed [31:0] buf_val_z_V_1_load_reg_1597;
wire   [31:0] buf_val_x_V_2_q0;
reg  signed [31:0] buf_val_x_V_2_load_reg_1602;
wire   [31:0] buf_val_y_V_2_q0;
reg  signed [31:0] buf_val_y_V_2_load_reg_1607;
wire   [31:0] buf_val_z_V_2_q0;
reg  signed [31:0] buf_val_z_V_2_load_reg_1612;
wire   [31:0] buf_val_x_V_3_q0;
reg  signed [31:0] buf_val_x_V_3_load_reg_1617;
wire   [31:0] buf_val_y_V_3_q0;
reg  signed [31:0] buf_val_y_V_3_load_reg_1622;
wire   [31:0] buf_val_z_V_3_q0;
reg  signed [31:0] buf_val_z_V_3_load_reg_1627;
wire   [31:0] buf_val_x_V_4_q0;
reg  signed [31:0] buf_val_x_V_4_load_reg_1632;
wire   [31:0] buf_val_y_V_4_q0;
reg  signed [31:0] buf_val_y_V_4_load_reg_1637;
wire   [31:0] buf_val_z_V_4_q0;
reg  signed [31:0] buf_val_z_V_4_load_reg_1642;
wire   [31:0] buf_val_x_V_5_q0;
reg  signed [31:0] buf_val_x_V_5_load_reg_1647;
reg  signed [31:0] buf_val_x_V_5_load_reg_1647_pp0_iter2_reg;
wire   [31:0] buf_val_y_V_5_q0;
reg  signed [31:0] buf_val_y_V_5_load_reg_1652;
reg  signed [31:0] buf_val_y_V_5_load_reg_1652_pp0_iter2_reg;
wire   [31:0] buf_val_z_V_5_q0;
reg  signed [31:0] buf_val_z_V_5_load_reg_1657;
reg  signed [31:0] buf_val_z_V_5_load_reg_1657_pp0_iter2_reg;
wire   [31:0] buf_val_x_V_6_q0;
reg  signed [31:0] buf_val_x_V_6_load_reg_1662;
reg  signed [31:0] buf_val_x_V_6_load_reg_1662_pp0_iter2_reg;
wire   [31:0] buf_val_y_V_6_q0;
reg  signed [31:0] buf_val_y_V_6_load_reg_1667;
reg  signed [31:0] buf_val_y_V_6_load_reg_1667_pp0_iter2_reg;
wire   [31:0] buf_val_z_V_6_q0;
reg  signed [31:0] buf_val_z_V_6_load_reg_1672;
reg  signed [31:0] buf_val_z_V_6_load_reg_1672_pp0_iter2_reg;
reg   [29:0] trunc_ln_reg_1737;
reg   [29:0] trunc_ln708_6_reg_1742;
reg   [29:0] trunc_ln708_7_reg_1747;
wire   [49:0] grp_fu_776_p2;
reg   [49:0] mul_ln1118_13_reg_1752;
wire   [49:0] grp_fu_785_p2;
reg   [49:0] mul_ln1118_14_reg_1757;
wire   [49:0] grp_fu_794_p2;
reg   [49:0] mul_ln1118_15_reg_1762;
wire   [49:0] grp_fu_803_p2;
reg   [49:0] mul_ln1118_16_reg_1767;
wire   [49:0] grp_fu_812_p2;
reg   [49:0] mul_ln1118_17_reg_1772;
wire   [49:0] grp_fu_821_p2;
reg   [49:0] mul_ln1118_18_reg_1777;
wire   [50:0] grp_fu_830_p2;
reg   [50:0] mul_ln703_reg_1782;
wire   [50:0] grp_fu_839_p2;
reg   [50:0] mul_ln703_23_reg_1787;
wire   [50:0] grp_fu_848_p2;
reg   [50:0] mul_ln703_24_reg_1792;
reg   [31:0] tmp_32_reg_1842;
reg   [31:0] tmp_33_reg_1847;
reg   [31:0] tmp_34_reg_1852;
wire   [49:0] grp_fu_887_p2;
reg   [49:0] mul_ln1118_19_reg_1857;
wire   [49:0] grp_fu_896_p2;
reg   [49:0] mul_ln1118_20_reg_1862;
wire   [49:0] grp_fu_905_p2;
reg   [49:0] mul_ln1118_21_reg_1867;
wire   [49:0] grp_fu_914_p2;
reg   [49:0] mul_ln1118_22_reg_1872;
wire   [49:0] grp_fu_923_p2;
reg   [49:0] mul_ln1118_23_reg_1877;
wire   [49:0] grp_fu_932_p2;
reg   [49:0] mul_ln1118_24_reg_1882;
wire   [48:0] grp_fu_942_p2;
reg   [48:0] mul_ln1118_25_reg_1887;
wire   [48:0] grp_fu_952_p2;
reg   [48:0] mul_ln1118_26_reg_1892;
wire   [48:0] grp_fu_962_p2;
reg   [48:0] mul_ln1118_27_reg_1897;
reg   [31:0] trunc_ln708_8_reg_1902;
reg   [31:0] trunc_ln708_9_reg_1907;
reg   [31:0] trunc_ln708_s_reg_1912;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire   [9:0] buf_val_x_V_1_address0;
reg    buf_val_x_V_1_ce0;
wire   [9:0] buf_val_x_V_1_address1;
reg    buf_val_x_V_1_ce1;
reg    buf_val_x_V_1_we1;
wire   [9:0] buf_val_x_V_2_address0;
reg    buf_val_x_V_2_ce0;
wire   [9:0] buf_val_x_V_2_address1;
reg    buf_val_x_V_2_ce1;
reg    buf_val_x_V_2_we1;
wire   [9:0] buf_val_x_V_3_address0;
reg    buf_val_x_V_3_ce0;
wire   [9:0] buf_val_x_V_3_address1;
reg    buf_val_x_V_3_ce1;
reg    buf_val_x_V_3_we1;
wire   [9:0] buf_val_x_V_4_address0;
reg    buf_val_x_V_4_ce0;
wire   [9:0] buf_val_x_V_4_address1;
reg    buf_val_x_V_4_ce1;
reg    buf_val_x_V_4_we1;
wire   [9:0] buf_val_x_V_5_address0;
reg    buf_val_x_V_5_ce0;
wire   [9:0] buf_val_x_V_5_address1;
reg    buf_val_x_V_5_ce1;
reg    buf_val_x_V_5_we1;
wire   [9:0] buf_val_x_V_6_address0;
reg    buf_val_x_V_6_ce0;
wire   [9:0] buf_val_x_V_6_address1;
reg    buf_val_x_V_6_ce1;
reg    buf_val_x_V_6_we1;
wire   [9:0] buf_val_y_V_1_address0;
reg    buf_val_y_V_1_ce0;
wire   [9:0] buf_val_y_V_1_address1;
reg    buf_val_y_V_1_ce1;
reg    buf_val_y_V_1_we1;
wire   [9:0] buf_val_y_V_2_address0;
reg    buf_val_y_V_2_ce0;
wire   [9:0] buf_val_y_V_2_address1;
reg    buf_val_y_V_2_ce1;
reg    buf_val_y_V_2_we1;
wire   [9:0] buf_val_y_V_3_address0;
reg    buf_val_y_V_3_ce0;
wire   [9:0] buf_val_y_V_3_address1;
reg    buf_val_y_V_3_ce1;
reg    buf_val_y_V_3_we1;
wire   [9:0] buf_val_y_V_4_address0;
reg    buf_val_y_V_4_ce0;
wire   [9:0] buf_val_y_V_4_address1;
reg    buf_val_y_V_4_ce1;
reg    buf_val_y_V_4_we1;
wire   [9:0] buf_val_y_V_5_address0;
reg    buf_val_y_V_5_ce0;
wire   [9:0] buf_val_y_V_5_address1;
reg    buf_val_y_V_5_ce1;
reg    buf_val_y_V_5_we1;
wire   [9:0] buf_val_y_V_6_address0;
reg    buf_val_y_V_6_ce0;
wire   [9:0] buf_val_y_V_6_address1;
reg    buf_val_y_V_6_ce1;
reg    buf_val_y_V_6_we1;
wire   [9:0] buf_val_z_V_1_address0;
reg    buf_val_z_V_1_ce0;
wire   [9:0] buf_val_z_V_1_address1;
reg    buf_val_z_V_1_ce1;
reg    buf_val_z_V_1_we1;
wire   [9:0] buf_val_z_V_2_address0;
reg    buf_val_z_V_2_ce0;
wire   [9:0] buf_val_z_V_2_address1;
reg    buf_val_z_V_2_ce1;
reg    buf_val_z_V_2_we1;
wire   [9:0] buf_val_z_V_3_address0;
reg    buf_val_z_V_3_ce0;
wire   [9:0] buf_val_z_V_3_address1;
reg    buf_val_z_V_3_ce1;
reg    buf_val_z_V_3_we1;
wire   [9:0] buf_val_z_V_4_address0;
reg    buf_val_z_V_4_ce0;
wire   [9:0] buf_val_z_V_4_address1;
reg    buf_val_z_V_4_ce1;
reg    buf_val_z_V_4_we1;
wire   [9:0] buf_val_z_V_5_address0;
reg    buf_val_z_V_5_ce0;
wire   [9:0] buf_val_z_V_5_address1;
reg    buf_val_z_V_5_ce1;
reg    buf_val_z_V_5_we1;
wire   [9:0] buf_val_z_V_6_address0;
reg    buf_val_z_V_6_ce0;
wire   [9:0] buf_val_z_V_6_address1;
reg    buf_val_z_V_6_ce1;
reg    buf_val_z_V_6_we1;
reg   [31:0] ap_phi_mux_buf_val_x_V_load_6_6_i_phi_fu_556_p4;
reg  signed [31:0] ap_phi_reg_pp0_iter1_buf_val_x_V_load_6_6_i_reg_552;
wire  signed [31:0] ap_phi_reg_pp0_iter0_buf_val_x_V_load_6_6_i_reg_552;
reg   [31:0] ap_phi_mux_buf_val_y_V_load_6_6_i_phi_fu_570_p4;
reg  signed [31:0] ap_phi_reg_pp0_iter1_buf_val_y_V_load_6_6_i_reg_566;
wire  signed [31:0] ap_phi_reg_pp0_iter0_buf_val_y_V_load_6_6_i_reg_566;
reg   [31:0] ap_phi_mux_buf_val_z_V_load_6_6_i_phi_fu_584_p4;
reg  signed [31:0] ap_phi_reg_pp0_iter1_buf_val_z_V_load_6_6_i_reg_580;
wire  signed [31:0] ap_phi_reg_pp0_iter0_buf_val_z_V_load_6_6_i_reg_580;
wire   [63:0] zext_ln768_fu_718_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] cmp7_i_fu_600_p2;
wire   [0:0] cmp31_not_i_fu_612_p2;
wire   [0:0] cmp32_not_i_fu_618_p2;
wire   [0:0] icmp_ln137_fu_642_p2;
wire   [8:0] add_ln135_fu_636_p2;
wire   [0:0] cmp7_i_mid1_fu_656_p2;
wire   [0:0] cmp58_i_mid1_fu_670_p2;
wire   [0:0] cmp58_i_fu_606_p2;
wire   [0:0] cmp31_not_i_mid1_fu_684_p2;
wire   [0:0] cmp32_not_i_mid1_fu_690_p2;
wire   [0:0] brmerge_i_mid1_fu_696_p2;
wire   [0:0] brmerge_i_fu_624_p2;
wire   [10:0] select_ln135_fu_648_p3;
wire   [16:0] grp_fu_749_p1;
wire   [16:0] grp_fu_758_p1;
wire   [16:0] grp_fu_767_p1;
wire   [17:0] grp_fu_776_p1;
wire   [17:0] grp_fu_785_p1;
wire   [17:0] grp_fu_794_p1;
wire   [17:0] grp_fu_803_p1;
wire   [17:0] grp_fu_812_p1;
wire   [17:0] grp_fu_821_p1;
wire   [18:0] grp_fu_830_p1;
wire   [18:0] grp_fu_839_p1;
wire   [18:0] grp_fu_848_p1;
wire   [48:0] grp_fu_749_p2;
wire   [48:0] grp_fu_758_p2;
wire   [48:0] grp_fu_767_p2;
wire   [17:0] grp_fu_887_p1;
wire   [17:0] grp_fu_896_p1;
wire   [17:0] grp_fu_905_p1;
wire   [17:0] grp_fu_914_p1;
wire   [17:0] grp_fu_923_p1;
wire   [17:0] grp_fu_932_p1;
wire   [16:0] grp_fu_942_p1;
wire   [16:0] grp_fu_952_p1;
wire   [16:0] grp_fu_962_p1;
wire   [48:0] tmp_fu_968_p3;
wire  signed [49:0] sext_ln703_fu_975_p1;
wire   [49:0] add_ln1192_fu_979_p2;
wire   [30:0] tmp_53_fu_984_p4;
wire   [49:0] tmp_54_fu_994_p3;
wire   [48:0] tmp_s_fu_1006_p3;
wire  signed [49:0] sext_ln703_10_fu_1013_p1;
wire   [49:0] add_ln1192_23_fu_1017_p2;
wire   [30:0] tmp_55_fu_1022_p4;
wire   [49:0] tmp_56_fu_1032_p3;
wire   [48:0] tmp_28_fu_1044_p3;
wire  signed [49:0] sext_ln703_11_fu_1051_p1;
wire   [49:0] add_ln1192_24_fu_1055_p2;
wire   [30:0] tmp_57_fu_1060_p4;
wire   [49:0] tmp_58_fu_1070_p3;
wire  signed [50:0] sext_ln728_fu_1002_p1;
wire  signed [50:0] sext_ln703_12_fu_1082_p1;
wire   [50:0] add_ln1192_25_fu_1085_p2;
wire   [31:0] tmp_29_fu_1091_p4;
wire  signed [50:0] sext_ln728_1_fu_1040_p1;
wire  signed [50:0] sext_ln703_13_fu_1109_p1;
wire   [50:0] add_ln1192_26_fu_1112_p2;
wire   [31:0] tmp_30_fu_1118_p4;
wire  signed [50:0] sext_ln728_2_fu_1078_p1;
wire  signed [50:0] sext_ln703_14_fu_1136_p1;
wire   [50:0] add_ln1192_27_fu_1139_p2;
wire   [31:0] tmp_31_fu_1145_p4;
wire   [50:0] and_ln728_s_fu_1101_p3;
wire   [50:0] add_ln1192_28_fu_1163_p2;
wire   [50:0] and_ln728_21_fu_1128_p3;
wire   [50:0] add_ln1192_29_fu_1178_p2;
wire   [50:0] and_ln728_22_fu_1155_p3;
wire   [50:0] add_ln1192_30_fu_1193_p2;
wire   [50:0] and_ln728_23_fu_1208_p3;
wire  signed [50:0] sext_ln703_15_fu_1229_p1;
wire   [50:0] add_ln1192_31_fu_1232_p2;
wire   [31:0] tmp_35_fu_1238_p4;
wire   [50:0] and_ln728_24_fu_1215_p3;
wire  signed [50:0] sext_ln703_16_fu_1256_p1;
wire   [50:0] add_ln1192_32_fu_1259_p2;
wire   [31:0] tmp_36_fu_1265_p4;
wire   [50:0] and_ln728_25_fu_1222_p3;
wire  signed [50:0] sext_ln703_17_fu_1283_p1;
wire   [50:0] add_ln1192_33_fu_1286_p2;
wire   [31:0] tmp_37_fu_1292_p4;
wire   [50:0] and_ln728_26_fu_1248_p3;
wire  signed [50:0] sext_ln703_18_fu_1310_p1;
wire   [50:0] add_ln1192_34_fu_1313_p2;
wire   [31:0] tmp_38_fu_1319_p4;
wire   [50:0] and_ln728_27_fu_1275_p3;
wire  signed [50:0] sext_ln703_19_fu_1337_p1;
wire   [50:0] add_ln1192_35_fu_1340_p2;
wire   [31:0] tmp_39_fu_1346_p4;
wire   [50:0] and_ln728_28_fu_1302_p3;
wire  signed [50:0] sext_ln703_20_fu_1364_p1;
wire   [50:0] add_ln1192_36_fu_1367_p2;
wire   [31:0] tmp_40_fu_1373_p4;
wire   [50:0] and_ln728_29_fu_1329_p3;
wire  signed [50:0] sext_ln703_21_fu_1391_p1;
wire   [50:0] add_ln1192_37_fu_1394_p2;
wire   [50:0] and_ln728_30_fu_1356_p3;
wire  signed [50:0] sext_ln703_22_fu_1410_p1;
wire   [50:0] add_ln1192_38_fu_1413_p2;
wire   [50:0] and_ln728_31_fu_1383_p3;
wire  signed [50:0] sext_ln703_23_fu_1429_p1;
wire   [50:0] add_ln1192_39_fu_1432_p2;
reg    grp_fu_749_ce;
reg    grp_fu_758_ce;
reg    grp_fu_767_ce;
reg    grp_fu_776_ce;
reg    grp_fu_785_ce;
reg    grp_fu_794_ce;
reg    grp_fu_803_ce;
reg    grp_fu_812_ce;
reg    grp_fu_821_ce;
reg    grp_fu_830_ce;
reg    grp_fu_839_ce;
reg    grp_fu_848_ce;
reg    grp_fu_887_ce;
reg    grp_fu_896_ce;
reg    grp_fu_905_ce;
reg    grp_fu_914_ce;
reg    grp_fu_923_ce;
reg    grp_fu_932_ce;
reg    grp_fu_942_ce;
reg    grp_fu_952_ce;
reg    grp_fu_962_ce;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_83;
reg    ap_enable_state2_pp0_iter0_stage0;
reg    ap_enable_operation_125;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_enable_operation_131;
reg    ap_enable_operation_84;
reg    ap_enable_operation_126;
reg    ap_enable_operation_132;
reg    ap_enable_operation_85;
reg    ap_enable_operation_127;
reg    ap_enable_operation_133;
reg    ap_enable_operation_89;
reg    ap_enable_operation_128;
reg    ap_enable_operation_137;
reg    ap_enable_operation_90;
reg    ap_enable_operation_129;
reg    ap_enable_operation_138;
reg    ap_enable_operation_91;
reg    ap_enable_operation_130;
reg    ap_enable_operation_139;
reg    ap_enable_operation_95;
reg    ap_enable_operation_134;
reg    ap_enable_operation_143;
reg    ap_enable_operation_96;
reg    ap_enable_operation_135;
reg    ap_enable_operation_144;
reg    ap_enable_operation_97;
reg    ap_enable_operation_136;
reg    ap_enable_operation_145;
reg    ap_enable_operation_101;
reg    ap_enable_operation_140;
reg    ap_enable_operation_149;
reg    ap_enable_operation_102;
reg    ap_enable_operation_141;
reg    ap_enable_operation_150;
reg    ap_enable_operation_103;
reg    ap_enable_operation_142;
reg    ap_enable_operation_151;
reg    ap_enable_operation_107;
reg    ap_enable_operation_146;
reg    ap_enable_operation_155;
reg    ap_enable_operation_108;
reg    ap_enable_operation_147;
reg    ap_enable_operation_156;
reg    ap_enable_operation_109;
reg    ap_enable_operation_148;
reg    ap_enable_operation_157;
reg    ap_enable_operation_113;
reg    ap_enable_operation_152;
wire    ap_enable_operation_165;
reg    ap_enable_operation_114;
reg    ap_enable_operation_153;
wire    ap_enable_operation_166;
reg    ap_enable_operation_115;
reg    ap_enable_operation_154;
wire    ap_enable_operation_167;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_171;
reg    ap_condition_244;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_1_address0),
    .ce0(buf_val_x_V_1_ce0),
    .q0(buf_val_x_V_1_q0),
    .address1(buf_val_x_V_1_address1),
    .ce1(buf_val_x_V_1_ce1),
    .we1(buf_val_x_V_1_we1),
    .d1(buf_val_x_V_2_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_2_address0),
    .ce0(buf_val_x_V_2_ce0),
    .q0(buf_val_x_V_2_q0),
    .address1(buf_val_x_V_2_address1),
    .ce1(buf_val_x_V_2_ce1),
    .we1(buf_val_x_V_2_we1),
    .d1(buf_val_x_V_3_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_3_address0),
    .ce0(buf_val_x_V_3_ce0),
    .q0(buf_val_x_V_3_q0),
    .address1(buf_val_x_V_3_address1),
    .ce1(buf_val_x_V_3_ce1),
    .we1(buf_val_x_V_3_we1),
    .d1(buf_val_x_V_4_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_4_address0),
    .ce0(buf_val_x_V_4_ce0),
    .q0(buf_val_x_V_4_q0),
    .address1(buf_val_x_V_4_address1),
    .ce1(buf_val_x_V_4_ce1),
    .we1(buf_val_x_V_4_we1),
    .d1(buf_val_x_V_5_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_5_address0),
    .ce0(buf_val_x_V_5_ce0),
    .q0(buf_val_x_V_5_q0),
    .address1(buf_val_x_V_5_address1),
    .ce1(buf_val_x_V_5_ce1),
    .we1(buf_val_x_V_5_we1),
    .d1(buf_val_x_V_6_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_x_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_x_V_6_address0),
    .ce0(buf_val_x_V_6_ce0),
    .q0(buf_val_x_V_6_q0),
    .address1(buf_val_x_V_6_address1),
    .ce1(buf_val_x_V_6_ce1),
    .we1(buf_val_x_V_6_we1),
    .d1(ap_phi_mux_buf_val_x_V_load_6_6_i_phi_fu_556_p4)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_1_address0),
    .ce0(buf_val_y_V_1_ce0),
    .q0(buf_val_y_V_1_q0),
    .address1(buf_val_y_V_1_address1),
    .ce1(buf_val_y_V_1_ce1),
    .we1(buf_val_y_V_1_we1),
    .d1(buf_val_y_V_2_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_2_address0),
    .ce0(buf_val_y_V_2_ce0),
    .q0(buf_val_y_V_2_q0),
    .address1(buf_val_y_V_2_address1),
    .ce1(buf_val_y_V_2_ce1),
    .we1(buf_val_y_V_2_we1),
    .d1(buf_val_y_V_3_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_3_address0),
    .ce0(buf_val_y_V_3_ce0),
    .q0(buf_val_y_V_3_q0),
    .address1(buf_val_y_V_3_address1),
    .ce1(buf_val_y_V_3_ce1),
    .we1(buf_val_y_V_3_we1),
    .d1(buf_val_y_V_4_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_4_address0),
    .ce0(buf_val_y_V_4_ce0),
    .q0(buf_val_y_V_4_q0),
    .address1(buf_val_y_V_4_address1),
    .ce1(buf_val_y_V_4_ce1),
    .we1(buf_val_y_V_4_we1),
    .d1(buf_val_y_V_5_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_5_address0),
    .ce0(buf_val_y_V_5_ce0),
    .q0(buf_val_y_V_5_q0),
    .address1(buf_val_y_V_5_address1),
    .ce1(buf_val_y_V_5_ce1),
    .we1(buf_val_y_V_5_we1),
    .d1(buf_val_y_V_6_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_y_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_y_V_6_address0),
    .ce0(buf_val_y_V_6_ce0),
    .q0(buf_val_y_V_6_q0),
    .address1(buf_val_y_V_6_address1),
    .ce1(buf_val_y_V_6_ce1),
    .we1(buf_val_y_V_6_we1),
    .d1(ap_phi_mux_buf_val_y_V_load_6_6_i_phi_fu_570_p4)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_1_address0),
    .ce0(buf_val_z_V_1_ce0),
    .q0(buf_val_z_V_1_q0),
    .address1(buf_val_z_V_1_address1),
    .ce1(buf_val_z_V_1_ce1),
    .we1(buf_val_z_V_1_we1),
    .d1(buf_val_z_V_2_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_2_address0),
    .ce0(buf_val_z_V_2_ce0),
    .q0(buf_val_z_V_2_q0),
    .address1(buf_val_z_V_2_address1),
    .ce1(buf_val_z_V_2_ce1),
    .we1(buf_val_z_V_2_we1),
    .d1(buf_val_z_V_3_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_3_address0),
    .ce0(buf_val_z_V_3_ce0),
    .q0(buf_val_z_V_3_q0),
    .address1(buf_val_z_V_3_address1),
    .ce1(buf_val_z_V_3_ce1),
    .we1(buf_val_z_V_3_we1),
    .d1(buf_val_z_V_4_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_4_address0),
    .ce0(buf_val_z_V_4_ce0),
    .q0(buf_val_z_V_4_q0),
    .address1(buf_val_z_V_4_address1),
    .ce1(buf_val_z_V_4_ce1),
    .we1(buf_val_z_V_4_we1),
    .d1(buf_val_z_V_5_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_5_address0),
    .ce0(buf_val_z_V_5_ce0),
    .q0(buf_val_z_V_5_q0),
    .address1(buf_val_z_V_5_address1),
    .ce1(buf_val_z_V_5_ce1),
    .we1(buf_val_z_V_5_we1),
    .d1(buf_val_z_V_6_q0)
);

optical_flow_gradient_weight_y_buf_val_x_V_1 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_z_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_z_V_6_address0),
    .ce0(buf_val_z_V_6_ce0),
    .q0(buf_val_z_V_6_q0),
    .address1(buf_val_z_V_6_address1),
    .ce1(buf_val_z_V_6_ce1),
    .we1(buf_val_z_V_6_we1),
    .d1(ap_phi_mux_buf_val_z_V_load_6_6_i_phi_fu_584_p4)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_1_load_reg_1587),
    .din1(grp_fu_749_p1),
    .ce(grp_fu_749_ce),
    .dout(grp_fu_749_p2)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_1_load_reg_1592),
    .din1(grp_fu_758_p1),
    .ce(grp_fu_758_ce),
    .dout(grp_fu_758_p2)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_1_load_reg_1597),
    .din1(grp_fu_767_p1),
    .ce(grp_fu_767_ce),
    .dout(grp_fu_767_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_2_load_reg_1602),
    .din1(grp_fu_776_p1),
    .ce(grp_fu_776_ce),
    .dout(grp_fu_776_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_2_load_reg_1607),
    .din1(grp_fu_785_p1),
    .ce(grp_fu_785_ce),
    .dout(grp_fu_785_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_2_load_reg_1612),
    .din1(grp_fu_794_p1),
    .ce(grp_fu_794_ce),
    .dout(grp_fu_794_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_3_load_reg_1617),
    .din1(grp_fu_803_p1),
    .ce(grp_fu_803_ce),
    .dout(grp_fu_803_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_3_load_reg_1622),
    .din1(grp_fu_812_p1),
    .ce(grp_fu_812_ce),
    .dout(grp_fu_812_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_3_load_reg_1627),
    .din1(grp_fu_821_p1),
    .ce(grp_fu_821_ce),
    .dout(grp_fu_821_p2)
);

optical_flow_mul_32s_19ns_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_2_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_4_load_reg_1632),
    .din1(grp_fu_830_p1),
    .ce(grp_fu_830_ce),
    .dout(grp_fu_830_p2)
);

optical_flow_mul_32s_19ns_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_2_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_4_load_reg_1637),
    .din1(grp_fu_839_p1),
    .ce(grp_fu_839_ce),
    .dout(grp_fu_839_p2)
);

optical_flow_mul_32s_19ns_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_2_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_4_load_reg_1642),
    .din1(grp_fu_848_p1),
    .ce(grp_fu_848_ce),
    .dout(grp_fu_848_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_5_load_reg_1647_pp0_iter2_reg),
    .din1(grp_fu_887_p1),
    .ce(grp_fu_887_ce),
    .dout(grp_fu_887_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_5_load_reg_1652_pp0_iter2_reg),
    .din1(grp_fu_896_p1),
    .ce(grp_fu_896_ce),
    .dout(grp_fu_896_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_5_load_reg_1657_pp0_iter2_reg),
    .din1(grp_fu_905_p1),
    .ce(grp_fu_905_ce),
    .dout(grp_fu_905_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_6_load_reg_1662_pp0_iter2_reg),
    .din1(grp_fu_914_p1),
    .ce(grp_fu_914_ce),
    .dout(grp_fu_914_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_6_load_reg_1667_pp0_iter2_reg),
    .din1(grp_fu_923_p1),
    .ce(grp_fu_923_ce),
    .dout(grp_fu_923_p2)
);

optical_flow_mul_32s_18ns_50_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 50 ))
mul_32s_18ns_50_2_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_6_load_reg_1672_pp0_iter2_reg),
    .din1(grp_fu_932_p1),
    .ce(grp_fu_932_ce),
    .dout(grp_fu_932_p2)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_x_V_load_6_6_i_reg_552_pp0_iter2_reg),
    .din1(grp_fu_942_p1),
    .ce(grp_fu_942_ce),
    .dout(grp_fu_942_p2)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_y_V_load_6_6_i_reg_566_pp0_iter2_reg),
    .din1(grp_fu_952_p1),
    .ce(grp_fu_952_ce),
    .dout(grp_fu_952_p2)
);

optical_flow_mul_32s_17ns_49_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 49 ))
mul_32s_17ns_49_2_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buf_val_z_V_load_6_6_i_reg_580_pp0_iter2_reg),
    .din1(grp_fu_962_p1),
    .ce(grp_fu_962_ce),
    .dout(grp_fu_962_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_171)) begin
        if (((select_ln135_1_fu_662_p3 == 1'd0) & (icmp_ln135_fu_630_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_buf_val_x_V_load_6_6_i_reg_552 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_buf_val_x_V_load_6_6_i_reg_552 <= ap_phi_reg_pp0_iter0_buf_val_x_V_load_6_6_i_reg_552;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_171)) begin
        if (((select_ln135_1_fu_662_p3 == 1'd0) & (icmp_ln135_fu_630_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_buf_val_y_V_load_6_6_i_reg_566 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_buf_val_y_V_load_6_6_i_reg_566 <= ap_phi_reg_pp0_iter0_buf_val_y_V_load_6_6_i_reg_566;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_171)) begin
        if (((select_ln135_1_fu_662_p3 == 1'd0) & (icmp_ln135_fu_630_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_buf_val_z_V_load_6_6_i_reg_580 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_buf_val_z_V_load_6_6_i_reg_580 <= ap_phi_reg_pp0_iter0_buf_val_z_V_load_6_6_i_reg_580;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_244)) begin
        if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
            buf_val_x_V_load_6_6_i_reg_552 <= gradient_x_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            buf_val_x_V_load_6_6_i_reg_552 <= ap_phi_reg_pp0_iter1_buf_val_x_V_load_6_6_i_reg_552;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_244)) begin
        if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
            buf_val_y_V_load_6_6_i_reg_566 <= gradient_y_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            buf_val_y_V_load_6_6_i_reg_566 <= ap_phi_reg_pp0_iter1_buf_val_y_V_load_6_6_i_reg_566;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_244)) begin
        if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
            buf_val_z_V_load_6_6_i_reg_580 <= gradient_z_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            buf_val_z_V_load_6_6_i_reg_580 <= ap_phi_reg_pp0_iter1_buf_val_z_V_load_6_6_i_reg_580;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln135_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_reg_541 <= add_ln137_fu_740_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_reg_541 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln135_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_519 <= add_ln135_1_fu_594_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_519 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln135_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        r_reg_530 <= select_ln135_4_fu_710_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_530 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln135_fu_630_p2 == 1'd0))) begin
        buf_val_x_V_1_addr_reg_1474 <= zext_ln768_fu_718_p1;
        buf_val_x_V_2_addr_reg_1492 <= zext_ln768_fu_718_p1;
        buf_val_x_V_3_addr_reg_1510 <= zext_ln768_fu_718_p1;
        buf_val_x_V_4_addr_reg_1528 <= zext_ln768_fu_718_p1;
        buf_val_x_V_5_addr_reg_1546 <= zext_ln768_fu_718_p1;
        buf_val_x_V_6_addr_reg_1564 <= zext_ln768_fu_718_p1;
        buf_val_y_V_1_addr_reg_1480 <= zext_ln768_fu_718_p1;
        buf_val_y_V_2_addr_reg_1498 <= zext_ln768_fu_718_p1;
        buf_val_y_V_3_addr_reg_1516 <= zext_ln768_fu_718_p1;
        buf_val_y_V_4_addr_reg_1534 <= zext_ln768_fu_718_p1;
        buf_val_y_V_5_addr_reg_1552 <= zext_ln768_fu_718_p1;
        buf_val_y_V_6_addr_reg_1570 <= zext_ln768_fu_718_p1;
        buf_val_z_V_1_addr_reg_1486 <= zext_ln768_fu_718_p1;
        buf_val_z_V_2_addr_reg_1504 <= zext_ln768_fu_718_p1;
        buf_val_z_V_3_addr_reg_1522 <= zext_ln768_fu_718_p1;
        buf_val_z_V_4_addr_reg_1540 <= zext_ln768_fu_718_p1;
        buf_val_z_V_5_addr_reg_1558 <= zext_ln768_fu_718_p1;
        buf_val_z_V_6_addr_reg_1576 <= zext_ln768_fu_718_p1;
        select_ln135_1_reg_1457 <= select_ln135_1_fu_662_p3;
        select_ln135_2_reg_1461 <= select_ln135_2_fu_676_p3;
        select_ln135_3_reg_1465 <= select_ln135_3_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_1_load_reg_1587 <= buf_val_x_V_1_q0;
        buf_val_x_V_2_load_reg_1602 <= buf_val_x_V_2_q0;
        buf_val_x_V_3_load_reg_1617 <= buf_val_x_V_3_q0;
        buf_val_x_V_4_load_reg_1632 <= buf_val_x_V_4_q0;
        buf_val_x_V_5_load_reg_1647 <= buf_val_x_V_5_q0;
        buf_val_x_V_6_load_reg_1662 <= buf_val_x_V_6_q0;
        buf_val_y_V_1_load_reg_1592 <= buf_val_y_V_1_q0;
        buf_val_y_V_2_load_reg_1607 <= buf_val_y_V_2_q0;
        buf_val_y_V_3_load_reg_1622 <= buf_val_y_V_3_q0;
        buf_val_y_V_4_load_reg_1637 <= buf_val_y_V_4_q0;
        buf_val_y_V_5_load_reg_1652 <= buf_val_y_V_5_q0;
        buf_val_y_V_6_load_reg_1667 <= buf_val_y_V_6_q0;
        buf_val_z_V_1_load_reg_1597 <= buf_val_z_V_1_q0;
        buf_val_z_V_2_load_reg_1612 <= buf_val_z_V_2_q0;
        buf_val_z_V_3_load_reg_1627 <= buf_val_z_V_3_q0;
        buf_val_z_V_4_load_reg_1642 <= buf_val_z_V_4_q0;
        buf_val_z_V_5_load_reg_1657 <= buf_val_z_V_5_q0;
        buf_val_z_V_6_load_reg_1672 <= buf_val_z_V_6_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        buf_val_x_V_5_load_reg_1647_pp0_iter2_reg <= buf_val_x_V_5_load_reg_1647;
        buf_val_x_V_6_load_reg_1662_pp0_iter2_reg <= buf_val_x_V_6_load_reg_1662;
        buf_val_x_V_load_6_6_i_reg_552_pp0_iter2_reg <= buf_val_x_V_load_6_6_i_reg_552;
        buf_val_y_V_5_load_reg_1652_pp0_iter2_reg <= buf_val_y_V_5_load_reg_1652;
        buf_val_y_V_6_load_reg_1667_pp0_iter2_reg <= buf_val_y_V_6_load_reg_1667;
        buf_val_y_V_load_6_6_i_reg_566_pp0_iter2_reg <= buf_val_y_V_load_6_6_i_reg_566;
        buf_val_z_V_5_load_reg_1657_pp0_iter2_reg <= buf_val_z_V_5_load_reg_1657;
        buf_val_z_V_6_load_reg_1672_pp0_iter2_reg <= buf_val_z_V_6_load_reg_1672;
        buf_val_z_V_load_6_6_i_reg_580_pp0_iter2_reg <= buf_val_z_V_load_6_6_i_reg_580;
        select_ln135_2_reg_1461_pp0_iter2_reg <= select_ln135_2_reg_1461_pp0_iter1_reg;
        select_ln135_2_reg_1461_pp0_iter3_reg <= select_ln135_2_reg_1461_pp0_iter2_reg;
        select_ln135_2_reg_1461_pp0_iter4_reg <= select_ln135_2_reg_1461_pp0_iter3_reg;
        select_ln135_2_reg_1461_pp0_iter5_reg <= select_ln135_2_reg_1461_pp0_iter4_reg;
        select_ln135_3_reg_1465_pp0_iter2_reg <= select_ln135_3_reg_1465_pp0_iter1_reg;
        select_ln135_3_reg_1465_pp0_iter3_reg <= select_ln135_3_reg_1465_pp0_iter2_reg;
        select_ln135_3_reg_1465_pp0_iter4_reg <= select_ln135_3_reg_1465_pp0_iter3_reg;
        select_ln135_3_reg_1465_pp0_iter5_reg <= select_ln135_3_reg_1465_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln135_reg_1453 <= icmp_ln135_fu_630_p2;
        select_ln135_2_reg_1461_pp0_iter1_reg <= select_ln135_2_reg_1461;
        select_ln135_3_reg_1465_pp0_iter1_reg <= select_ln135_3_reg_1465;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln135_3_reg_1465_pp0_iter2_reg == 1'd0))) begin
        mul_ln1118_13_reg_1752 <= grp_fu_776_p2;
        mul_ln1118_14_reg_1757 <= grp_fu_785_p2;
        mul_ln1118_15_reg_1762 <= grp_fu_794_p2;
        mul_ln1118_16_reg_1767 <= grp_fu_803_p2;
        mul_ln1118_17_reg_1772 <= grp_fu_812_p2;
        mul_ln1118_18_reg_1777 <= grp_fu_821_p2;
        mul_ln703_23_reg_1787 <= grp_fu_839_p2;
        mul_ln703_24_reg_1792 <= grp_fu_848_p2;
        mul_ln703_reg_1782 <= grp_fu_830_p2;
        trunc_ln708_6_reg_1742 <= {{grp_fu_758_p2[48:19]}};
        trunc_ln708_7_reg_1747 <= {{grp_fu_767_p2[48:19]}};
        trunc_ln_reg_1737 <= {{grp_fu_749_p2[48:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln135_3_reg_1465_pp0_iter3_reg == 1'd0))) begin
        mul_ln1118_19_reg_1857 <= grp_fu_887_p2;
        mul_ln1118_20_reg_1862 <= grp_fu_896_p2;
        mul_ln1118_21_reg_1867 <= grp_fu_905_p2;
        mul_ln1118_22_reg_1872 <= grp_fu_914_p2;
        mul_ln1118_23_reg_1877 <= grp_fu_923_p2;
        mul_ln1118_24_reg_1882 <= grp_fu_932_p2;
        mul_ln1118_25_reg_1887 <= grp_fu_942_p2;
        mul_ln1118_26_reg_1892 <= grp_fu_952_p2;
        mul_ln1118_27_reg_1897 <= grp_fu_962_p2;
        tmp_32_reg_1842 <= {{add_ln1192_28_fu_1163_p2[50:19]}};
        tmp_33_reg_1847 <= {{add_ln1192_29_fu_1178_p2[50:19]}};
        tmp_34_reg_1852 <= {{add_ln1192_30_fu_1193_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln135_3_reg_1465_pp0_iter4_reg == 1'd0))) begin
        trunc_ln708_8_reg_1902 <= {{add_ln1192_37_fu_1394_p2[50:19]}};
        trunc_ln708_9_reg_1907 <= {{add_ln1192_38_fu_1413_p2[50:19]}};
        trunc_ln708_s_reg_1912 <= {{add_ln1192_39_fu_1432_p2[50:19]}};
    end
end

always @ (*) begin
    if ((icmp_ln135_fu_630_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
        ap_phi_mux_buf_val_x_V_load_6_6_i_phi_fu_556_p4 = gradient_x_V_dout;
    end else begin
        ap_phi_mux_buf_val_x_V_load_6_6_i_phi_fu_556_p4 = ap_phi_reg_pp0_iter1_buf_val_x_V_load_6_6_i_reg_552;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
        ap_phi_mux_buf_val_y_V_load_6_6_i_phi_fu_570_p4 = gradient_y_V_dout;
    end else begin
        ap_phi_mux_buf_val_y_V_load_6_6_i_phi_fu_570_p4 = ap_phi_reg_pp0_iter1_buf_val_y_V_load_6_6_i_reg_566;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0))) begin
        ap_phi_mux_buf_val_z_V_load_6_6_i_phi_fu_584_p4 = gradient_z_V_dout;
    end else begin
        ap_phi_mux_buf_val_z_V_load_6_6_i_phi_fu_584_p4 = ap_phi_reg_pp0_iter1_buf_val_z_V_load_6_6_i_reg_580;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_1_ce0 = 1'b1;
    end else begin
        buf_val_x_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_1_ce1 = 1'b1;
    end else begin
        buf_val_x_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_1_we1 = 1'b1;
    end else begin
        buf_val_x_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_2_ce0 = 1'b1;
    end else begin
        buf_val_x_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_2_ce1 = 1'b1;
    end else begin
        buf_val_x_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_2_we1 = 1'b1;
    end else begin
        buf_val_x_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_3_ce0 = 1'b1;
    end else begin
        buf_val_x_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_3_ce1 = 1'b1;
    end else begin
        buf_val_x_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_3_we1 = 1'b1;
    end else begin
        buf_val_x_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_4_ce0 = 1'b1;
    end else begin
        buf_val_x_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_4_ce1 = 1'b1;
    end else begin
        buf_val_x_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_4_we1 = 1'b1;
    end else begin
        buf_val_x_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_5_ce0 = 1'b1;
    end else begin
        buf_val_x_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_5_ce1 = 1'b1;
    end else begin
        buf_val_x_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_5_we1 = 1'b1;
    end else begin
        buf_val_x_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_x_V_6_ce0 = 1'b1;
    end else begin
        buf_val_x_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_6_ce1 = 1'b1;
    end else begin
        buf_val_x_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_x_V_6_we1 = 1'b1;
    end else begin
        buf_val_x_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_1_ce0 = 1'b1;
    end else begin
        buf_val_y_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_1_ce1 = 1'b1;
    end else begin
        buf_val_y_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_1_we1 = 1'b1;
    end else begin
        buf_val_y_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_2_ce0 = 1'b1;
    end else begin
        buf_val_y_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_2_ce1 = 1'b1;
    end else begin
        buf_val_y_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_2_we1 = 1'b1;
    end else begin
        buf_val_y_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_3_ce0 = 1'b1;
    end else begin
        buf_val_y_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_3_ce1 = 1'b1;
    end else begin
        buf_val_y_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_3_we1 = 1'b1;
    end else begin
        buf_val_y_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_4_ce0 = 1'b1;
    end else begin
        buf_val_y_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_4_ce1 = 1'b1;
    end else begin
        buf_val_y_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_4_we1 = 1'b1;
    end else begin
        buf_val_y_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_5_ce0 = 1'b1;
    end else begin
        buf_val_y_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_5_ce1 = 1'b1;
    end else begin
        buf_val_y_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_5_we1 = 1'b1;
    end else begin
        buf_val_y_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_y_V_6_ce0 = 1'b1;
    end else begin
        buf_val_y_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_6_ce1 = 1'b1;
    end else begin
        buf_val_y_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_y_V_6_we1 = 1'b1;
    end else begin
        buf_val_y_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_1_ce0 = 1'b1;
    end else begin
        buf_val_z_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_1_ce1 = 1'b1;
    end else begin
        buf_val_z_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_1_we1 = 1'b1;
    end else begin
        buf_val_z_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_2_ce0 = 1'b1;
    end else begin
        buf_val_z_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_2_ce1 = 1'b1;
    end else begin
        buf_val_z_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_2_we1 = 1'b1;
    end else begin
        buf_val_z_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_3_ce0 = 1'b1;
    end else begin
        buf_val_z_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_3_ce1 = 1'b1;
    end else begin
        buf_val_z_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_3_we1 = 1'b1;
    end else begin
        buf_val_z_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_4_ce0 = 1'b1;
    end else begin
        buf_val_z_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_4_ce1 = 1'b1;
    end else begin
        buf_val_z_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_4_we1 = 1'b1;
    end else begin
        buf_val_z_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_5_ce0 = 1'b1;
    end else begin
        buf_val_z_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_5_ce1 = 1'b1;
    end else begin
        buf_val_z_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_5_we1 = 1'b1;
    end else begin
        buf_val_z_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_z_V_6_ce0 = 1'b1;
    end else begin
        buf_val_z_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_6_ce1 = 1'b1;
    end else begin
        buf_val_z_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_z_V_6_we1 = 1'b1;
    end else begin
        buf_val_z_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradient_x_V_blk_n = gradient_x_V_empty_n;
    end else begin
        gradient_x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op158_read_state3 == 1'b1))) begin
        gradient_x_V_read = 1'b1;
    end else begin
        gradient_x_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradient_y_V_blk_n = gradient_y_V_empty_n;
    end else begin
        gradient_y_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op159_read_state3 == 1'b1))) begin
        gradient_y_V_read = 1'b1;
    end else begin
        gradient_y_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradient_z_V_blk_n = gradient_z_V_empty_n;
    end else begin
        gradient_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op160_read_state3 == 1'b1))) begin
        gradient_z_V_read = 1'b1;
    end else begin
        gradient_z_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_749_ce = 1'b1;
    end else begin
        grp_fu_749_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_758_ce = 1'b1;
    end else begin
        grp_fu_758_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_767_ce = 1'b1;
    end else begin
        grp_fu_767_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_776_ce = 1'b1;
    end else begin
        grp_fu_776_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_785_ce = 1'b1;
    end else begin
        grp_fu_785_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_794_ce = 1'b1;
    end else begin
        grp_fu_794_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_803_ce = 1'b1;
    end else begin
        grp_fu_803_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_812_ce = 1'b1;
    end else begin
        grp_fu_812_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_821_ce = 1'b1;
    end else begin
        grp_fu_821_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_830_ce = 1'b1;
    end else begin
        grp_fu_830_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_839_ce = 1'b1;
    end else begin
        grp_fu_839_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_848_ce = 1'b1;
    end else begin
        grp_fu_848_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_887_ce = 1'b1;
    end else begin
        grp_fu_887_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_896_ce = 1'b1;
    end else begin
        grp_fu_896_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_905_ce = 1'b1;
    end else begin
        grp_fu_905_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_914_ce = 1'b1;
    end else begin
        grp_fu_914_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_923_ce = 1'b1;
    end else begin
        grp_fu_923_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_932_ce = 1'b1;
    end else begin
        grp_fu_932_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_942_ce = 1'b1;
    end else begin
        grp_fu_942_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_952_ce = 1'b1;
    end else begin
        grp_fu_952_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_962_ce = 1'b1;
    end else begin
        grp_fu_962_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        y_filtered_x_V_blk_n = y_filtered_x_V_full_n;
    end else begin
        y_filtered_x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op310_write_state8 == 1'b1)) begin
            y_filtered_x_V_din = 32'd0;
        end else if ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0)) begin
            y_filtered_x_V_din = trunc_ln708_8_reg_1902;
        end else begin
            y_filtered_x_V_din = 'bx;
        end
    end else begin
        y_filtered_x_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op310_write_state8 == 1'b1)))) begin
        y_filtered_x_V_write = 1'b1;
    end else begin
        y_filtered_x_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        y_filtered_y_V_blk_n = y_filtered_y_V_full_n;
    end else begin
        y_filtered_y_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op311_write_state8 == 1'b1)) begin
            y_filtered_y_V_din = 32'd0;
        end else if ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0)) begin
            y_filtered_y_V_din = trunc_ln708_9_reg_1907;
        end else begin
            y_filtered_y_V_din = 'bx;
        end
    end else begin
        y_filtered_y_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op311_write_state8 == 1'b1)))) begin
        y_filtered_y_V_write = 1'b1;
    end else begin
        y_filtered_y_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        y_filtered_z_V_blk_n = y_filtered_z_V_full_n;
    end else begin
        y_filtered_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op312_write_state8 == 1'b1)) begin
            y_filtered_z_V_din = 32'd0;
        end else if ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0)) begin
            y_filtered_z_V_din = trunc_ln708_s_reg_1912;
        end else begin
            y_filtered_z_V_din = 'bx;
        end
    end else begin
        y_filtered_z_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op312_write_state8 == 1'b1)))) begin
        y_filtered_z_V_write = 1'b1;
    end else begin
        y_filtered_z_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln135_fu_630_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln135_fu_630_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_23_fu_1017_p2 = ($signed(sext_ln703_10_fu_1013_p1) + $signed(mul_ln1118_14_reg_1757));

assign add_ln1192_24_fu_1055_p2 = ($signed(sext_ln703_11_fu_1051_p1) + $signed(mul_ln1118_15_reg_1762));

assign add_ln1192_25_fu_1085_p2 = ($signed(sext_ln728_fu_1002_p1) + $signed(sext_ln703_12_fu_1082_p1));

assign add_ln1192_26_fu_1112_p2 = ($signed(sext_ln728_1_fu_1040_p1) + $signed(sext_ln703_13_fu_1109_p1));

assign add_ln1192_27_fu_1139_p2 = ($signed(sext_ln728_2_fu_1078_p1) + $signed(sext_ln703_14_fu_1136_p1));

assign add_ln1192_28_fu_1163_p2 = (mul_ln703_reg_1782 + and_ln728_s_fu_1101_p3);

assign add_ln1192_29_fu_1178_p2 = (mul_ln703_23_reg_1787 + and_ln728_21_fu_1128_p3);

assign add_ln1192_30_fu_1193_p2 = (mul_ln703_24_reg_1792 + and_ln728_22_fu_1155_p3);

assign add_ln1192_31_fu_1232_p2 = ($signed(and_ln728_23_fu_1208_p3) + $signed(sext_ln703_15_fu_1229_p1));

assign add_ln1192_32_fu_1259_p2 = ($signed(and_ln728_24_fu_1215_p3) + $signed(sext_ln703_16_fu_1256_p1));

assign add_ln1192_33_fu_1286_p2 = ($signed(and_ln728_25_fu_1222_p3) + $signed(sext_ln703_17_fu_1283_p1));

assign add_ln1192_34_fu_1313_p2 = ($signed(and_ln728_26_fu_1248_p3) + $signed(sext_ln703_18_fu_1310_p1));

assign add_ln1192_35_fu_1340_p2 = ($signed(and_ln728_27_fu_1275_p3) + $signed(sext_ln703_19_fu_1337_p1));

assign add_ln1192_36_fu_1367_p2 = ($signed(and_ln728_28_fu_1302_p3) + $signed(sext_ln703_20_fu_1364_p1));

assign add_ln1192_37_fu_1394_p2 = ($signed(and_ln728_29_fu_1329_p3) + $signed(sext_ln703_21_fu_1391_p1));

assign add_ln1192_38_fu_1413_p2 = ($signed(and_ln728_30_fu_1356_p3) + $signed(sext_ln703_22_fu_1410_p1));

assign add_ln1192_39_fu_1432_p2 = ($signed(and_ln728_31_fu_1383_p3) + $signed(sext_ln703_23_fu_1429_p1));

assign add_ln1192_fu_979_p2 = ($signed(sext_ln703_fu_975_p1) + $signed(mul_ln1118_13_reg_1752));

assign add_ln135_1_fu_594_p2 = (indvar_flatten_reg_519 + 19'd1);

assign add_ln135_fu_636_p2 = (r_reg_530 + 9'd1);

assign add_ln137_fu_740_p2 = (select_ln135_fu_648_p3 + 11'd1);

assign and_ln728_21_fu_1128_p3 = {{tmp_30_fu_1118_p4}, {19'd0}};

assign and_ln728_22_fu_1155_p3 = {{tmp_31_fu_1145_p4}, {19'd0}};

assign and_ln728_23_fu_1208_p3 = {{tmp_32_reg_1842}, {19'd0}};

assign and_ln728_24_fu_1215_p3 = {{tmp_33_reg_1847}, {19'd0}};

assign and_ln728_25_fu_1222_p3 = {{tmp_34_reg_1852}, {19'd0}};

assign and_ln728_26_fu_1248_p3 = {{tmp_35_fu_1238_p4}, {19'd0}};

assign and_ln728_27_fu_1275_p3 = {{tmp_36_fu_1265_p4}, {19'd0}};

assign and_ln728_28_fu_1302_p3 = {{tmp_37_fu_1292_p4}, {19'd0}};

assign and_ln728_29_fu_1329_p3 = {{tmp_38_fu_1319_p4}, {19'd0}};

assign and_ln728_30_fu_1356_p3 = {{tmp_39_fu_1346_p4}, {19'd0}};

assign and_ln728_31_fu_1383_p3 = {{tmp_40_fu_1373_p4}, {19'd0}};

assign and_ln728_s_fu_1101_p3 = {{tmp_29_fu_1091_p4}, {19'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_z_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_y_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_x_V_full_n == 1'b0)) | ((y_filtered_z_V_full_n == 1'b0) & (ap_predicate_op312_write_state8 == 1'b1)) | ((y_filtered_y_V_full_n == 1'b0) & (ap_predicate_op311_write_state8 == 1'b1)) | ((y_filtered_x_V_full_n == 1'b0) & (ap_predicate_op310_write_state8 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((gradient_z_V_empty_n == 1'b0) & (ap_predicate_op160_read_state3 == 1'b1)) | ((gradient_y_V_empty_n == 1'b0) & (ap_predicate_op159_read_state3 == 1'b1)) | ((gradient_x_V_empty_n == 1'b0) & (ap_predicate_op158_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_z_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_y_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_x_V_full_n == 1'b0)) | ((y_filtered_z_V_full_n == 1'b0) & (ap_predicate_op312_write_state8 == 1'b1)) | ((y_filtered_y_V_full_n == 1'b0) & (ap_predicate_op311_write_state8 == 1'b1)) | ((y_filtered_x_V_full_n == 1'b0) & (ap_predicate_op310_write_state8 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((gradient_z_V_empty_n == 1'b0) & (ap_predicate_op160_read_state3 == 1'b1)) | ((gradient_y_V_empty_n == 1'b0) & (ap_predicate_op159_read_state3 == 1'b1)) | ((gradient_x_V_empty_n == 1'b0) & (ap_predicate_op158_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_z_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_y_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_x_V_full_n == 1'b0)) | ((y_filtered_z_V_full_n == 1'b0) & (ap_predicate_op312_write_state8 == 1'b1)) | ((y_filtered_y_V_full_n == 1'b0) & (ap_predicate_op311_write_state8 == 1'b1)) | ((y_filtered_x_V_full_n == 1'b0) & (ap_predicate_op310_write_state8 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((gradient_z_V_empty_n == 1'b0) & (ap_predicate_op160_read_state3 == 1'b1)) | ((gradient_y_V_empty_n == 1'b0) & (ap_predicate_op159_read_state3 == 1'b1)) | ((gradient_x_V_empty_n == 1'b0) & (ap_predicate_op158_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((gradient_z_V_empty_n == 1'b0) & (ap_predicate_op160_read_state3 == 1'b1)) | ((gradient_y_V_empty_n == 1'b0) & (ap_predicate_op159_read_state3 == 1'b1)) | ((gradient_x_V_empty_n == 1'b0) & (ap_predicate_op158_read_state3 == 1'b1)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = (((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_z_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_y_V_full_n == 1'b0)) | ((select_ln135_3_reg_1465_pp0_iter5_reg == 1'd0) & (y_filtered_x_V_full_n == 1'b0)) | ((y_filtered_z_V_full_n == 1'b0) & (ap_predicate_op312_write_state8 == 1'b1)) | ((y_filtered_y_V_full_n == 1'b0) & (ap_predicate_op311_write_state8 == 1'b1)) | ((y_filtered_x_V_full_n == 1'b0) & (ap_predicate_op310_write_state8 == 1'b1)));
end

always @ (*) begin
    ap_condition_171 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_244 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_operation_101 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_102 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_103 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_107 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_108 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_109 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_113 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_114 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_115 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_125 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_126 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_127 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_128 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_129 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_130 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_131 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_132 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_133 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_134 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_135 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_136 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_137 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_138 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_139 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_140 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_141 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_142 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_143 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_144 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_145 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_146 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_147 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_148 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_149 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_150 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_151 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_152 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_153 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_154 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_155 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_156 = (icmp_ln135_reg_1453 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_157 = (icmp_ln135_reg_1453 == 1'd0);
end

assign ap_enable_operation_165 = (1'b1 == 1'b1);

assign ap_enable_operation_166 = (1'b1 == 1'b1);

assign ap_enable_operation_167 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_83 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_84 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_85 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_89 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_90 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_91 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_95 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_96 = (icmp_ln135_fu_630_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_97 = (icmp_ln135_fu_630_p2 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter0_buf_val_x_V_load_6_6_i_reg_552 = 'bx;

assign ap_phi_reg_pp0_iter0_buf_val_y_V_load_6_6_i_reg_566 = 'bx;

assign ap_phi_reg_pp0_iter0_buf_val_z_V_load_6_6_i_reg_580 = 'bx;

always @ (*) begin
    ap_predicate_op158_read_state3 = ((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0));
end

always @ (*) begin
    ap_predicate_op159_read_state3 = ((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0));
end

always @ (*) begin
    ap_predicate_op160_read_state3 = ((select_ln135_1_reg_1457 == 1'd1) & (icmp_ln135_reg_1453 == 1'd0));
end

always @ (*) begin
    ap_predicate_op310_write_state8 = ((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op311_write_state8 = ((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op312_write_state8 = ((select_ln135_2_reg_1461_pp0_iter5_reg == 1'd1) & (select_ln135_3_reg_1465_pp0_iter5_reg == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign brmerge_i_fu_624_p2 = (cmp32_not_i_fu_618_p2 | cmp31_not_i_fu_612_p2);

assign brmerge_i_mid1_fu_696_p2 = (cmp32_not_i_mid1_fu_690_p2 | cmp31_not_i_mid1_fu_684_p2);

assign buf_val_x_V_1_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_1_address1 = buf_val_x_V_1_addr_reg_1474;

assign buf_val_x_V_2_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_2_address1 = buf_val_x_V_2_addr_reg_1492;

assign buf_val_x_V_3_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_3_address1 = buf_val_x_V_3_addr_reg_1510;

assign buf_val_x_V_4_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_4_address1 = buf_val_x_V_4_addr_reg_1528;

assign buf_val_x_V_5_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_5_address1 = buf_val_x_V_5_addr_reg_1546;

assign buf_val_x_V_6_address0 = zext_ln768_fu_718_p1;

assign buf_val_x_V_6_address1 = buf_val_x_V_6_addr_reg_1564;

assign buf_val_y_V_1_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_1_address1 = buf_val_y_V_1_addr_reg_1480;

assign buf_val_y_V_2_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_2_address1 = buf_val_y_V_2_addr_reg_1498;

assign buf_val_y_V_3_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_3_address1 = buf_val_y_V_3_addr_reg_1516;

assign buf_val_y_V_4_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_4_address1 = buf_val_y_V_4_addr_reg_1534;

assign buf_val_y_V_5_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_5_address1 = buf_val_y_V_5_addr_reg_1552;

assign buf_val_y_V_6_address0 = zext_ln768_fu_718_p1;

assign buf_val_y_V_6_address1 = buf_val_y_V_6_addr_reg_1570;

assign buf_val_z_V_1_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_1_address1 = buf_val_z_V_1_addr_reg_1486;

assign buf_val_z_V_2_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_2_address1 = buf_val_z_V_2_addr_reg_1504;

assign buf_val_z_V_3_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_3_address1 = buf_val_z_V_3_addr_reg_1522;

assign buf_val_z_V_4_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_4_address1 = buf_val_z_V_4_addr_reg_1540;

assign buf_val_z_V_5_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_5_address1 = buf_val_z_V_5_addr_reg_1558;

assign buf_val_z_V_6_address0 = zext_ln768_fu_718_p1;

assign buf_val_z_V_6_address1 = buf_val_z_V_6_addr_reg_1576;

assign cmp31_not_i_fu_612_p2 = ((r_reg_530 < 9'd6) ? 1'b1 : 1'b0);

assign cmp31_not_i_mid1_fu_684_p2 = ((add_ln135_fu_636_p2 < 9'd6) ? 1'b1 : 1'b0);

assign cmp32_not_i_fu_618_p2 = (cmp7_i_fu_600_p2 ^ 1'd1);

assign cmp32_not_i_mid1_fu_690_p2 = (cmp7_i_mid1_fu_656_p2 ^ 1'd1);

assign cmp58_i_fu_606_p2 = ((r_reg_530 > 9'd2) ? 1'b1 : 1'b0);

assign cmp58_i_mid1_fu_670_p2 = ((add_ln135_fu_636_p2 > 9'd2) ? 1'b1 : 1'b0);

assign cmp7_i_fu_600_p2 = ((r_reg_530 < 9'd436) ? 1'b1 : 1'b0);

assign cmp7_i_mid1_fu_656_p2 = ((add_ln135_fu_636_p2 < 9'd436) ? 1'b1 : 1'b0);

assign grp_fu_749_p1 = 49'd39583;

assign grp_fu_758_p1 = 49'd39583;

assign grp_fu_767_p1 = 49'd39583;

assign grp_fu_776_p1 = 50'd69730;

assign grp_fu_785_p1 = 50'd69730;

assign grp_fu_794_p1 = 50'd69730;

assign grp_fu_803_p1 = 50'd97989;

assign grp_fu_812_p1 = 50'd97989;

assign grp_fu_821_p1 = 50'd97989;

assign grp_fu_830_p1 = 51'd152200;

assign grp_fu_839_p1 = 51'd152200;

assign grp_fu_848_p1 = 51'd152200;

assign grp_fu_887_p1 = 50'd97989;

assign grp_fu_896_p1 = 50'd97989;

assign grp_fu_905_p1 = 50'd97989;

assign grp_fu_914_p1 = 50'd69730;

assign grp_fu_923_p1 = 50'd69730;

assign grp_fu_932_p1 = 50'd69730;

assign grp_fu_942_p1 = 49'd39583;

assign grp_fu_952_p1 = 49'd39583;

assign grp_fu_962_p1 = 49'd39583;

assign icmp_ln135_fu_630_p2 = ((indvar_flatten_reg_519 == 19'd449536) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_642_p2 = ((c_reg_541 == 11'd1024) ? 1'b1 : 1'b0);

assign select_ln135_1_fu_662_p3 = ((icmp_ln137_fu_642_p2[0:0] == 1'b1) ? cmp7_i_mid1_fu_656_p2 : cmp7_i_fu_600_p2);

assign select_ln135_2_fu_676_p3 = ((icmp_ln137_fu_642_p2[0:0] == 1'b1) ? cmp58_i_mid1_fu_670_p2 : cmp58_i_fu_606_p2);

assign select_ln135_3_fu_702_p3 = ((icmp_ln137_fu_642_p2[0:0] == 1'b1) ? brmerge_i_mid1_fu_696_p2 : brmerge_i_fu_624_p2);

assign select_ln135_4_fu_710_p3 = ((icmp_ln137_fu_642_p2[0:0] == 1'b1) ? add_ln135_fu_636_p2 : r_reg_530);

assign select_ln135_fu_648_p3 = ((icmp_ln137_fu_642_p2[0:0] == 1'b1) ? 11'd0 : c_reg_541);

assign sext_ln703_10_fu_1013_p1 = $signed(tmp_s_fu_1006_p3);

assign sext_ln703_11_fu_1051_p1 = $signed(tmp_28_fu_1044_p3);

assign sext_ln703_12_fu_1082_p1 = $signed(mul_ln1118_16_reg_1767);

assign sext_ln703_13_fu_1109_p1 = $signed(mul_ln1118_17_reg_1772);

assign sext_ln703_14_fu_1136_p1 = $signed(mul_ln1118_18_reg_1777);

assign sext_ln703_15_fu_1229_p1 = $signed(mul_ln1118_19_reg_1857);

assign sext_ln703_16_fu_1256_p1 = $signed(mul_ln1118_20_reg_1862);

assign sext_ln703_17_fu_1283_p1 = $signed(mul_ln1118_21_reg_1867);

assign sext_ln703_18_fu_1310_p1 = $signed(mul_ln1118_22_reg_1872);

assign sext_ln703_19_fu_1337_p1 = $signed(mul_ln1118_23_reg_1877);

assign sext_ln703_20_fu_1364_p1 = $signed(mul_ln1118_24_reg_1882);

assign sext_ln703_21_fu_1391_p1 = $signed(mul_ln1118_25_reg_1887);

assign sext_ln703_22_fu_1410_p1 = $signed(mul_ln1118_26_reg_1892);

assign sext_ln703_23_fu_1429_p1 = $signed(mul_ln1118_27_reg_1897);

assign sext_ln703_fu_975_p1 = $signed(tmp_fu_968_p3);

assign sext_ln728_1_fu_1040_p1 = $signed(tmp_56_fu_1032_p3);

assign sext_ln728_2_fu_1078_p1 = $signed(tmp_58_fu_1070_p3);

assign sext_ln728_fu_1002_p1 = $signed(tmp_54_fu_994_p3);

assign start_out = real_start;

assign tmp_28_fu_1044_p3 = {{trunc_ln708_7_reg_1747}, {19'd0}};

assign tmp_29_fu_1091_p4 = {{add_ln1192_25_fu_1085_p2[50:19]}};

assign tmp_30_fu_1118_p4 = {{add_ln1192_26_fu_1112_p2[50:19]}};

assign tmp_31_fu_1145_p4 = {{add_ln1192_27_fu_1139_p2[50:19]}};

assign tmp_35_fu_1238_p4 = {{add_ln1192_31_fu_1232_p2[50:19]}};

assign tmp_36_fu_1265_p4 = {{add_ln1192_32_fu_1259_p2[50:19]}};

assign tmp_37_fu_1292_p4 = {{add_ln1192_33_fu_1286_p2[50:19]}};

assign tmp_38_fu_1319_p4 = {{add_ln1192_34_fu_1313_p2[50:19]}};

assign tmp_39_fu_1346_p4 = {{add_ln1192_35_fu_1340_p2[50:19]}};

assign tmp_40_fu_1373_p4 = {{add_ln1192_36_fu_1367_p2[50:19]}};

assign tmp_53_fu_984_p4 = {{add_ln1192_fu_979_p2[49:19]}};

assign tmp_54_fu_994_p3 = {{tmp_53_fu_984_p4}, {19'd0}};

assign tmp_55_fu_1022_p4 = {{add_ln1192_23_fu_1017_p2[49:19]}};

assign tmp_56_fu_1032_p3 = {{tmp_55_fu_1022_p4}, {19'd0}};

assign tmp_57_fu_1060_p4 = {{add_ln1192_24_fu_1055_p2[49:19]}};

assign tmp_58_fu_1070_p3 = {{tmp_57_fu_1060_p4}, {19'd0}};

assign tmp_fu_968_p3 = {{trunc_ln_reg_1737}, {19'd0}};

assign tmp_s_fu_1006_p3 = {{trunc_ln708_6_reg_1742}, {19'd0}};

assign zext_ln768_fu_718_p1 = select_ln135_fu_648_p3;

endmodule //optical_flow_gradient_weight_y
