// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rendering_rasterization1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        triangle_2d_same_x2_V_write,
        triangle_2d_same_y2_V_write,
        triangle_2d_same_z_V_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] triangle_2d_same_x2_V_write;
input  [7:0] triangle_2d_same_y2_V_write;
input  [7:0] triangle_2d_same_z_V_write;
output  [0:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [15:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[15:0] ap_return_11;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] ret_55_fu_208_p2;
reg   [17:0] ret_55_reg_595;
wire   [17:0] ret_58_fu_242_p2;
reg   [17:0] ret_58_reg_601;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln151_fu_252_p2;
reg   [0:0] icmp_ln151_reg_612;
wire   [7:0] in1_V_1_fu_264_p3;
reg   [7:0] in1_V_1_reg_616;
wire   [7:0] in1_V_fu_270_p3;
reg   [7:0] in1_V_reg_622;
wire   [7:0] in0_V_1_fu_276_p3;
reg   [7:0] in0_V_1_reg_628;
wire   [7:0] in0_V_fu_282_p3;
reg   [7:0] in0_V_reg_634;
wire   [7:0] rhs_13_fu_318_p3;
reg   [7:0] rhs_13_reg_640;
wire   [0:0] icmp_ln886_fu_326_p2;
reg   [0:0] icmp_ln886_reg_646;
wire   [0:0] icmp_ln886_1_fu_332_p2;
reg   [0:0] icmp_ln886_1_reg_651;
wire   [0:0] icmp_ln886_2_fu_337_p2;
reg   [0:0] icmp_ln886_2_reg_656;
wire   [7:0] rhs_14_fu_372_p3;
reg   [7:0] rhs_14_reg_661;
wire   [0:0] icmp_ln886_3_fu_380_p2;
reg   [0:0] icmp_ln886_3_reg_667;
wire   [0:0] icmp_ln886_4_fu_386_p2;
reg   [0:0] icmp_ln886_4_reg_672;
wire   [0:0] icmp_ln886_5_fu_391_p2;
reg   [0:0] icmp_ln886_5_reg_677;
reg   [7:0] ap_phi_mux_phi_ln341_phi_fu_76_p4;
reg   [7:0] phi_ln341_reg_72;
wire    ap_CS_fsm_state3;
reg   [7:0] ap_phi_mux_phi_ln341_1_phi_fu_87_p4;
reg   [7:0] phi_ln341_1_reg_83;
reg   [7:0] ap_phi_mux_phi_ln341_2_phi_fu_98_p4;
reg   [7:0] phi_ln341_2_reg_94;
reg   [7:0] ap_phi_mux_phi_ln341_3_phi_fu_109_p4;
reg   [7:0] phi_ln341_3_reg_105;
wire   [7:0] trunc_ln213_fu_443_p1;
reg   [7:0] ap_phi_mux_phi_ln341_4_phi_fu_120_p4;
reg   [7:0] phi_ln341_4_reg_116;
reg   [7:0] ap_phi_mux_phi_ln341_5_phi_fu_131_p4;
reg   [7:0] phi_ln341_5_reg_127;
reg   [7:0] ap_phi_mux_phi_ln341_6_phi_fu_142_p4;
reg   [7:0] phi_ln341_6_reg_138;
wire   [15:0] mul_ln213_fu_469_p2;
reg   [15:0] ap_phi_mux_phi_ln341_7_phi_fu_153_p4;
reg   [15:0] phi_ln341_7_reg_149;
reg   [0:0] ap_phi_mux_this_V_write_assign_phi_fu_164_p4;
reg   [0:0] this_V_write_assign_reg_160;
reg    ap_block_state1;
wire   [8:0] zext_ln215_fu_172_p1;
wire   [8:0] zext_ln1347_fu_176_p1;
wire   [8:0] zext_ln215_1_fu_186_p1;
wire   [8:0] zext_ln1347_2_fu_190_p1;
wire  signed [8:0] ret_53_fu_180_p2;
wire  signed [8:0] ret_54_fu_194_p2;
wire   [8:0] zext_ln1347_3_fu_214_p1;
wire   [8:0] zext_ln1347_4_fu_224_p1;
wire  signed [8:0] ret_56_fu_218_p2;
wire  signed [8:0] ret_57_fu_228_p2;
wire   [17:0] ret_fu_248_p2;
wire   [0:0] tmp_fu_256_p3;
wire   [0:0] icmp_ln878_2_fu_294_p2;
wire   [0:0] icmp_ln878_3_fu_306_p2;
wire   [0:0] icmp_ln878_fu_288_p2;
wire   [7:0] select_ln69_fu_299_p3;
wire   [7:0] select_ln76_fu_311_p3;
wire   [0:0] icmp_ln878_5_fu_348_p2;
wire   [0:0] icmp_ln878_6_fu_360_p2;
wire   [0:0] icmp_ln878_4_fu_342_p2;
wire   [7:0] select_ln69_1_fu_353_p3;
wire   [7:0] select_ln76_1_fu_365_p3;
wire   [7:0] select_ln89_fu_396_p3;
wire   [7:0] select_ln96_fu_401_p3;
wire   [7:0] select_ln89_1_fu_413_p3;
wire   [7:0] select_ln96_1_fu_418_p3;
wire   [7:0] max_min_V_1_fu_406_p3;
wire   [8:0] zext_ln215_2_fu_430_p1;
wire   [8:0] zext_ln215_3_fu_434_p1;
wire  signed [8:0] ret_51_fu_437_p2;
wire   [7:0] max_min_V_3_fu_423_p3;
wire   [8:0] zext_ln215_4_fu_448_p1;
wire   [8:0] zext_ln215_5_fu_452_p1;
wire  signed [8:0] ret_52_fu_455_p2;
reg   [0:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [15:0] ap_return_11_preg;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 16'd0;
end

rendering_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U9(
    .din0(ret_53_fu_180_p2),
    .din1(ret_54_fu_194_p2),
    .dout(ret_55_fu_208_p2)
);

rendering_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U10(
    .din0(ret_56_fu_218_p2),
    .din1(ret_57_fu_228_p2),
    .dout(ret_58_fu_242_p2)
);

rendering_mul_9s_9s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9s_9s_16_1_1_U11(
    .din0(ret_51_fu_437_p2),
    .din1(ret_52_fu_455_p2),
    .dout(mul_ln213_fu_469_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_0_preg <= ap_phi_mux_this_V_write_assign_phi_fu_164_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_10_preg <= triangle_2d_same_z_V_write;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_11_preg <= ap_phi_mux_phi_ln341_7_phi_fu_153_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_1_preg <= ap_phi_mux_phi_ln341_6_phi_fu_142_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_2_preg <= ap_phi_mux_phi_ln341_5_phi_fu_131_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_3_preg <= ap_phi_mux_phi_ln341_4_phi_fu_120_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_4_preg <= ap_phi_mux_phi_ln341_3_phi_fu_109_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_5_preg <= ap_phi_mux_phi_ln341_phi_fu_76_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_6_preg <= ap_phi_mux_phi_ln341_1_phi_fu_87_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_7_preg <= ap_phi_mux_phi_ln341_2_phi_fu_98_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_8_preg <= triangle_2d_same_x2_V_write;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_9_preg <= triangle_2d_same_y2_V_write;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        this_V_write_assign_reg_160 <= 1'd0;
    end else if (((icmp_ln151_fu_252_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        this_V_write_assign_reg_160 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln151_reg_612 <= icmp_ln151_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_252_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln886_1_reg_651 <= icmp_ln886_1_fu_332_p2;
        icmp_ln886_2_reg_656 <= icmp_ln886_2_fu_337_p2;
        icmp_ln886_3_reg_667 <= icmp_ln886_3_fu_380_p2;
        icmp_ln886_4_reg_672 <= icmp_ln886_4_fu_386_p2;
        icmp_ln886_5_reg_677 <= icmp_ln886_5_fu_391_p2;
        icmp_ln886_reg_646 <= icmp_ln886_fu_326_p2;
        in0_V_1_reg_628 <= in0_V_1_fu_276_p3;
        in0_V_reg_634 <= in0_V_fu_282_p3;
        in1_V_1_reg_616 <= in1_V_1_fu_264_p3;
        in1_V_reg_622 <= in1_V_fu_270_p3;
        rhs_13_reg_640 <= rhs_13_fu_318_p3;
        rhs_14_reg_661 <= rhs_14_fu_372_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln341_1_reg_83 <= in1_V_reg_622;
        phi_ln341_2_reg_94 <= in1_V_1_reg_616;
        phi_ln341_3_reg_105 <= in0_V_reg_634;
        phi_ln341_4_reg_116 <= trunc_ln213_fu_443_p1;
        phi_ln341_5_reg_127 <= rhs_14_reg_661;
        phi_ln341_6_reg_138 <= rhs_13_reg_640;
        phi_ln341_7_reg_149 <= mul_ln213_fu_469_p2;
        phi_ln341_reg_72 <= in0_V_1_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ret_55_reg_595 <= ret_55_fu_208_p2;
        ret_58_reg_601 <= ret_58_fu_242_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_1_phi_fu_87_p4 = in1_V_reg_622;
    end else begin
        ap_phi_mux_phi_ln341_1_phi_fu_87_p4 = phi_ln341_1_reg_83;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_2_phi_fu_98_p4 = in1_V_1_reg_616;
    end else begin
        ap_phi_mux_phi_ln341_2_phi_fu_98_p4 = phi_ln341_2_reg_94;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_3_phi_fu_109_p4 = in0_V_reg_634;
    end else begin
        ap_phi_mux_phi_ln341_3_phi_fu_109_p4 = phi_ln341_3_reg_105;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_4_phi_fu_120_p4 = trunc_ln213_fu_443_p1;
    end else begin
        ap_phi_mux_phi_ln341_4_phi_fu_120_p4 = phi_ln341_4_reg_116;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_5_phi_fu_131_p4 = rhs_14_reg_661;
    end else begin
        ap_phi_mux_phi_ln341_5_phi_fu_131_p4 = phi_ln341_5_reg_127;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_6_phi_fu_142_p4 = rhs_13_reg_640;
    end else begin
        ap_phi_mux_phi_ln341_6_phi_fu_142_p4 = phi_ln341_6_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_7_phi_fu_153_p4 = mul_ln213_fu_469_p2;
    end else begin
        ap_phi_mux_phi_ln341_7_phi_fu_153_p4 = phi_ln341_7_reg_149;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_phi_ln341_phi_fu_76_p4 = in0_V_1_reg_628;
    end else begin
        ap_phi_mux_phi_ln341_phi_fu_76_p4 = phi_ln341_reg_72;
    end
end

always @ (*) begin
    if (((icmp_ln151_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_this_V_write_assign_phi_fu_164_p4 = 1'd0;
    end else begin
        ap_phi_mux_this_V_write_assign_phi_fu_164_p4 = this_V_write_assign_reg_160;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_0 = ap_phi_mux_this_V_write_assign_phi_fu_164_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_1 = ap_phi_mux_phi_ln341_6_phi_fu_142_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_10 = triangle_2d_same_z_V_write;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_11 = ap_phi_mux_phi_ln341_7_phi_fu_153_p4;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_2 = ap_phi_mux_phi_ln341_5_phi_fu_131_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_3 = ap_phi_mux_phi_ln341_4_phi_fu_120_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_4 = ap_phi_mux_phi_ln341_3_phi_fu_109_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_5 = ap_phi_mux_phi_ln341_phi_fu_76_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_6 = ap_phi_mux_phi_ln341_1_phi_fu_87_p4;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_7 = ap_phi_mux_phi_ln341_2_phi_fu_98_p4;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_8 = triangle_2d_same_x2_V_write;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_9 = triangle_2d_same_y2_V_write;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln151_fu_252_p2 = ((ret_55_reg_595 == ret_58_reg_601) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_294_p2 = ((in0_V_fu_282_p3 < triangle_2d_same_x2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln878_3_fu_306_p2 = ((in1_V_fu_270_p3 < triangle_2d_same_x2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln878_4_fu_342_p2 = ((in0_V_1_fu_276_p3 < in1_V_1_fu_264_p3) ? 1'b1 : 1'b0);

assign icmp_ln878_5_fu_348_p2 = ((in0_V_1_fu_276_p3 < triangle_2d_same_y2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln878_6_fu_360_p2 = ((in1_V_1_fu_264_p3 < triangle_2d_same_y2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_288_p2 = ((in0_V_fu_282_p3 < in1_V_fu_270_p3) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_332_p2 = ((in0_V_fu_282_p3 > triangle_2d_same_x2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_337_p2 = ((in1_V_fu_270_p3 > triangle_2d_same_x2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_380_p2 = ((in0_V_1_fu_276_p3 > in1_V_1_fu_264_p3) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_386_p2 = ((in0_V_1_fu_276_p3 > triangle_2d_same_y2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_391_p2 = ((in1_V_1_fu_264_p3 > triangle_2d_same_y2_V_write) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_326_p2 = ((in0_V_fu_282_p3 > in1_V_fu_270_p3) ? 1'b1 : 1'b0);

assign in0_V_1_fu_276_p3 = ((tmp_fu_256_p3[0:0] == 1'b1) ? p_read4 : p_read2);

assign in0_V_fu_282_p3 = ((tmp_fu_256_p3[0:0] == 1'b1) ? p_read3 : p_read1);

assign in1_V_1_fu_264_p3 = ((tmp_fu_256_p3[0:0] == 1'b1) ? p_read2 : p_read4);

assign in1_V_fu_270_p3 = ((tmp_fu_256_p3[0:0] == 1'b1) ? p_read1 : p_read3);

assign max_min_V_1_fu_406_p3 = ((icmp_ln886_reg_646[0:0] == 1'b1) ? select_ln89_fu_396_p3 : select_ln96_fu_401_p3);

assign max_min_V_3_fu_423_p3 = ((icmp_ln886_3_reg_667[0:0] == 1'b1) ? select_ln89_1_fu_413_p3 : select_ln96_1_fu_418_p3);

assign ret_51_fu_437_p2 = (zext_ln215_2_fu_430_p1 - zext_ln215_3_fu_434_p1);

assign ret_52_fu_455_p2 = (zext_ln215_4_fu_448_p1 - zext_ln215_5_fu_452_p1);

assign ret_53_fu_180_p2 = (zext_ln215_fu_172_p1 - zext_ln1347_fu_176_p1);

assign ret_54_fu_194_p2 = (zext_ln215_1_fu_186_p1 - zext_ln1347_2_fu_190_p1);

assign ret_56_fu_218_p2 = (zext_ln1347_3_fu_214_p1 - zext_ln1347_2_fu_190_p1);

assign ret_57_fu_228_p2 = (zext_ln1347_4_fu_224_p1 - zext_ln1347_fu_176_p1);

assign ret_fu_248_p2 = (ret_55_reg_595 - ret_58_reg_601);

assign rhs_13_fu_318_p3 = ((icmp_ln878_fu_288_p2[0:0] == 1'b1) ? select_ln69_fu_299_p3 : select_ln76_fu_311_p3);

assign rhs_14_fu_372_p3 = ((icmp_ln878_4_fu_342_p2[0:0] == 1'b1) ? select_ln69_1_fu_353_p3 : select_ln76_1_fu_365_p3);

assign select_ln69_1_fu_353_p3 = ((icmp_ln878_5_fu_348_p2[0:0] == 1'b1) ? in0_V_1_fu_276_p3 : triangle_2d_same_y2_V_write);

assign select_ln69_fu_299_p3 = ((icmp_ln878_2_fu_294_p2[0:0] == 1'b1) ? in0_V_fu_282_p3 : triangle_2d_same_x2_V_write);

assign select_ln76_1_fu_365_p3 = ((icmp_ln878_6_fu_360_p2[0:0] == 1'b1) ? in1_V_1_fu_264_p3 : triangle_2d_same_y2_V_write);

assign select_ln76_fu_311_p3 = ((icmp_ln878_3_fu_306_p2[0:0] == 1'b1) ? in1_V_fu_270_p3 : triangle_2d_same_x2_V_write);

assign select_ln89_1_fu_413_p3 = ((icmp_ln886_4_reg_672[0:0] == 1'b1) ? in0_V_1_reg_628 : triangle_2d_same_y2_V_write);

assign select_ln89_fu_396_p3 = ((icmp_ln886_1_reg_651[0:0] == 1'b1) ? in0_V_reg_634 : triangle_2d_same_x2_V_write);

assign select_ln96_1_fu_418_p3 = ((icmp_ln886_5_reg_677[0:0] == 1'b1) ? in1_V_1_reg_616 : triangle_2d_same_y2_V_write);

assign select_ln96_fu_401_p3 = ((icmp_ln886_2_reg_656[0:0] == 1'b1) ? in1_V_reg_622 : triangle_2d_same_x2_V_write);

assign tmp_fu_256_p3 = ret_fu_248_p2[32'd17];

assign trunc_ln213_fu_443_p1 = ret_51_fu_437_p2[7:0];

assign zext_ln1347_2_fu_190_p1 = p_read2;

assign zext_ln1347_3_fu_214_p1 = triangle_2d_same_y2_V_write;

assign zext_ln1347_4_fu_224_p1 = p_read3;

assign zext_ln1347_fu_176_p1 = p_read1;

assign zext_ln215_1_fu_186_p1 = p_read4;

assign zext_ln215_2_fu_430_p1 = max_min_V_1_fu_406_p3;

assign zext_ln215_3_fu_434_p1 = rhs_13_reg_640;

assign zext_ln215_4_fu_448_p1 = max_min_V_3_fu_423_p3;

assign zext_ln215_5_fu_452_p1 = rhs_14_reg_661;

assign zext_ln215_fu_172_p1 = triangle_2d_same_x2_V_write;

endmodule //rendering_rasterization1
