// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="face_detect_face_detect,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=110,HLS_SYN_DSP=0,HLS_SYN_FF=73800,HLS_SYN_LUT=109255,HLS_VERSION=2020_2}" *)

module face_detect (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 128'd1;
parameter    ap_ST_fsm_state2 = 128'd2;
parameter    ap_ST_fsm_state3 = 128'd4;
parameter    ap_ST_fsm_state4 = 128'd8;
parameter    ap_ST_fsm_state5 = 128'd16;
parameter    ap_ST_fsm_state6 = 128'd32;
parameter    ap_ST_fsm_state7 = 128'd64;
parameter    ap_ST_fsm_state8 = 128'd128;
parameter    ap_ST_fsm_state9 = 128'd256;
parameter    ap_ST_fsm_state10 = 128'd512;
parameter    ap_ST_fsm_state11 = 128'd1024;
parameter    ap_ST_fsm_state12 = 128'd2048;
parameter    ap_ST_fsm_state13 = 128'd4096;
parameter    ap_ST_fsm_state14 = 128'd8192;
parameter    ap_ST_fsm_state15 = 128'd16384;
parameter    ap_ST_fsm_state16 = 128'd32768;
parameter    ap_ST_fsm_state17 = 128'd65536;
parameter    ap_ST_fsm_state18 = 128'd131072;
parameter    ap_ST_fsm_state19 = 128'd262144;
parameter    ap_ST_fsm_state20 = 128'd524288;
parameter    ap_ST_fsm_state21 = 128'd1048576;
parameter    ap_ST_fsm_state22 = 128'd2097152;
parameter    ap_ST_fsm_state23 = 128'd4194304;
parameter    ap_ST_fsm_state24 = 128'd8388608;
parameter    ap_ST_fsm_state25 = 128'd16777216;
parameter    ap_ST_fsm_state26 = 128'd33554432;
parameter    ap_ST_fsm_state27 = 128'd67108864;
parameter    ap_ST_fsm_state28 = 128'd134217728;
parameter    ap_ST_fsm_state29 = 128'd268435456;
parameter    ap_ST_fsm_state30 = 128'd536870912;
parameter    ap_ST_fsm_state31 = 128'd1073741824;
parameter    ap_ST_fsm_state32 = 128'd2147483648;
parameter    ap_ST_fsm_state33 = 128'd4294967296;
parameter    ap_ST_fsm_state34 = 128'd8589934592;
parameter    ap_ST_fsm_state35 = 128'd17179869184;
parameter    ap_ST_fsm_state36 = 128'd34359738368;
parameter    ap_ST_fsm_state37 = 128'd68719476736;
parameter    ap_ST_fsm_state38 = 128'd137438953472;
parameter    ap_ST_fsm_state39 = 128'd274877906944;
parameter    ap_ST_fsm_state40 = 128'd549755813888;
parameter    ap_ST_fsm_state41 = 128'd1099511627776;
parameter    ap_ST_fsm_state42 = 128'd2199023255552;
parameter    ap_ST_fsm_state43 = 128'd4398046511104;
parameter    ap_ST_fsm_state44 = 128'd8796093022208;
parameter    ap_ST_fsm_state45 = 128'd17592186044416;
parameter    ap_ST_fsm_state46 = 128'd35184372088832;
parameter    ap_ST_fsm_state47 = 128'd70368744177664;
parameter    ap_ST_fsm_state48 = 128'd140737488355328;
parameter    ap_ST_fsm_state49 = 128'd281474976710656;
parameter    ap_ST_fsm_state50 = 128'd562949953421312;
parameter    ap_ST_fsm_state51 = 128'd1125899906842624;
parameter    ap_ST_fsm_state52 = 128'd2251799813685248;
parameter    ap_ST_fsm_state53 = 128'd4503599627370496;
parameter    ap_ST_fsm_state54 = 128'd9007199254740992;
parameter    ap_ST_fsm_state55 = 128'd18014398509481984;
parameter    ap_ST_fsm_state56 = 128'd36028797018963968;
parameter    ap_ST_fsm_state57 = 128'd72057594037927936;
parameter    ap_ST_fsm_state58 = 128'd144115188075855872;
parameter    ap_ST_fsm_state59 = 128'd288230376151711744;
parameter    ap_ST_fsm_state60 = 128'd576460752303423488;
parameter    ap_ST_fsm_state61 = 128'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 128'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 128'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 128'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 128'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 128'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 128'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 128'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 128'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 128'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 128'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage0 = 128'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 128'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 128'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 128'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 128'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 128'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 128'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 128'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 128'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 128'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 128'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 128'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 128'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 128'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 128'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 128'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 128'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 128'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 128'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 128'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 128'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 128'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 128'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 128'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 128'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 128'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 128'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 128'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 128'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 128'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 128'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 128'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 128'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 128'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 128'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 128'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 128'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 128'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 128'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 128'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 128'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 128'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 128'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 128'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 128'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 128'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 128'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_pp1_stage0 = 128'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state127 = 128'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state128 = 128'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state129 = 128'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state130 = 128'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_pp2_stage0 = 128'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_pp2_stage1 = 128'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_pp2_stage2 = 128'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_pp2_stage3 = 128'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state205 = 128'd170141183460469231731687303715884105728;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [127:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] inData;
wire   [63:0] result_x;
wire   [63:0] result_y;
wire   [63:0] result_w;
wire   [63:0] result_h;
reg   [16:0] Data_address0;
reg    Data_ce0;
reg    Data_we0;
wire   [7:0] Data_d0;
wire   [7:0] Data_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln2817_reg_2274;
reg   [0:0] icmp_ln2820_reg_2289;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln2870_reg_2536;
reg   [0:0] icmp_ln2871_reg_2545;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp2_iter17;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter17_reg;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg    ap_enable_reg_pp2_iter18;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter1_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter18_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [511:0] gmem_WDATA;
reg   [63:0] gmem_WSTRB;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [16:0] indvar_flatten_reg_530;
reg   [7:0] i_reg_541;
reg   [8:0] j_reg_553;
reg   [503:0] shiftreg76_reg_564;
reg   [16:0] indvar_flatten16_reg_609;
reg   [7:0] i_1_reg_620;
reg   [8:0] j_2_reg_631;
reg   [6:0] i_2_reg_642;
reg   [95:0] phi_ln2871_reg_654;
reg   [95:0] phi_ln2872_reg_665;
reg   [95:0] phi_ln2873_reg_676;
reg   [95:0] phi_ln2874_reg_687;
reg   [63:0] result_h_read_reg_2234;
reg   [63:0] result_w_read_reg_2240;
reg   [63:0] result_y_read_reg_2246;
reg   [63:0] result_x_read_reg_2252;
reg   [57:0] trunc_ln_reg_2258;
wire   [16:0] add_ln2817_1_fu_837_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state72_pp0_stage0_iter0;
reg    ap_predicate_op320_read_state73;
reg    ap_block_state73_pp0_stage0_iter1;
wire    ap_block_state74_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln2817_fu_843_p2;
reg   [0:0] icmp_ln2817_reg_2274_pp0_iter1_reg;
wire   [0:0] icmp_ln2818_fu_849_p2;
reg   [0:0] icmp_ln2818_reg_2278;
reg   [0:0] icmp_ln2818_reg_2278_pp0_iter1_reg;
wire   [8:0] select_ln2817_fu_855_p3;
reg   [8:0] select_ln2817_reg_2284;
reg   [8:0] select_ln2817_reg_2284_pp0_iter1_reg;
wire   [0:0] icmp_ln2820_fu_867_p2;
reg   [0:0] icmp_ln2820_reg_2289_pp0_iter1_reg;
wire   [8:0] add_ln2818_fu_873_p2;
wire   [7:0] select_ln2817_2_fu_885_p3;
reg   [7:0] select_ln2817_2_reg_2298;
reg   [511:0] gmem_addr_read_reg_2305;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] grp_fu_765_p2;
reg   [31:0] dc_2_reg_2315;
wire    ap_CS_fsm_state87;
wire   [31:0] grp_fu_771_p2;
reg   [31:0] dc_3_reg_2321;
wire   [7:0] tmp_46_fu_1005_p4;
reg   [7:0] tmp_46_reg_2327;
wire    ap_CS_fsm_state89;
wire   [22:0] tmp_47_fu_1015_p1;
reg   [22:0] tmp_47_reg_2333;
wire   [0:0] and_ln2836_fu_1043_p2;
reg   [0:0] p_Result_2_reg_2342;
wire   [31:0] val_2_fu_1149_p3;
reg   [31:0] val_2_reg_2348;
reg   [0:0] p_Result_3_reg_2355;
wire   [5:0] trunc_ln2871_fu_1165_p1;
reg   [5:0] trunc_ln2871_reg_2361;
wire   [5:0] trunc_ln2872_fu_1168_p1;
reg   [5:0] trunc_ln2872_reg_2366;
wire   [5:0] trunc_ln2873_fu_1171_p1;
reg   [5:0] trunc_ln2873_reg_2371;
wire   [5:0] trunc_ln2874_fu_1174_p1;
reg   [5:0] trunc_ln2874_reg_2376;
wire   [31:0] val_3_fu_1266_p3;
reg   [31:0] val_3_reg_2381;
wire    ap_CS_fsm_state90;
wire   [31:0] grp_fu_758_p2;
reg   [31:0] value_assign_reg_2388;
wire    ap_CS_fsm_state112;
wire   [0:0] icmp_ln2776_fu_1301_p2;
reg   [0:0] icmp_ln2776_reg_2395;
wire    ap_CS_fsm_state113;
wire   [0:0] icmp_ln2776_4_fu_1307_p2;
reg   [0:0] icmp_ln2776_4_reg_2400;
wire   [63:0] grp_fu_777_p1;
reg   [63:0] conv_i_reg_2405;
wire    ap_CS_fsm_state114;
wire   [63:0] select_ln2776_fu_1323_p3;
reg   [63:0] select_ln2776_reg_2410;
wire   [63:0] grp_fu_791_p2;
reg   [63:0] dc_reg_2415;
wire    ap_CS_fsm_state119;
wire   [63:0] data_V_fu_1331_p1;
reg   [63:0] data_V_reg_2420;
wire    ap_CS_fsm_state120;
wire   [31:0] val_fu_1440_p3;
reg   [31:0] val_reg_2425;
wire   [31:0] result_V_20_fu_1453_p3;
reg   [31:0] result_V_20_reg_2431;
wire   [31:0] result_V_21_fu_1464_p3;
reg   [31:0] result_V_21_reg_2437;
wire  signed [31:0] sext_ln3376_1_fu_1497_p1;
reg  signed [31:0] sext_ln3376_1_reg_2444;
(* use_dsp48 = "no" *) wire  signed [23:0] y_ratio_fu_1518_p2;
reg  signed [23:0] y_ratio_reg_2449;
wire   [16:0] add_ln3380_1_fu_1524_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state121_pp1_stage0_iter0;
wire    ap_block_state122_pp1_stage0_iter1;
wire    ap_block_state123_pp1_stage0_iter2;
wire    ap_block_state124_pp1_stage0_iter3;
wire    ap_block_state125_pp1_stage0_iter4;
wire    ap_block_state126_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] rev61_fu_1539_p2;
reg   [0:0] rev61_reg_2459;
wire   [0:0] icmp_ln3380_fu_1545_p2;
reg   [0:0] icmp_ln3380_reg_2464;
reg   [0:0] icmp_ln3380_reg_2464_pp1_iter1_reg;
reg   [0:0] icmp_ln3380_reg_2464_pp1_iter2_reg;
wire   [7:0] add_ln3380_fu_1551_p2;
reg   [7:0] add_ln3380_reg_2468;
wire   [0:0] icmp_ln3381_fu_1557_p2;
reg   [0:0] icmp_ln3381_reg_2473;
wire   [8:0] select_ln3380_fu_1563_p3;
reg   [8:0] select_ln3380_reg_2478;
reg   [8:0] select_ln3380_reg_2478_pp1_iter1_reg;
reg   [8:0] select_ln3380_reg_2478_pp1_iter2_reg;
reg   [8:0] select_ln3380_reg_2478_pp1_iter3_reg;
reg   [8:0] select_ln3380_reg_2478_pp1_iter4_reg;
wire   [7:0] select_ln3380_1_fu_1571_p3;
reg   [7:0] select_ln3380_1_reg_2484;
reg   [7:0] select_ln3380_1_reg_2484_pp1_iter1_reg;
reg   [7:0] select_ln3380_1_reg_2484_pp1_iter2_reg;
reg   [7:0] select_ln3380_1_reg_2484_pp1_iter3_reg;
reg   [7:0] select_ln3380_1_reg_2484_pp1_iter4_reg;
wire   [8:0] add_ln3381_fu_1583_p2;
wire   [31:0] zext_ln3381_fu_1609_p1;
wire   [0:0] or_ln3383_fu_1623_p2;
reg   [0:0] or_ln3383_reg_2506;
reg   [0:0] or_ln3383_reg_2506_pp1_iter2_reg;
reg   [0:0] or_ln3383_reg_2506_pp1_iter3_reg;
reg   [0:0] or_ln3383_reg_2506_pp1_iter4_reg;
reg   [7:0] idxprom_i_mid2_v_reg_2510;
wire   [31:0] result_V_19_fu_1744_p3;
reg   [31:0] result_V_19_reg_2521;
wire    ap_CS_fsm_state127;
wire   [31:0] grp_processImage_fu_698_ap_return;
reg   [31:0] res_size_Scale_reg_2526;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state130;
wire   [0:0] icmp_ln2870_fu_1752_p2;
wire    ap_block_state131_pp2_stage0_iter0;
wire    ap_block_state135_pp2_stage0_iter1;
reg    ap_block_state135_io;
wire    ap_block_state139_pp2_stage0_iter2;
wire    ap_block_state143_pp2_stage0_iter3;
wire    ap_block_state147_pp2_stage0_iter4;
wire    ap_block_state151_pp2_stage0_iter5;
wire    ap_block_state155_pp2_stage0_iter6;
wire    ap_block_state159_pp2_stage0_iter7;
wire    ap_block_state163_pp2_stage0_iter8;
wire    ap_block_state167_pp2_stage0_iter9;
wire    ap_block_state171_pp2_stage0_iter10;
wire    ap_block_state175_pp2_stage0_iter11;
wire    ap_block_state179_pp2_stage0_iter12;
wire    ap_block_state183_pp2_stage0_iter13;
wire    ap_block_state187_pp2_stage0_iter14;
wire    ap_block_state191_pp2_stage0_iter15;
wire    ap_block_state195_pp2_stage0_iter16;
wire    ap_block_state199_pp2_stage0_iter17;
reg    ap_block_state203_pp2_stage0_iter18;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln2870_reg_2536_pp2_iter1_reg;
wire   [0:0] icmp_ln2871_fu_1770_p2;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter2_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter3_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter4_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter5_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter6_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter7_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter8_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter9_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter10_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter11_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter12_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter13_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter14_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter15_reg;
reg   [0:0] icmp_ln2871_reg_2545_pp2_iter16_reg;
wire   [5:0] add_ln2871_1_fu_1801_p2;
reg   [5:0] add_ln2871_1_reg_2553;
wire   [63:0] shl_ln2871_fu_1810_p2;
reg   [63:0] shl_ln2871_reg_2558;
reg   [57:0] trunc_ln2_reg_2563;
wire   [5:0] add_ln2872_1_fu_1844_p2;
reg   [5:0] add_ln2872_1_reg_2573;
wire   [63:0] shl_ln2872_fu_1853_p2;
reg   [63:0] shl_ln2872_reg_2578;
wire   [511:0] shl_ln2871_1_fu_1882_p2;
reg   [511:0] shl_ln2871_1_reg_2593;
wire    ap_block_state132_pp2_stage1_iter0;
reg    ap_predicate_op663_writereq_state132;
reg    ap_block_state132_io;
wire    ap_block_state136_pp2_stage1_iter1;
reg    ap_block_state136_io;
wire    ap_block_state140_pp2_stage1_iter2;
wire    ap_block_state144_pp2_stage1_iter3;
wire    ap_block_state148_pp2_stage1_iter4;
wire    ap_block_state152_pp2_stage1_iter5;
wire    ap_block_state156_pp2_stage1_iter6;
wire    ap_block_state160_pp2_stage1_iter7;
wire    ap_block_state164_pp2_stage1_iter8;
wire    ap_block_state168_pp2_stage1_iter9;
wire    ap_block_state172_pp2_stage1_iter10;
wire    ap_block_state176_pp2_stage1_iter11;
wire    ap_block_state180_pp2_stage1_iter12;
wire    ap_block_state184_pp2_stage1_iter13;
wire    ap_block_state188_pp2_stage1_iter14;
wire    ap_block_state192_pp2_stage1_iter15;
wire    ap_block_state196_pp2_stage1_iter16;
wire    ap_block_state200_pp2_stage1_iter17;
reg    ap_block_state204_pp2_stage1_iter18;
reg    ap_block_pp2_stage1_11001;
wire   [511:0] shl_ln2872_1_fu_1945_p2;
reg   [511:0] shl_ln2872_1_reg_2604;
reg   [57:0] trunc_ln3_reg_2609;
wire   [127:0] or_ln2_fu_1968_p3;
reg   [127:0] or_ln2_reg_2614;
wire   [31:0] result_h_Scale_q0;
reg   [31:0] result_h_Scale_load_reg_2620;
reg   [95:0] phitmp_cast_reg_2626;
reg   [95:0] phitmp1_cast_reg_2631;
wire    ap_block_state133_pp2_stage2_iter0;
reg    ap_predicate_op682_write_state133;
reg    ap_predicate_op685_writereq_state133;
reg    ap_block_state133_io;
wire    ap_block_state137_pp2_stage2_iter1;
wire    ap_block_state141_pp2_stage2_iter2;
wire    ap_block_state145_pp2_stage2_iter3;
wire    ap_block_state149_pp2_stage2_iter4;
wire    ap_block_state153_pp2_stage2_iter5;
wire    ap_block_state157_pp2_stage2_iter6;
wire    ap_block_state161_pp2_stage2_iter7;
wire    ap_block_state165_pp2_stage2_iter8;
wire    ap_block_state169_pp2_stage2_iter9;
wire    ap_block_state173_pp2_stage2_iter10;
wire    ap_block_state177_pp2_stage2_iter11;
wire    ap_block_state181_pp2_stage2_iter12;
wire    ap_block_state185_pp2_stage2_iter13;
wire    ap_block_state189_pp2_stage2_iter14;
wire    ap_block_state193_pp2_stage2_iter15;
wire    ap_block_state197_pp2_stage2_iter16;
reg    ap_block_state201_pp2_stage2_iter17;
reg    ap_block_pp2_stage2_11001;
wire   [63:0] shl_ln2873_fu_2043_p2;
reg   [63:0] shl_ln2873_reg_2642;
wire   [511:0] shl_ln2873_1_fu_2061_p2;
reg   [511:0] shl_ln2873_1_reg_2647;
reg   [57:0] trunc_ln4_reg_2652;
reg   [95:0] phitmp2_cast_reg_2657;
wire   [6:0] add_ln2870_fu_2093_p2;
reg   [6:0] add_ln2870_reg_2662;
wire    ap_block_state134_pp2_stage3_iter0;
reg    ap_predicate_op707_write_state134;
reg    ap_predicate_op710_writereq_state134;
reg    ap_block_state134_io;
wire    ap_block_state138_pp2_stage3_iter1;
wire    ap_block_state142_pp2_stage3_iter2;
wire    ap_block_state146_pp2_stage3_iter3;
wire    ap_block_state150_pp2_stage3_iter4;
wire    ap_block_state154_pp2_stage3_iter5;
wire    ap_block_state158_pp2_stage3_iter6;
wire    ap_block_state162_pp2_stage3_iter7;
wire    ap_block_state166_pp2_stage3_iter8;
wire    ap_block_state170_pp2_stage3_iter9;
wire    ap_block_state174_pp2_stage3_iter10;
wire    ap_block_state178_pp2_stage3_iter11;
wire    ap_block_state182_pp2_stage3_iter12;
wire    ap_block_state186_pp2_stage3_iter13;
wire    ap_block_state190_pp2_stage3_iter14;
wire    ap_block_state194_pp2_stage3_iter15;
wire    ap_block_state198_pp2_stage3_iter16;
reg    ap_block_state202_pp2_stage3_iter17;
reg    ap_block_pp2_stage3_11001;
wire   [63:0] shl_ln2874_fu_2154_p2;
reg   [63:0] shl_ln2874_reg_2673;
wire   [511:0] shl_ln2874_1_fu_2172_p2;
reg   [511:0] shl_ln2874_1_reg_2678;
reg   [57:0] trunc_ln5_reg_2683;
wire   [95:0] select_ln2874_fu_2205_p3;
reg   [95:0] select_ln2874_reg_2688;
wire    ap_CS_fsm_state71;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state72;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state121;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_block_pp2_stage3_subdone;
reg    ap_condition_pp2_exit_iter0_state134;
reg    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg   [6:0] result_x_Scale_address0;
reg    result_x_Scale_ce0;
reg    result_x_Scale_we0;
wire   [31:0] result_x_Scale_q0;
reg   [6:0] result_y_Scale_address0;
reg    result_y_Scale_ce0;
reg    result_y_Scale_we0;
wire   [31:0] result_y_Scale_q0;
reg   [6:0] result_w_Scale_address0;
reg    result_w_Scale_ce0;
reg    result_w_Scale_we0;
wire   [31:0] result_w_Scale_q0;
reg   [6:0] result_h_Scale_address0;
reg    result_h_Scale_ce0;
reg    result_h_Scale_we0;
reg   [16:0] IMG1_data_address0;
reg    IMG1_data_ce0;
reg    IMG1_data_we0;
wire   [7:0] IMG1_data_q0;
wire    grp_processImage_fu_698_ap_start;
wire    grp_processImage_fu_698_ap_done;
wire    grp_processImage_fu_698_ap_idle;
wire    grp_processImage_fu_698_ap_ready;
wire   [6:0] grp_processImage_fu_698_AllCandidates_x_address0;
wire    grp_processImage_fu_698_AllCandidates_x_ce0;
wire    grp_processImage_fu_698_AllCandidates_x_we0;
wire   [31:0] grp_processImage_fu_698_AllCandidates_x_d0;
wire   [6:0] grp_processImage_fu_698_AllCandidates_y_address0;
wire    grp_processImage_fu_698_AllCandidates_y_ce0;
wire    grp_processImage_fu_698_AllCandidates_y_we0;
wire   [31:0] grp_processImage_fu_698_AllCandidates_y_d0;
wire   [6:0] grp_processImage_fu_698_AllCandidates_w_address0;
wire    grp_processImage_fu_698_AllCandidates_w_ce0;
wire    grp_processImage_fu_698_AllCandidates_w_we0;
wire   [31:0] grp_processImage_fu_698_AllCandidates_w_d0;
wire   [6:0] grp_processImage_fu_698_AllCandidates_h_address0;
wire    grp_processImage_fu_698_AllCandidates_h_ce0;
wire    grp_processImage_fu_698_AllCandidates_h_we0;
wire   [31:0] grp_processImage_fu_698_AllCandidates_h_d0;
wire   [16:0] grp_processImage_fu_698_IMG1_data_address0;
wire    grp_processImage_fu_698_IMG1_data_ce0;
wire   [31:0] grp_processImage_fu_698_grp_fu_777_p_din0;
wire   [63:0] grp_processImage_fu_698_grp_fu_777_p_dout0;
wire    grp_processImage_fu_698_grp_fu_777_p_ce;
wire   [31:0] grp_processImage_fu_698_grp_fu_780_p_din0;
wire   [31:0] grp_processImage_fu_698_grp_fu_780_p_din1;
wire   [4:0] grp_processImage_fu_698_grp_fu_780_p_opcode;
wire   [0:0] grp_processImage_fu_698_grp_fu_780_p_dout0;
wire    grp_processImage_fu_698_grp_fu_780_p_ce;
wire   [31:0] grp_processImage_fu_698_grp_fu_785_p_din0;
wire   [31:0] grp_processImage_fu_698_grp_fu_785_p_din1;
wire   [4:0] grp_processImage_fu_698_grp_fu_785_p_opcode;
wire   [0:0] grp_processImage_fu_698_grp_fu_785_p_dout0;
wire    grp_processImage_fu_698_grp_fu_785_p_ce;
wire   [63:0] grp_processImage_fu_698_grp_fu_791_p_din0;
wire   [63:0] grp_processImage_fu_698_grp_fu_791_p_din1;
wire   [1:0] grp_processImage_fu_698_grp_fu_791_p_opcode;
wire   [63:0] grp_processImage_fu_698_grp_fu_791_p_dout0;
wire    grp_processImage_fu_698_grp_fu_791_p_ce;
reg   [7:0] ap_phi_mux_i_phi_fu_545_p4;
reg   [511:0] ap_phi_mux_empty_75_phi_fu_579_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_75_reg_576;
wire   [511:0] zext_ln2818_fu_927_p1;
reg   [31:0] factor_reg_585;
wire    ap_CS_fsm_state75;
reg   [31:0] res_size_Scale_0_reg_597;
reg   [7:0] ap_phi_mux_i_1_phi_fu_624_p4;
wire    ap_block_pp1_stage0;
reg   [6:0] ap_phi_mux_i_2_phi_fu_646_p4;
reg   [95:0] ap_phi_mux_phi_ln2871_phi_fu_658_p4;
reg   [95:0] ap_phi_mux_phi_ln2872_phi_fu_669_p4;
reg   [95:0] ap_phi_mux_phi_ln2873_phi_fu_680_p4;
reg   [95:0] ap_phi_mux_phi_ln2874_phi_fu_691_p4;
reg    grp_processImage_fu_698_ap_start_reg;
wire   [63:0] zext_ln2820_3_fu_941_p1;
wire   [63:0] zext_ln3384_6_fu_1685_p1;
wire   [63:0] zext_ln3384_5_fu_1727_p1;
wire   [63:0] i_2_cast6_fu_1758_p1;
wire   [63:0] sext_ln2817_fu_827_p1;
wire  signed [63:0] sext_ln2871_fu_1888_p1;
wire  signed [63:0] sext_ln2872_fu_1996_p1;
wire  signed [63:0] sext_ln2873_fu_2099_p1;
wire  signed [63:0] sext_ln2874_fu_2212_p1;
reg    ap_block_pp2_stage2_01001;
reg    ap_block_pp2_stage3_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_state1;
reg   [31:0] grp_fu_758_p1;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state76;
reg   [31:0] grp_fu_777_p0;
reg   [31:0] grp_fu_780_p0;
reg   [31:0] grp_fu_780_p1;
wire    ap_CS_fsm_state88;
reg   [31:0] grp_fu_785_p0;
reg   [31:0] grp_fu_785_p1;
reg   [63:0] grp_fu_791_p0;
reg   [63:0] grp_fu_791_p1;
wire    ap_CS_fsm_state115;
reg   [6:0] grp_fu_795_p1;
reg   [6:0] grp_fu_806_p1;
wire   [5:0] trunc_ln2818_fu_863_p1;
wire   [7:0] add_ln2817_fu_879_p2;
wire   [15:0] tmp_s_fu_899_p3;
wire   [13:0] tmp_15_fu_910_p3;
wire   [16:0] zext_ln2820_fu_906_p1;
wire   [16:0] zext_ln2820_1_fu_917_p1;
wire   [503:0] select_ln2817_1_fu_892_p3;
wire   [16:0] add_ln2820_fu_921_p2;
wire   [16:0] zext_ln2820_2_fu_932_p1;
wire   [16:0] add_ln2820_1_fu_935_p2;
wire   [31:0] data_V_2_fu_961_p1;
wire   [7:0] tmp_44_fu_964_p4;
wire   [22:0] tmp_45_fu_974_p1;
wire   [0:0] icmp_ln2836_1_fu_984_p2;
wire   [0:0] icmp_ln2836_fu_978_p2;
wire   [0:0] or_ln2836_fu_990_p2;
wire   [0:0] grp_fu_780_p2;
wire   [31:0] data_V_3_fu_1002_p1;
wire   [0:0] icmp_ln2836_3_fu_1025_p2;
wire   [0:0] icmp_ln2836_2_fu_1019_p2;
wire   [0:0] or_ln2836_1_fu_1031_p2;
wire   [0:0] grp_fu_785_p2;
wire   [0:0] and_ln2836_1_fu_996_p2;
wire   [0:0] and_ln2836_2_fu_1037_p2;
wire   [24:0] mantissa_2_fu_1057_p4;
wire   [8:0] zext_ln341_fu_1071_p1;
wire   [8:0] add_ln341_fu_1075_p2;
wire   [7:0] sub_ln1311_2_fu_1089_p2;
wire   [0:0] isNeg_2_fu_1081_p3;
wire  signed [8:0] sext_ln1311_2_fu_1095_p1;
wire   [8:0] ush_2_fu_1099_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_1107_p1;
wire   [78:0] zext_ln15_2_fu_1067_p1;
wire   [78:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1111_p1;
wire   [78:0] r_V_5_fu_1115_p2;
wire   [0:0] tmp_29_fu_1127_p3;
wire   [78:0] r_V_6_fu_1121_p2;
wire   [31:0] zext_ln662_2_fu_1135_p1;
wire   [31:0] tmp_24_fu_1139_p4;
wire   [24:0] mantissa_3_fu_1177_p4;
wire   [8:0] zext_ln341_1_fu_1190_p1;
wire   [8:0] add_ln341_1_fu_1193_p2;
wire   [7:0] sub_ln1311_3_fu_1207_p2;
wire   [0:0] isNeg_3_fu_1199_p3;
wire  signed [8:0] sext_ln1311_3_fu_1212_p1;
wire   [8:0] ush_3_fu_1216_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i38_cast_cast_cast_fu_1224_p1;
wire   [78:0] zext_ln15_3_fu_1186_p1;
wire   [78:0] sh_prom_i_i_i_i_i38_cast_cast_cast_cast_fu_1228_p1;
wire   [78:0] r_V_7_fu_1232_p2;
wire   [0:0] tmp_34_fu_1244_p3;
wire   [78:0] r_V_8_fu_1238_p2;
wire   [31:0] zext_ln662_3_fu_1252_p1;
wire   [31:0] tmp_25_fu_1256_p4;
wire   [26:0] grp_fu_1274_p0;
wire   [25:0] grp_fu_1279_p0;
wire    ap_CS_fsm_state91;
wire   [31:0] bitcast_ln2776_fu_1284_p1;
wire   [7:0] tmp_20_fu_1287_p4;
wire   [22:0] trunc_ln2776_fu_1297_p1;
wire   [0:0] or_ln2776_fu_1313_p2;
wire   [0:0] and_ln2776_fu_1317_p2;
wire   [51:0] tmp_43_fu_1344_p1;
wire   [53:0] mantissa_fu_1348_p4;
wire   [10:0] tmp_42_fu_1334_p4;
wire   [11:0] zext_ln510_fu_1362_p1;
wire   [11:0] add_ln510_fu_1366_p2;
wire   [10:0] sub_ln1311_fu_1380_p2;
wire   [0:0] isNeg_fu_1372_p3;
wire  signed [11:0] sext_ln1311_fu_1386_p1;
wire   [11:0] ush_fu_1390_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1398_p1;
wire   [136:0] zext_ln15_fu_1358_p1;
wire   [136:0] sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1402_p1;
wire   [136:0] r_V_fu_1406_p2;
wire   [0:0] tmp_fu_1418_p3;
wire   [136:0] r_V_4_fu_1412_p2;
wire   [31:0] zext_ln662_fu_1426_p1;
wire   [31:0] tmp_23_fu_1430_p4;
wire   [31:0] result_V_13_fu_1448_p2;
wire   [31:0] result_V_17_fu_1459_p2;
wire   [25:0] grp_fu_1274_p2;
wire   [25:0] trunc_ln3376_fu_1470_p1;
wire  signed [26:0] sext_ln3376_fu_1474_p1;
wire   [26:0] sub_ln3376_fu_1478_p2;
wire   [26:0] select_ln3376_fu_1484_p3;
wire   [26:0] x_ratio_fu_1491_p2;
wire   [23:0] grp_fu_1279_p2;
wire   [23:0] trunc_ln3377_fu_1501_p1;
wire   [23:0] sub_ln3377_fu_1505_p2;
wire   [23:0] select_ln3377_fu_1511_p3;
wire   [31:0] zext_ln3380_fu_1530_p1;
wire   [0:0] slt_fu_1534_p2;
wire   [31:0] zext_ln3380_1_fu_1589_p1;
wire   [0:0] slt62_fu_1592_p2;
wire   [0:0] rev63_fu_1597_p2;
wire   [0:0] icmp_ln3383_fu_1612_p2;
wire   [0:0] xor_ln3383_fu_1617_p2;
wire   [0:0] select_ln3380_2_fu_1603_p3;
wire  signed [23:0] grp_fu_2222_p2;
wire   [15:0] tmp_28_fu_1638_p3;
wire   [13:0] tmp_30_fu_1649_p3;
wire   [16:0] zext_ln3384_2_fu_1645_p1;
wire   [16:0] zext_ln3384_3_fu_1656_p1;
wire  signed [31:0] grp_fu_2228_p2;
wire   [15:0] trunc_ln1_fu_1666_p4;
wire   [16:0] add_ln3384_1_fu_1660_p2;
wire  signed [16:0] sext_ln3384_fu_1675_p1;
wire   [16:0] add_ln3384_3_fu_1679_p2;
wire   [15:0] tmp_26_fu_1690_p3;
wire   [13:0] tmp_27_fu_1701_p3;
wire   [16:0] zext_ln3384_fu_1697_p1;
wire   [16:0] zext_ln3384_1_fu_1708_p1;
wire   [16:0] add_ln3384_fu_1712_p2;
wire   [16:0] zext_ln3384_4_fu_1718_p1;
wire   [16:0] add_ln3384_2_fu_1721_p2;
wire   [0:0] p_Result_s_fu_1737_p3;
wire   [31:0] result_V_fu_1732_p2;
wire   [1:0] empty_80_fu_1766_p1;
wire   [4:0] grp_fu_795_p4;
wire   [8:0] and_ln_fu_1776_p3;
wire   [1:0] grp_fu_806_p4;
wire   [63:0] zext_ln2871_fu_1784_p1;
wire   [5:0] and_ln2871_1_fu_1788_p3;
wire   [63:0] zext_ln2871_2_fu_1806_p1;
wire   [63:0] add_ln2871_fu_1796_p2;
wire   [1:0] tmp_35_fu_1826_p4;
wire   [5:0] and_ln2872_1_fu_1836_p3;
wire   [63:0] zext_ln2872_2_fu_1849_p1;
wire   [127:0] or_ln_fu_1859_p3;
wire   [8:0] shl_ln2871_2_fu_1871_p3;
wire   [511:0] zext_ln2871_1_fu_1867_p1;
wire   [511:0] zext_ln2871_3_fu_1878_p1;
wire   [8:0] and_ln1_fu_1913_p3;
wire   [63:0] zext_ln2872_fu_1921_p1;
wire   [127:0] or_ln1_fu_1905_p3;
wire   [8:0] shl_ln2872_2_fu_1934_p3;
wire   [511:0] zext_ln2872_1_fu_1930_p1;
wire   [511:0] zext_ln2872_3_fu_1941_p1;
wire   [63:0] add_ln2872_fu_1925_p2;
wire   [127:0] select_ln2871_fu_1898_p3;
wire   [127:0] select_ln2872_fu_1961_p3;
wire   [8:0] and_ln2_fu_2006_p3;
wire   [63:0] zext_ln2873_fu_2014_p1;
wire   [5:0] and_ln2873_1_fu_2018_p3;
wire   [5:0] add_ln2873_1_fu_2034_p2;
wire   [63:0] zext_ln2873_2_fu_2039_p1;
wire   [8:0] shl_ln2873_2_fu_2049_p3;
wire   [511:0] zext_ln2873_1_fu_2031_p1;
wire   [511:0] zext_ln2873_3_fu_2057_p1;
wire   [63:0] add_ln2873_fu_2026_p2;
wire   [127:0] select_ln2873_fu_2077_p3;
wire   [8:0] and_ln3_fu_2116_p3;
wire   [63:0] zext_ln2874_fu_2124_p1;
wire   [127:0] or_ln3_fu_2109_p3;
wire   [5:0] and_ln2874_1_fu_2128_p3;
wire   [5:0] add_ln2874_1_fu_2145_p2;
wire   [63:0] zext_ln2874_2_fu_2150_p1;
wire   [8:0] shl_ln2874_2_fu_2160_p3;
wire   [511:0] zext_ln2874_1_fu_2141_p1;
wire   [511:0] zext_ln2874_3_fu_2168_p1;
wire   [63:0] add_ln2874_fu_2136_p2;
wire   [63:0] tmp_40_fu_2188_p4;
wire   [95:0] tmp_41_fu_2198_p3;
wire   [7:0] grp_fu_2222_p0;
wire   [8:0] grp_fu_2228_p0;
wire  signed [26:0] grp_fu_2228_p1;
reg    grp_fu_758_ce;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state129;
reg    grp_fu_777_ce;
reg    grp_fu_780_ce;
reg   [4:0] grp_fu_780_opcode;
reg    grp_fu_785_ce;
reg   [4:0] grp_fu_785_opcode;
reg    grp_fu_791_ce;
reg    grp_fu_1274_ap_start;
wire    grp_fu_1274_ap_done;
reg    grp_fu_1279_ap_start;
wire    grp_fu_1279_ap_done;
wire    ap_CS_fsm_state205;
reg   [127:0] ap_NS_fsm;
reg    ap_block_pp2_stage0_subdone;
reg    ap_block_pp2_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [23:0] grp_fu_2222_p00;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 128'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 grp_processImage_fu_698_ap_start_reg = 1'b0;
end

face_detect_Data #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
Data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Data_address0),
    .ce0(Data_ce0),
    .we0(Data_we0),
    .d0(Data_d0),
    .q0(Data_q0)
);

face_detect_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_return(res_size_Scale_0_reg_597),
    .inData(inData),
    .result_x(result_x),
    .result_y(result_y),
    .result_w(result_w),
    .result_h(result_h)
);

face_detect_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(sext_ln2817_fu_827_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1200),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

face_detect_result_x_Scale #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
result_x_Scale_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_x_Scale_address0),
    .ce0(result_x_Scale_ce0),
    .we0(result_x_Scale_we0),
    .d0(grp_processImage_fu_698_AllCandidates_x_d0),
    .q0(result_x_Scale_q0)
);

face_detect_result_x_Scale #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
result_y_Scale_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_y_Scale_address0),
    .ce0(result_y_Scale_ce0),
    .we0(result_y_Scale_we0),
    .d0(grp_processImage_fu_698_AllCandidates_y_d0),
    .q0(result_y_Scale_q0)
);

face_detect_result_x_Scale #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
result_w_Scale_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_w_Scale_address0),
    .ce0(result_w_Scale_ce0),
    .we0(result_w_Scale_we0),
    .d0(grp_processImage_fu_698_AllCandidates_w_d0),
    .q0(result_w_Scale_q0)
);

face_detect_result_x_Scale #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
result_h_Scale_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_h_Scale_address0),
    .ce0(result_h_Scale_ce0),
    .we0(result_h_Scale_we0),
    .d0(grp_processImage_fu_698_AllCandidates_h_d0),
    .q0(result_h_Scale_q0)
);

face_detect_IMG1_data #(
    .DataWidth( 8 ),
    .AddressRange( 76800 ),
    .AddressWidth( 17 ))
IMG1_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(IMG1_data_address0),
    .ce0(IMG1_data_ce0),
    .we0(IMG1_data_we0),
    .d0(Data_q0),
    .q0(IMG1_data_q0)
);

face_detect_processImage grp_processImage_fu_698(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_processImage_fu_698_ap_start),
    .ap_done(grp_processImage_fu_698_ap_done),
    .ap_idle(grp_processImage_fu_698_ap_idle),
    .ap_ready(grp_processImage_fu_698_ap_ready),
    .factor(factor_reg_585),
    .sum_row(result_V_21_reg_2437),
    .sum_col(result_V_20_reg_2431),
    .AllCandidates_x_address0(grp_processImage_fu_698_AllCandidates_x_address0),
    .AllCandidates_x_ce0(grp_processImage_fu_698_AllCandidates_x_ce0),
    .AllCandidates_x_we0(grp_processImage_fu_698_AllCandidates_x_we0),
    .AllCandidates_x_d0(grp_processImage_fu_698_AllCandidates_x_d0),
    .AllCandidates_y_address0(grp_processImage_fu_698_AllCandidates_y_address0),
    .AllCandidates_y_ce0(grp_processImage_fu_698_AllCandidates_y_ce0),
    .AllCandidates_y_we0(grp_processImage_fu_698_AllCandidates_y_we0),
    .AllCandidates_y_d0(grp_processImage_fu_698_AllCandidates_y_d0),
    .AllCandidates_w_address0(grp_processImage_fu_698_AllCandidates_w_address0),
    .AllCandidates_w_ce0(grp_processImage_fu_698_AllCandidates_w_ce0),
    .AllCandidates_w_we0(grp_processImage_fu_698_AllCandidates_w_we0),
    .AllCandidates_w_d0(grp_processImage_fu_698_AllCandidates_w_d0),
    .AllCandidates_h_address0(grp_processImage_fu_698_AllCandidates_h_address0),
    .AllCandidates_h_ce0(grp_processImage_fu_698_AllCandidates_h_ce0),
    .AllCandidates_h_we0(grp_processImage_fu_698_AllCandidates_h_we0),
    .AllCandidates_h_d0(grp_processImage_fu_698_AllCandidates_h_d0),
    .AllCandidates_size_read(res_size_Scale_0_reg_597),
    .IMG1_data_address0(grp_processImage_fu_698_IMG1_data_address0),
    .IMG1_data_ce0(grp_processImage_fu_698_IMG1_data_ce0),
    .IMG1_data_q0(IMG1_data_q0),
    .winSize_width(result_V_19_reg_2521),
    .ap_return(grp_processImage_fu_698_ap_return),
    .grp_fu_777_p_din0(grp_processImage_fu_698_grp_fu_777_p_din0),
    .grp_fu_777_p_dout0(grp_processImage_fu_698_grp_fu_777_p_dout0),
    .grp_fu_777_p_ce(grp_processImage_fu_698_grp_fu_777_p_ce),
    .grp_fu_780_p_din0(grp_processImage_fu_698_grp_fu_780_p_din0),
    .grp_fu_780_p_din1(grp_processImage_fu_698_grp_fu_780_p_din1),
    .grp_fu_780_p_opcode(grp_processImage_fu_698_grp_fu_780_p_opcode),
    .grp_fu_780_p_dout0(grp_processImage_fu_698_grp_fu_780_p_dout0),
    .grp_fu_780_p_ce(grp_processImage_fu_698_grp_fu_780_p_ce),
    .grp_fu_785_p_din0(grp_processImage_fu_698_grp_fu_785_p_din0),
    .grp_fu_785_p_din1(grp_processImage_fu_698_grp_fu_785_p_din1),
    .grp_fu_785_p_opcode(grp_processImage_fu_698_grp_fu_785_p_opcode),
    .grp_fu_785_p_dout0(grp_processImage_fu_698_grp_fu_785_p_dout0),
    .grp_fu_785_p_ce(grp_processImage_fu_698_grp_fu_785_p_ce),
    .grp_fu_791_p_din0(grp_processImage_fu_698_grp_fu_791_p_din0),
    .grp_fu_791_p_din1(grp_processImage_fu_698_grp_fu_791_p_din1),
    .grp_fu_791_p_opcode(grp_processImage_fu_698_grp_fu_791_p_opcode),
    .grp_fu_791_p_dout0(grp_processImage_fu_698_grp_fu_791_p_dout0),
    .grp_fu_791_p_ce(grp_processImage_fu_698_grp_fu_791_p_ce)
);

face_detect_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U193(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(factor_reg_585),
    .din1(grp_fu_758_p1),
    .ce(grp_fu_758_ce),
    .dout(grp_fu_758_p2)
);

face_detect_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U194(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1134559232),
    .din1(factor_reg_585),
    .ce(1'b1),
    .dout(grp_fu_765_p2)
);

face_detect_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U195(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1131413504),
    .din1(factor_reg_585),
    .ce(1'b1),
    .dout(grp_fu_771_p2)
);

face_detect_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U196(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_777_p0),
    .ce(grp_fu_777_ce),
    .dout(grp_fu_777_p1)
);

face_detect_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U197(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_780_p0),
    .din1(grp_fu_780_p1),
    .ce(grp_fu_780_ce),
    .opcode(grp_fu_780_opcode),
    .dout(grp_fu_780_p2)
);

face_detect_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U198(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_785_p0),
    .din1(grp_fu_785_p1),
    .ce(grp_fu_785_ce),
    .opcode(grp_fu_785_opcode),
    .dout(grp_fu_785_p2)
);

face_detect_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U199(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_791_p0),
    .din1(grp_fu_791_p1),
    .ce(grp_fu_791_ce),
    .dout(grp_fu_791_p2)
);

face_detect_sdiv_27ns_32ns_26_31_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 26 ))
sdiv_27ns_32ns_26_31_seq_1_U200(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1274_ap_start),
    .done(grp_fu_1274_ap_done),
    .din0(grp_fu_1274_p0),
    .din1(val_2_reg_2348),
    .ce(1'b1),
    .dout(grp_fu_1274_p2)
);

face_detect_sdiv_26ns_32ns_24_30_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 24 ))
sdiv_26ns_32ns_24_30_seq_1_U201(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1279_ap_start),
    .done(grp_fu_1279_ap_done),
    .din0(grp_fu_1279_p0),
    .din1(val_3_reg_2381),
    .ce(1'b1),
    .dout(grp_fu_1279_p2)
);

face_detect_mul_mul_8ns_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mul_mul_8ns_24s_24_4_1_U202(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2222_p0),
    .din1(y_ratio_reg_2449),
    .ce(1'b1),
    .dout(grp_fu_2222_p2)
);

face_detect_mul_mul_9ns_27s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 32 ))
mul_mul_9ns_27s_32_4_1_U203(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2228_p0),
    .din1(grp_fu_2228_p1),
    .ce(1'b1),
    .dout(grp_fu_2228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state205)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state72))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state72)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state72);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state121))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state120)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state121)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state121);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state120)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3) & (1'b1 == ap_condition_pp2_exit_iter0_state134))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state134)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state134);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp2_iter17 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end else if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
            ap_enable_reg_pp2_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processImage_fu_698_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state127)) begin
            grp_processImage_fu_698_ap_start_reg <= 1'b1;
        end else if ((grp_processImage_fu_698_ap_ready == 1'b1)) begin
            grp_processImage_fu_698_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        factor_reg_585 <= 32'd1067030938;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        factor_reg_585 <= grp_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_reg_2464 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_1_reg_620 <= select_ln3380_1_reg_2484;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        i_1_reg_620 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        i_2_reg_642 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_642 <= add_ln2870_reg_2662;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2817_reg_2274_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_541 <= select_ln2817_2_reg_2298;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_reg_541 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_fu_1545_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten16_reg_609 <= add_ln3380_1_fu_1524_p2;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        indvar_flatten16_reg_609 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2817_fu_843_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_530 <= add_ln2817_1_fu_837_p2;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        indvar_flatten_reg_530 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_fu_1545_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_2_reg_631 <= add_ln3381_fu_1583_p2;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        j_2_reg_631 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2817_fu_843_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_553 <= add_ln2818_fu_873_p2;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        j_reg_553 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        phi_ln2871_reg_654 <= 96'd0;
    end else if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        phi_ln2871_reg_654 <= phitmp_cast_reg_2626;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        phi_ln2872_reg_665 <= 96'd0;
    end else if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        phi_ln2872_reg_665 <= phitmp1_cast_reg_2631;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        phi_ln2873_reg_676 <= 96'd0;
    end else if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        phi_ln2873_reg_676 <= phitmp2_cast_reg_2657;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        phi_ln2874_reg_687 <= 96'd0;
    end else if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        phi_ln2874_reg_687 <= select_ln2874_reg_2688;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        res_size_Scale_0_reg_597 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        res_size_Scale_0_reg_597 <= res_size_Scale_reg_2526;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2817_reg_2274_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg76_reg_564 <= {{ap_phi_mux_empty_75_phi_fu_579_p4[511:8]}};
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        shiftreg76_reg_564 <= 504'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        add_ln2870_reg_2662 <= add_ln2870_fu_2093_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2871_fu_1770_p2 == 1'd1) & (icmp_ln2870_fu_1752_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln2871_1_reg_2553 <= add_ln2871_1_fu_1801_p2;
        add_ln2872_1_reg_2573 <= add_ln2872_1_fu_1844_p2;
        shl_ln2871_reg_2558 <= shl_ln2871_fu_1810_p2;
        shl_ln2872_reg_2578 <= shl_ln2872_fu_1853_p2;
        trunc_ln2_reg_2563 <= {{add_ln2871_fu_1796_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_fu_1545_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln3380_reg_2468 <= add_ln3380_fu_1551_p2;
        icmp_ln3381_reg_2473 <= icmp_ln3381_fu_1557_p2;
        select_ln3380_reg_2478 <= select_ln3380_fu_1563_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        conv_i_reg_2405 <= grp_fu_777_p1;
        select_ln2776_reg_2410[63] <= select_ln2776_fu_1323_p3[63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        data_V_reg_2420 <= data_V_fu_1331_p1;
        result_V_20_reg_2431 <= result_V_20_fu_1453_p3;
        result_V_21_reg_2437 <= result_V_21_fu_1464_p3;
        sext_ln3376_1_reg_2444 <= sext_ln3376_1_fu_1497_p1;
        val_reg_2425 <= val_fu_1440_p3;
        y_ratio_reg_2449 <= y_ratio_fu_1518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        dc_2_reg_2315 <= grp_fu_765_p2;
        dc_3_reg_2321 <= grp_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        dc_reg_2415 <= grp_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op320_read_state73 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_2305 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        icmp_ln2776_4_reg_2400 <= icmp_ln2776_4_fu_1307_p2;
        icmp_ln2776_reg_2395 <= icmp_ln2776_fu_1301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2817_reg_2274 <= icmp_ln2817_fu_843_p2;
        icmp_ln2817_reg_2274_pp0_iter1_reg <= icmp_ln2817_reg_2274;
        icmp_ln2818_reg_2278_pp0_iter1_reg <= icmp_ln2818_reg_2278;
        icmp_ln2820_reg_2289_pp0_iter1_reg <= icmp_ln2820_reg_2289;
        select_ln2817_reg_2284_pp0_iter1_reg <= select_ln2817_reg_2284;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2817_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2818_reg_2278 <= icmp_ln2818_fu_849_p2;
        icmp_ln2820_reg_2289 <= icmp_ln2820_fu_867_p2;
        select_ln2817_reg_2284 <= select_ln2817_fu_855_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln2870_reg_2536 <= icmp_ln2870_fu_1752_p2;
        icmp_ln2870_reg_2536_pp2_iter1_reg <= icmp_ln2870_reg_2536;
        icmp_ln2871_reg_2545_pp2_iter10_reg <= icmp_ln2871_reg_2545_pp2_iter9_reg;
        icmp_ln2871_reg_2545_pp2_iter11_reg <= icmp_ln2871_reg_2545_pp2_iter10_reg;
        icmp_ln2871_reg_2545_pp2_iter12_reg <= icmp_ln2871_reg_2545_pp2_iter11_reg;
        icmp_ln2871_reg_2545_pp2_iter13_reg <= icmp_ln2871_reg_2545_pp2_iter12_reg;
        icmp_ln2871_reg_2545_pp2_iter14_reg <= icmp_ln2871_reg_2545_pp2_iter13_reg;
        icmp_ln2871_reg_2545_pp2_iter15_reg <= icmp_ln2871_reg_2545_pp2_iter14_reg;
        icmp_ln2871_reg_2545_pp2_iter16_reg <= icmp_ln2871_reg_2545_pp2_iter15_reg;
        icmp_ln2871_reg_2545_pp2_iter17_reg <= icmp_ln2871_reg_2545_pp2_iter16_reg;
        icmp_ln2871_reg_2545_pp2_iter18_reg <= icmp_ln2871_reg_2545_pp2_iter17_reg;
        icmp_ln2871_reg_2545_pp2_iter1_reg <= icmp_ln2871_reg_2545;
        icmp_ln2871_reg_2545_pp2_iter2_reg <= icmp_ln2871_reg_2545_pp2_iter1_reg;
        icmp_ln2871_reg_2545_pp2_iter3_reg <= icmp_ln2871_reg_2545_pp2_iter2_reg;
        icmp_ln2871_reg_2545_pp2_iter4_reg <= icmp_ln2871_reg_2545_pp2_iter3_reg;
        icmp_ln2871_reg_2545_pp2_iter5_reg <= icmp_ln2871_reg_2545_pp2_iter4_reg;
        icmp_ln2871_reg_2545_pp2_iter6_reg <= icmp_ln2871_reg_2545_pp2_iter5_reg;
        icmp_ln2871_reg_2545_pp2_iter7_reg <= icmp_ln2871_reg_2545_pp2_iter6_reg;
        icmp_ln2871_reg_2545_pp2_iter8_reg <= icmp_ln2871_reg_2545_pp2_iter7_reg;
        icmp_ln2871_reg_2545_pp2_iter9_reg <= icmp_ln2871_reg_2545_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2870_fu_1752_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln2871_reg_2545 <= icmp_ln2871_fu_1770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln3380_reg_2464 <= icmp_ln3380_fu_1545_p2;
        icmp_ln3380_reg_2464_pp1_iter1_reg <= icmp_ln3380_reg_2464;
        rev61_reg_2459 <= rev61_fu_1539_p2;
        select_ln3380_1_reg_2484_pp1_iter1_reg <= select_ln3380_1_reg_2484;
        select_ln3380_reg_2478_pp1_iter1_reg <= select_ln3380_reg_2478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln3380_reg_2464_pp1_iter2_reg <= icmp_ln3380_reg_2464_pp1_iter1_reg;
        or_ln3383_reg_2506_pp1_iter2_reg <= or_ln3383_reg_2506;
        or_ln3383_reg_2506_pp1_iter3_reg <= or_ln3383_reg_2506_pp1_iter2_reg;
        or_ln3383_reg_2506_pp1_iter4_reg <= or_ln3383_reg_2506_pp1_iter3_reg;
        select_ln3380_1_reg_2484_pp1_iter2_reg <= select_ln3380_1_reg_2484_pp1_iter1_reg;
        select_ln3380_1_reg_2484_pp1_iter3_reg <= select_ln3380_1_reg_2484_pp1_iter2_reg;
        select_ln3380_1_reg_2484_pp1_iter4_reg <= select_ln3380_1_reg_2484_pp1_iter3_reg;
        select_ln3380_reg_2478_pp1_iter2_reg <= select_ln3380_reg_2478_pp1_iter1_reg;
        select_ln3380_reg_2478_pp1_iter3_reg <= select_ln3380_reg_2478_pp1_iter2_reg;
        select_ln3380_reg_2478_pp1_iter4_reg <= select_ln3380_reg_2478_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_reg_2464_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        idxprom_i_mid2_v_reg_2510 <= {{grp_fu_2222_p2[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        or_ln2_reg_2614 <= or_ln2_fu_1968_p3;
        result_h_Scale_load_reg_2620 <= result_h_Scale_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_reg_2464 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        or_ln3383_reg_2506 <= or_ln3383_fu_1623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        p_Result_2_reg_2342 <= data_V_2_fu_961_p1[32'd31];
        p_Result_3_reg_2355 <= data_V_3_fu_1002_p1[32'd31];
        val_2_reg_2348 <= val_2_fu_1149_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        phitmp1_cast_reg_2631 <= {{select_ln2872_fu_1961_p3[127:32]}};
        phitmp_cast_reg_2626 <= {{select_ln2871_fu_1898_p3[127:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        phitmp2_cast_reg_2657 <= {{select_ln2873_fu_2077_p3[127:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        res_size_Scale_reg_2526 <= grp_processImage_fu_698_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        result_V_19_reg_2521 <= result_V_19_fu_1744_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        result_h_read_reg_2234 <= result_h;
        result_w_read_reg_2240 <= result_w;
        result_x_read_reg_2252 <= result_x;
        result_y_read_reg_2246 <= result_y;
        trunc_ln_reg_2258 <= {{inData[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2817_reg_2274 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln2817_2_reg_2298 <= select_ln2817_2_fu_885_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        select_ln2874_reg_2688 <= select_ln2874_fu_2205_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3380_fu_1545_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln3380_1_reg_2484 <= select_ln3380_1_fu_1571_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        shl_ln2871_1_reg_2593 <= shl_ln2871_1_fu_1882_p2;
        shl_ln2872_1_reg_2604 <= shl_ln2872_1_fu_1945_p2;
        trunc_ln3_reg_2609 <= {{add_ln2872_fu_1925_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        shl_ln2873_1_reg_2647 <= shl_ln2873_1_fu_2061_p2;
        shl_ln2873_reg_2642 <= shl_ln2873_fu_2043_p2;
        trunc_ln4_reg_2652 <= {{add_ln2873_fu_2026_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        shl_ln2874_1_reg_2678 <= shl_ln2874_1_fu_2172_p2;
        shl_ln2874_reg_2673 <= shl_ln2874_fu_2154_p2;
        trunc_ln5_reg_2683 <= {{add_ln2874_fu_2136_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_46_reg_2327 <= {{data_V_3_fu_1002_p1[30:23]}};
        tmp_47_reg_2333 <= tmp_47_fu_1015_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
        trunc_ln2871_reg_2361 <= trunc_ln2871_fu_1165_p1;
        trunc_ln2872_reg_2366 <= trunc_ln2872_fu_1168_p1;
        trunc_ln2873_reg_2371 <= trunc_ln2873_fu_1171_p1;
        trunc_ln2874_reg_2376 <= trunc_ln2874_fu_1174_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        val_3_reg_2381 <= val_3_fu_1266_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        value_assign_reg_2388 <= grp_fu_758_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        Data_address0 = zext_ln3384_6_fu_1685_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        Data_address0 = zext_ln2820_3_fu_941_p1;
    end else begin
        Data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2817_reg_2274_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Data_we0 = 1'b1;
    end else begin
        Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        IMG1_data_address0 = zext_ln3384_5_fu_1727_p1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        IMG1_data_address0 = grp_processImage_fu_698_IMG1_data_address0;
    end else begin
        IMG1_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        IMG1_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        IMG1_data_ce0 = grp_processImage_fu_698_IMG1_data_ce0;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln3383_reg_2506_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2817_fu_843_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state72 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state72 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln3380_fu_1545_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state121 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state121 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2870_reg_2536 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state134 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state134 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state205)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2817_reg_2274_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln2820_reg_2289_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_75_phi_fu_579_p4 = zext_ln2818_fu_927_p1;
        end else if ((icmp_ln2820_reg_2289_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_75_phi_fu_579_p4 = gmem_addr_read_reg_2305;
        end else begin
            ap_phi_mux_empty_75_phi_fu_579_p4 = ap_phi_reg_pp0_iter2_empty_75_reg_576;
        end
    end else begin
        ap_phi_mux_empty_75_phi_fu_579_p4 = ap_phi_reg_pp0_iter2_empty_75_reg_576;
    end
end

always @ (*) begin
    if (((icmp_ln3380_reg_2464 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_1_phi_fu_624_p4 = select_ln3380_1_reg_2484;
    end else begin
        ap_phi_mux_i_1_phi_fu_624_p4 = i_1_reg_620;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2870_reg_2536 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_2_phi_fu_646_p4 = add_ln2870_reg_2662;
    end else begin
        ap_phi_mux_i_2_phi_fu_646_p4 = i_2_reg_642;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2817_reg_2274_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_545_p4 = select_ln2817_2_reg_2298;
    end else begin
        ap_phi_mux_i_phi_fu_545_p4 = i_reg_541;
    end
end

always @ (*) begin
    if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_phi_mux_phi_ln2871_phi_fu_658_p4 = phitmp_cast_reg_2626;
    end else begin
        ap_phi_mux_phi_ln2871_phi_fu_658_p4 = phi_ln2871_reg_654;
    end
end

always @ (*) begin
    if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_phi_mux_phi_ln2872_phi_fu_669_p4 = phitmp1_cast_reg_2631;
    end else begin
        ap_phi_mux_phi_ln2872_phi_fu_669_p4 = phi_ln2872_reg_665;
    end
end

always @ (*) begin
    if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_phi_mux_phi_ln2873_phi_fu_680_p4 = phitmp2_cast_reg_2657;
    end else begin
        ap_phi_mux_phi_ln2873_phi_fu_680_p4 = phi_ln2873_reg_676;
    end
end

always @ (*) begin
    if (((icmp_ln2870_reg_2536_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        ap_phi_mux_phi_ln2874_phi_fu_691_p4 = select_ln2874_reg_2688;
    end else begin
        ap_phi_mux_phi_ln2874_phi_fu_691_p4 = phi_ln2874_reg_687;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state205)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_AWADDR = sext_ln2874_fu_2212_p1;
    end else if (((ap_predicate_op710_writereq_state134 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        gmem_AWADDR = sext_ln2873_fu_2099_p1;
    end else if (((ap_predicate_op685_writereq_state133 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        gmem_AWADDR = sext_ln2872_fu_1996_p1;
    end else if (((ap_predicate_op663_writereq_state132 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        gmem_AWADDR = sext_ln2871_fu_1888_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op710_writereq_state134 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_predicate_op685_writereq_state133 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((ap_predicate_op663_writereq_state132 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1) & (ap_enable_reg_pp2_iter18 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter18 == 1'b1) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op320_read_state73 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2871_reg_2545_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        gmem_WDATA = shl_ln2874_1_reg_2678;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_WDATA = shl_ln2873_1_reg_2647;
    end else if (((ap_predicate_op707_write_state134 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        gmem_WDATA = shl_ln2872_1_reg_2604;
    end else if (((ap_predicate_op682_write_state133 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        gmem_WDATA = shl_ln2871_1_reg_2593;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln2871_reg_2545_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        gmem_WSTRB = shl_ln2874_reg_2673;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_WSTRB = shl_ln2873_reg_2642;
    end else if (((ap_predicate_op707_write_state134 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        gmem_WSTRB = shl_ln2872_reg_2578;
    end else if (((ap_predicate_op682_write_state133 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        gmem_WSTRB = shl_ln2871_reg_2558;
    end else begin
        gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op707_write_state134 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_predicate_op682_write_state133 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln2871_reg_2545_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1) & (ap_enable_reg_pp2_iter18 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter18 == 1'b1) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln2820_reg_2289 == 1'd1) & (icmp_ln2817_reg_2274 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2871_reg_2545_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln2871_reg_2545 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_1274_ap_start = 1'b1;
    end else begin
        grp_fu_1274_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_1279_ap_start = 1'b1;
    end else begin
        grp_fu_1279_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | ((1'b1 == ap_CS_fsm_state128) & (grp_processImage_fu_698_ap_done == 1'b1)))) begin
        grp_fu_758_ce = 1'b1;
    end else begin
        grp_fu_758_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_758_p1 = 32'd1067030938;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_758_p1 = 32'd1103101952;
    end else begin
        grp_fu_758_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_777_ce = grp_processImage_fu_698_grp_fu_777_p_ce;
    end else begin
        grp_fu_777_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_777_p0 = grp_processImage_fu_698_grp_fu_777_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_777_p0 = value_assign_reg_2388;
    end else begin
        grp_fu_777_p0 = value_assign_reg_2388;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_780_ce = grp_processImage_fu_698_grp_fu_780_p_ce;
    end else begin
        grp_fu_780_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_780_opcode = grp_processImage_fu_698_grp_fu_780_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_780_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_780_opcode = 5'd2;
    end else begin
        grp_fu_780_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_780_p0 = grp_processImage_fu_698_grp_fu_780_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_780_p0 = value_assign_reg_2388;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_780_p0 = dc_2_reg_2315;
    end else begin
        grp_fu_780_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_780_p1 = grp_processImage_fu_698_grp_fu_780_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_780_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_780_p1 = 32'd1103626240;
    end else begin
        grp_fu_780_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_785_ce = grp_processImage_fu_698_grp_fu_785_p_ce;
    end else begin
        grp_fu_785_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_785_opcode = grp_processImage_fu_698_grp_fu_785_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_785_opcode = 5'd2;
    end else begin
        grp_fu_785_opcode = 5'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_785_p0 = grp_processImage_fu_698_grp_fu_785_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_785_p0 = dc_3_reg_2321;
    end else begin
        grp_fu_785_p0 = dc_3_reg_2321;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_785_p1 = grp_processImage_fu_698_grp_fu_785_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_785_p1 = 32'd1103626240;
    end else begin
        grp_fu_785_p1 = 32'd1103626240;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_791_ce = grp_processImage_fu_698_grp_fu_791_p_ce;
    end else begin
        grp_fu_791_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_791_p0 = grp_processImage_fu_698_grp_fu_791_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_791_p0 = conv_i_reg_2405;
    end else begin
        grp_fu_791_p0 = conv_i_reg_2405;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127))) begin
        grp_fu_791_p1 = grp_processImage_fu_698_grp_fu_791_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_791_p1 = select_ln2776_reg_2410;
    end else begin
        grp_fu_791_p1 = select_ln2776_reg_2410;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        grp_fu_795_p1 = i_2_reg_642;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_795_p1 = ap_phi_mux_i_2_phi_fu_646_p4;
    end else begin
        grp_fu_795_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        grp_fu_806_p1 = i_2_reg_642;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_806_p1 = ap_phi_mux_i_2_phi_fu_646_p4;
    end else begin
        grp_fu_806_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_h_Scale_address0 = i_2_cast6_fu_1758_p1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_h_Scale_address0 = grp_processImage_fu_698_AllCandidates_h_address0;
    end else begin
        result_h_Scale_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_h_Scale_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_h_Scale_ce0 = grp_processImage_fu_698_AllCandidates_h_ce0;
    end else begin
        result_h_Scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        result_h_Scale_we0 = grp_processImage_fu_698_AllCandidates_h_we0;
    end else begin
        result_h_Scale_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_w_Scale_address0 = i_2_cast6_fu_1758_p1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_w_Scale_address0 = grp_processImage_fu_698_AllCandidates_w_address0;
    end else begin
        result_w_Scale_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_w_Scale_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_w_Scale_ce0 = grp_processImage_fu_698_AllCandidates_w_ce0;
    end else begin
        result_w_Scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        result_w_Scale_we0 = grp_processImage_fu_698_AllCandidates_w_we0;
    end else begin
        result_w_Scale_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_x_Scale_address0 = i_2_cast6_fu_1758_p1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_x_Scale_address0 = grp_processImage_fu_698_AllCandidates_x_address0;
    end else begin
        result_x_Scale_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_x_Scale_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_x_Scale_ce0 = grp_processImage_fu_698_AllCandidates_x_ce0;
    end else begin
        result_x_Scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        result_x_Scale_we0 = grp_processImage_fu_698_AllCandidates_x_we0;
    end else begin
        result_x_Scale_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_y_Scale_address0 = i_2_cast6_fu_1758_p1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_y_Scale_address0 = grp_processImage_fu_698_AllCandidates_y_address0;
    end else begin
        result_y_Scale_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        result_y_Scale_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        result_y_Scale_ce0 = grp_processImage_fu_698_AllCandidates_y_ce0;
    end else begin
        result_y_Scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        result_y_Scale_we0 = grp_processImage_fu_698_AllCandidates_y_we0;
    end else begin
        result_y_Scale_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln2817_fu_843_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln2817_fu_843_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((1'd0 == and_ln2836_fu_1043_p2) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln3380_fu_1545_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln3380_fu_1545_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            if (((1'b1 == ap_CS_fsm_state128) & (grp_processImage_fu_698_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter18 == 1'b1) & (ap_enable_reg_pp2_iter17 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else if (((ap_enable_reg_pp2_iter18 == 1'b1) & (ap_enable_reg_pp2_iter17 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state205;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln2870_reg_2536 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_subdone)) & (1'b0 == ap_block_pp2_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln2870_reg_2536 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state205;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_d0 = ap_phi_mux_empty_75_phi_fu_579_p4[7:0];

assign add_ln2817_1_fu_837_p2 = (indvar_flatten_reg_530 + 17'd1);

assign add_ln2817_fu_879_p2 = (ap_phi_mux_i_phi_fu_545_p4 + 8'd1);

assign add_ln2818_fu_873_p2 = (select_ln2817_fu_855_p3 + 9'd1);

assign add_ln2820_1_fu_935_p2 = (add_ln2820_fu_921_p2 + zext_ln2820_2_fu_932_p1);

assign add_ln2820_fu_921_p2 = (zext_ln2820_fu_906_p1 + zext_ln2820_1_fu_917_p1);

assign add_ln2870_fu_2093_p2 = (i_2_reg_642 + 7'd1);

assign add_ln2871_1_fu_1801_p2 = (and_ln2871_1_fu_1788_p3 + trunc_ln2871_reg_2361);

assign add_ln2871_fu_1796_p2 = (zext_ln2871_fu_1784_p1 + result_x_read_reg_2252);

assign add_ln2872_1_fu_1844_p2 = (and_ln2872_1_fu_1836_p3 + trunc_ln2872_reg_2366);

assign add_ln2872_fu_1925_p2 = (zext_ln2872_fu_1921_p1 + result_y_read_reg_2246);

assign add_ln2873_1_fu_2034_p2 = (and_ln2873_1_fu_2018_p3 + trunc_ln2873_reg_2371);

assign add_ln2873_fu_2026_p2 = (zext_ln2873_fu_2014_p1 + result_w_read_reg_2240);

assign add_ln2874_1_fu_2145_p2 = (and_ln2874_1_fu_2128_p3 + trunc_ln2874_reg_2376);

assign add_ln2874_fu_2136_p2 = (zext_ln2874_fu_2124_p1 + result_h_read_reg_2234);

assign add_ln3380_1_fu_1524_p2 = (indvar_flatten16_reg_609 + 17'd1);

assign add_ln3380_fu_1551_p2 = (ap_phi_mux_i_1_phi_fu_624_p4 + 8'd1);

assign add_ln3381_fu_1583_p2 = (select_ln3380_fu_1563_p3 + 9'd1);

assign add_ln3384_1_fu_1660_p2 = (zext_ln3384_2_fu_1645_p1 + zext_ln3384_3_fu_1656_p1);

assign add_ln3384_2_fu_1721_p2 = (add_ln3384_fu_1712_p2 + zext_ln3384_4_fu_1718_p1);

assign add_ln3384_3_fu_1679_p2 = ($signed(add_ln3384_1_fu_1660_p2) + $signed(sext_ln3384_fu_1675_p1));

assign add_ln3384_fu_1712_p2 = (zext_ln3384_fu_1697_p1 + zext_ln3384_1_fu_1708_p1);

assign add_ln341_1_fu_1193_p2 = ($signed(zext_ln341_1_fu_1190_p1) + $signed(9'd385));

assign add_ln341_fu_1075_p2 = ($signed(zext_ln341_fu_1071_p1) + $signed(9'd385));

assign add_ln510_fu_1366_p2 = ($signed(zext_ln510_fu_1362_p1) + $signed(12'd3073));

assign and_ln1_fu_1913_p3 = {{grp_fu_795_p4}, {4'd0}};

assign and_ln2776_fu_1317_p2 = (or_ln2776_fu_1313_p2 & grp_fu_780_p2);

assign and_ln2836_1_fu_996_p2 = (or_ln2836_fu_990_p2 & grp_fu_780_p2);

assign and_ln2836_2_fu_1037_p2 = (or_ln2836_1_fu_1031_p2 & grp_fu_785_p2);

assign and_ln2836_fu_1043_p2 = (and_ln2836_2_fu_1037_p2 & and_ln2836_1_fu_996_p2);

assign and_ln2871_1_fu_1788_p3 = {{grp_fu_806_p4}, {4'd0}};

assign and_ln2872_1_fu_1836_p3 = {{tmp_35_fu_1826_p4}, {4'd0}};

assign and_ln2873_1_fu_2018_p3 = {{grp_fu_806_p4}, {4'd0}};

assign and_ln2874_1_fu_2128_p3 = {{grp_fu_806_p4}, {4'd0}};

assign and_ln2_fu_2006_p3 = {{grp_fu_795_p4}, {4'd0}};

assign and_ln3_fu_2116_p3 = {{grp_fu_795_p4}, {4'd0}};

assign and_ln_fu_1776_p3 = {{grp_fu_795_p4}, {4'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state205 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd88];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op320_read_state73 == 1'b1) & (gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op320_read_state73 == 1'b1) & (gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((gmem_BVALID == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b1) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b1) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state135_io)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b1) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state135_io)));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1) & (ap_enable_reg_pp2_iter18 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1) & (ap_enable_reg_pp2_iter18 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state136_io)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state132_io)));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1) & (ap_enable_reg_pp2_iter18 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state136_io)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state132_io)));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_01001 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage2_11001 = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state133_io)));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state133_io)));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_01001 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage3_11001 = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state134_io)));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = (((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1) & (ap_enable_reg_pp2_iter17 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state134_io)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state121_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state132_io = ((ap_predicate_op663_writereq_state132 == 1'b1) & (gmem_AWREADY == 1'b0));
end

assign ap_block_state132_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state133_io = (((ap_predicate_op685_writereq_state133 == 1'b1) & (gmem_AWREADY == 1'b0)) | ((ap_predicate_op682_write_state133 == 1'b1) & (gmem_WREADY == 1'b0)));
end

assign ap_block_state133_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state134_io = (((ap_predicate_op710_writereq_state134 == 1'b1) & (gmem_AWREADY == 1'b0)) | ((ap_predicate_op707_write_state134 == 1'b1) & (gmem_WREADY == 1'b0)));
end

assign ap_block_state134_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state135_io = (((gmem_AWREADY == 1'b0) & (icmp_ln2871_reg_2545 == 1'd1)) | ((gmem_WREADY == 1'b0) & (icmp_ln2871_reg_2545 == 1'd1)));
end

assign ap_block_state135_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state136_io = ((gmem_WREADY == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter1_reg == 1'd1));
end

assign ap_block_state136_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp2_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp2_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp2_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp2_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state147_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp2_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp2_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp2_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state154_pp2_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp2_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp2_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp2_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp2_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp2_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp2_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state165_pp2_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp2_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state168_pp2_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state169_pp2_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state170_pp2_stage3_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state171_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state172_pp2_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state173_pp2_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp2_stage3_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state176_pp2_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state177_pp2_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state178_pp2_stage3_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state179_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state180_pp2_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state181_pp2_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state182_pp2_stage3_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state183_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state184_pp2_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state185_pp2_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state186_pp2_stage3_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state187_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state188_pp2_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state189_pp2_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state190_pp2_stage3_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state191_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state192_pp2_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state193_pp2_stage2_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state194_pp2_stage3_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state195_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state196_pp2_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state197_pp2_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state198_pp2_stage3_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state199_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state200_pp2_stage1_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state201_pp2_stage2_iter17 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1));
end

always @ (*) begin
    ap_block_state202_pp2_stage3_iter17 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1));
end

always @ (*) begin
    ap_block_state203_pp2_stage0_iter18 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter17_reg == 1'd1));
end

always @ (*) begin
    ap_block_state204_pp2_stage1_iter18 = ((gmem_BVALID == 1'b0) & (icmp_ln2871_reg_2545_pp2_iter18_reg == 1'd1));
end

assign ap_block_state72_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter1 = ((ap_predicate_op320_read_state73 == 1'b1) & (gmem_RVALID == 1'b0));
end

assign ap_block_state74_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_75_reg_576 = 'bx;

always @ (*) begin
    ap_predicate_op320_read_state73 = ((icmp_ln2820_reg_2289 == 1'd1) & (icmp_ln2817_reg_2274 == 1'd0));
end

always @ (*) begin
    ap_predicate_op663_writereq_state132 = ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0));
end

always @ (*) begin
    ap_predicate_op682_write_state133 = ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0));
end

always @ (*) begin
    ap_predicate_op685_writereq_state133 = ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0));
end

always @ (*) begin
    ap_predicate_op707_write_state134 = ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0));
end

always @ (*) begin
    ap_predicate_op710_writereq_state134 = ((icmp_ln2871_reg_2545 == 1'd1) & (icmp_ln2870_reg_2536 == 1'd0));
end

assign bitcast_ln2776_fu_1284_p1 = value_assign_reg_2388;

assign data_V_2_fu_961_p1 = dc_2_reg_2315;

assign data_V_3_fu_1002_p1 = dc_3_reg_2321;

assign data_V_fu_1331_p1 = dc_reg_2415;

assign empty_80_fu_1766_p1 = ap_phi_mux_i_2_phi_fu_646_p4[1:0];

assign grp_fu_1274_p0 = 32'd20971520;

assign grp_fu_1279_p0 = 32'd15728640;

assign grp_fu_2222_p0 = grp_fu_2222_p00;

assign grp_fu_2222_p00 = select_ln3380_1_fu_1571_p3;

assign grp_fu_2228_p0 = zext_ln3381_fu_1609_p1;

assign grp_fu_2228_p1 = sext_ln3376_1_reg_2444;

assign grp_fu_795_p4 = {{grp_fu_795_p1[6:2]}};

assign grp_fu_806_p4 = {{grp_fu_806_p1[3:2]}};

assign grp_processImage_fu_698_ap_start = grp_processImage_fu_698_ap_start_reg;

assign grp_processImage_fu_698_grp_fu_777_p_dout0 = grp_fu_777_p1;

assign grp_processImage_fu_698_grp_fu_780_p_dout0 = grp_fu_780_p2;

assign grp_processImage_fu_698_grp_fu_785_p_dout0 = grp_fu_785_p2;

assign grp_processImage_fu_698_grp_fu_791_p_dout0 = grp_fu_791_p2;

assign i_2_cast6_fu_1758_p1 = ap_phi_mux_i_2_phi_fu_646_p4;

assign icmp_ln2776_4_fu_1307_p2 = ((trunc_ln2776_fu_1297_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln2776_fu_1301_p2 = ((tmp_20_fu_1287_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln2817_fu_843_p2 = ((indvar_flatten_reg_530 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln2818_fu_849_p2 = ((j_reg_553 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln2820_fu_867_p2 = ((trunc_ln2818_fu_863_p1 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln2836_1_fu_984_p2 = ((tmp_45_fu_974_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln2836_2_fu_1019_p2 = ((tmp_46_fu_1005_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln2836_3_fu_1025_p2 = ((tmp_47_fu_1015_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln2836_fu_978_p2 = ((tmp_44_fu_964_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln2870_fu_1752_p2 = ((ap_phi_mux_i_2_phi_fu_646_p4 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln2871_fu_1770_p2 = ((empty_80_fu_1766_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln3380_fu_1545_p2 = ((indvar_flatten16_reg_609 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln3381_fu_1557_p2 = ((j_2_reg_631 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln3383_fu_1612_p2 = (($signed(zext_ln3381_fu_1609_p1) < $signed(result_V_20_reg_2431)) ? 1'b1 : 1'b0);

assign isNeg_2_fu_1081_p3 = add_ln341_fu_1075_p2[32'd8];

assign isNeg_3_fu_1199_p3 = add_ln341_1_fu_1193_p2[32'd8];

assign isNeg_fu_1372_p3 = add_ln510_fu_1366_p2[32'd11];

assign mantissa_2_fu_1057_p4 = {{{{1'd1}, {tmp_45_fu_974_p1}}}, {1'd0}};

assign mantissa_3_fu_1177_p4 = {{{{1'd1}, {tmp_47_reg_2333}}}, {1'd0}};

assign mantissa_fu_1348_p4 = {{{{1'd1}, {tmp_43_fu_1344_p1}}}, {1'd0}};

assign or_ln1_fu_1905_p3 = {{result_y_Scale_q0}, {ap_phi_mux_phi_ln2872_phi_fu_669_p4}};

assign or_ln2776_fu_1313_p2 = (icmp_ln2776_reg_2395 | icmp_ln2776_4_reg_2400);

assign or_ln2836_1_fu_1031_p2 = (icmp_ln2836_3_fu_1025_p2 | icmp_ln2836_2_fu_1019_p2);

assign or_ln2836_fu_990_p2 = (icmp_ln2836_fu_978_p2 | icmp_ln2836_1_fu_984_p2);

assign or_ln2_fu_1968_p3 = {{result_w_Scale_q0}, {ap_phi_mux_phi_ln2873_phi_fu_680_p4}};

assign or_ln3383_fu_1623_p2 = (xor_ln3383_fu_1617_p2 | select_ln3380_2_fu_1603_p3);

assign or_ln3_fu_2109_p3 = {{result_h_Scale_load_reg_2620}, {ap_phi_mux_phi_ln2874_phi_fu_691_p4}};

assign or_ln_fu_1859_p3 = {{result_x_Scale_q0}, {ap_phi_mux_phi_ln2871_phi_fu_658_p4}};

assign p_Result_s_fu_1737_p3 = data_V_reg_2420[32'd63];

assign r_V_4_fu_1412_p2 = zext_ln15_fu_1358_p1 << sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1402_p1;

assign r_V_5_fu_1115_p2 = zext_ln15_2_fu_1067_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1111_p1;

assign r_V_6_fu_1121_p2 = zext_ln15_2_fu_1067_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1111_p1;

assign r_V_7_fu_1232_p2 = zext_ln15_3_fu_1186_p1 >> sh_prom_i_i_i_i_i38_cast_cast_cast_cast_fu_1228_p1;

assign r_V_8_fu_1238_p2 = zext_ln15_3_fu_1186_p1 << sh_prom_i_i_i_i_i38_cast_cast_cast_cast_fu_1228_p1;

assign r_V_fu_1406_p2 = zext_ln15_fu_1358_p1 >> sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1402_p1;

assign result_V_13_fu_1448_p2 = (32'd0 - val_2_reg_2348);

assign result_V_17_fu_1459_p2 = (32'd0 - val_3_reg_2381);

assign result_V_19_fu_1744_p3 = ((p_Result_s_fu_1737_p3[0:0] == 1'b1) ? result_V_fu_1732_p2 : val_reg_2425);

assign result_V_20_fu_1453_p3 = ((p_Result_2_reg_2342[0:0] == 1'b1) ? result_V_13_fu_1448_p2 : val_2_reg_2348);

assign result_V_21_fu_1464_p3 = ((p_Result_3_reg_2355[0:0] == 1'b1) ? result_V_17_fu_1459_p2 : val_3_reg_2381);

assign result_V_fu_1732_p2 = (32'd0 - val_reg_2425);

assign rev61_fu_1539_p2 = (slt_fu_1534_p2 ^ 1'd1);

assign rev63_fu_1597_p2 = (slt62_fu_1592_p2 ^ 1'd1);

assign select_ln2776_fu_1323_p3 = ((and_ln2776_fu_1317_p2[0:0] == 1'b1) ? 64'd4602678819172646912 : 64'd13826050856027422720);

assign select_ln2817_1_fu_892_p3 = ((icmp_ln2818_reg_2278_pp0_iter1_reg[0:0] == 1'b1) ? 504'd0 : shiftreg76_reg_564);

assign select_ln2817_2_fu_885_p3 = ((icmp_ln2818_reg_2278[0:0] == 1'b1) ? add_ln2817_fu_879_p2 : ap_phi_mux_i_phi_fu_545_p4);

assign select_ln2817_fu_855_p3 = ((icmp_ln2818_fu_849_p2[0:0] == 1'b1) ? 9'd0 : j_reg_553);

assign select_ln2871_fu_1898_p3 = ((icmp_ln2871_reg_2545[0:0] == 1'b1) ? 128'd0 : or_ln_fu_1859_p3);

assign select_ln2872_fu_1961_p3 = ((icmp_ln2871_reg_2545[0:0] == 1'b1) ? 128'd0 : or_ln1_fu_1905_p3);

assign select_ln2873_fu_2077_p3 = ((icmp_ln2871_reg_2545[0:0] == 1'b1) ? 128'd0 : or_ln2_reg_2614);

assign select_ln2874_fu_2205_p3 = ((icmp_ln2871_reg_2545[0:0] == 1'b1) ? 96'd0 : tmp_41_fu_2198_p3);

assign select_ln3376_fu_1484_p3 = ((p_Result_2_reg_2342[0:0] == 1'b1) ? sub_ln3376_fu_1478_p2 : sext_ln3376_fu_1474_p1);

assign select_ln3377_fu_1511_p3 = ((p_Result_3_reg_2355[0:0] == 1'b1) ? sub_ln3377_fu_1505_p2 : trunc_ln3377_fu_1501_p1);

assign select_ln3380_1_fu_1571_p3 = ((icmp_ln3381_fu_1557_p2[0:0] == 1'b1) ? add_ln3380_fu_1551_p2 : ap_phi_mux_i_1_phi_fu_624_p4);

assign select_ln3380_2_fu_1603_p3 = ((icmp_ln3381_reg_2473[0:0] == 1'b1) ? rev63_fu_1597_p2 : rev61_reg_2459);

assign select_ln3380_fu_1563_p3 = ((icmp_ln3381_fu_1557_p2[0:0] == 1'b1) ? 9'd0 : j_2_reg_631);

assign sext_ln1311_2_fu_1095_p1 = $signed(sub_ln1311_2_fu_1089_p2);

assign sext_ln1311_3_fu_1212_p1 = $signed(sub_ln1311_3_fu_1207_p2);

assign sext_ln1311_fu_1386_p1 = $signed(sub_ln1311_fu_1380_p2);

assign sext_ln2817_fu_827_p1 = $signed(trunc_ln_reg_2258);

assign sext_ln2871_fu_1888_p1 = $signed(trunc_ln2_reg_2563);

assign sext_ln2872_fu_1996_p1 = $signed(trunc_ln3_reg_2609);

assign sext_ln2873_fu_2099_p1 = $signed(trunc_ln4_reg_2652);

assign sext_ln2874_fu_2212_p1 = $signed(trunc_ln5_reg_2683);

assign sext_ln3376_1_fu_1497_p1 = $signed(x_ratio_fu_1491_p2);

assign sext_ln3376_fu_1474_p1 = $signed(trunc_ln3376_fu_1470_p1);

assign sext_ln3384_fu_1675_p1 = $signed(trunc_ln1_fu_1666_p4);

assign sh_prom_i_i_i_i_i38_cast_cast_cast_cast_fu_1228_p1 = $unsigned(sh_prom_i_i_i_i_i38_cast_cast_cast_fu_1224_p1);

assign sh_prom_i_i_i_i_i38_cast_cast_cast_fu_1224_p1 = $signed(ush_3_fu_1216_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1111_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1107_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_1107_p1 = $signed(ush_2_fu_1099_p3);

assign sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1402_p1 = $unsigned(sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1398_p1);

assign sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1398_p1 = $signed(ush_fu_1390_p3);

assign shl_ln2871_1_fu_1882_p2 = zext_ln2871_1_fu_1867_p1 << zext_ln2871_3_fu_1878_p1;

assign shl_ln2871_2_fu_1871_p3 = {{add_ln2871_1_reg_2553}, {3'd0}};

assign shl_ln2871_fu_1810_p2 = 64'd65535 << zext_ln2871_2_fu_1806_p1;

assign shl_ln2872_1_fu_1945_p2 = zext_ln2872_1_fu_1930_p1 << zext_ln2872_3_fu_1941_p1;

assign shl_ln2872_2_fu_1934_p3 = {{add_ln2872_1_reg_2573}, {3'd0}};

assign shl_ln2872_fu_1853_p2 = 64'd65535 << zext_ln2872_2_fu_1849_p1;

assign shl_ln2873_1_fu_2061_p2 = zext_ln2873_1_fu_2031_p1 << zext_ln2873_3_fu_2057_p1;

assign shl_ln2873_2_fu_2049_p3 = {{add_ln2873_1_fu_2034_p2}, {3'd0}};

assign shl_ln2873_fu_2043_p2 = 64'd65535 << zext_ln2873_2_fu_2039_p1;

assign shl_ln2874_1_fu_2172_p2 = zext_ln2874_1_fu_2141_p1 << zext_ln2874_3_fu_2168_p1;

assign shl_ln2874_2_fu_2160_p3 = {{add_ln2874_1_fu_2145_p2}, {3'd0}};

assign shl_ln2874_fu_2154_p2 = 64'd65535 << zext_ln2874_2_fu_2150_p1;

assign slt62_fu_1592_p2 = (($signed(zext_ln3380_1_fu_1589_p1) < $signed(result_V_21_reg_2437)) ? 1'b1 : 1'b0);

assign slt_fu_1534_p2 = (($signed(zext_ln3380_fu_1530_p1) < $signed(result_V_21_reg_2437)) ? 1'b1 : 1'b0);

assign sub_ln1311_2_fu_1089_p2 = (8'd127 - tmp_44_fu_964_p4);

assign sub_ln1311_3_fu_1207_p2 = (8'd127 - tmp_46_reg_2327);

assign sub_ln1311_fu_1380_p2 = (11'd1023 - tmp_42_fu_1334_p4);

assign sub_ln3376_fu_1478_p2 = ($signed(27'd0) - $signed(sext_ln3376_fu_1474_p1));

assign sub_ln3377_fu_1505_p2 = (24'd0 - trunc_ln3377_fu_1501_p1);

assign tmp_15_fu_910_p3 = {{select_ln2817_2_reg_2298}, {6'd0}};

assign tmp_20_fu_1287_p4 = {{bitcast_ln2776_fu_1284_p1[30:23]}};

assign tmp_23_fu_1430_p4 = {{r_V_4_fu_1412_p2[84:53]}};

assign tmp_24_fu_1139_p4 = {{r_V_6_fu_1121_p2[55:24]}};

assign tmp_25_fu_1256_p4 = {{r_V_8_fu_1238_p2[55:24]}};

assign tmp_26_fu_1690_p3 = {{select_ln3380_1_reg_2484_pp1_iter4_reg}, {8'd0}};

assign tmp_27_fu_1701_p3 = {{select_ln3380_1_reg_2484_pp1_iter4_reg}, {6'd0}};

assign tmp_28_fu_1638_p3 = {{idxprom_i_mid2_v_reg_2510}, {8'd0}};

assign tmp_29_fu_1127_p3 = r_V_5_fu_1115_p2[32'd24];

assign tmp_30_fu_1649_p3 = {{idxprom_i_mid2_v_reg_2510}, {6'd0}};

assign tmp_34_fu_1244_p3 = r_V_7_fu_1232_p2[32'd24];

assign tmp_35_fu_1826_p4 = {{ap_phi_mux_i_2_phi_fu_646_p4[3:2]}};

assign tmp_40_fu_2188_p4 = {{ap_phi_mux_phi_ln2874_phi_fu_691_p4[95:32]}};

assign tmp_41_fu_2198_p3 = {{result_h_Scale_load_reg_2620}, {tmp_40_fu_2188_p4}};

assign tmp_42_fu_1334_p4 = {{data_V_fu_1331_p1[62:52]}};

assign tmp_43_fu_1344_p1 = data_V_fu_1331_p1[51:0];

assign tmp_44_fu_964_p4 = {{data_V_2_fu_961_p1[30:23]}};

assign tmp_45_fu_974_p1 = data_V_2_fu_961_p1[22:0];

assign tmp_46_fu_1005_p4 = {{data_V_3_fu_1002_p1[30:23]}};

assign tmp_47_fu_1015_p1 = data_V_3_fu_1002_p1[22:0];

assign tmp_fu_1418_p3 = r_V_fu_1406_p2[32'd53];

assign tmp_s_fu_899_p3 = {{select_ln2817_2_reg_2298}, {8'd0}};

assign trunc_ln1_fu_1666_p4 = {{grp_fu_2228_p2[31:16]}};

assign trunc_ln2776_fu_1297_p1 = bitcast_ln2776_fu_1284_p1[22:0];

assign trunc_ln2818_fu_863_p1 = select_ln2817_fu_855_p3[5:0];

assign trunc_ln2871_fu_1165_p1 = result_x_read_reg_2252[5:0];

assign trunc_ln2872_fu_1168_p1 = result_y_read_reg_2246[5:0];

assign trunc_ln2873_fu_1171_p1 = result_w_read_reg_2240[5:0];

assign trunc_ln2874_fu_1174_p1 = result_h_read_reg_2234[5:0];

assign trunc_ln3376_fu_1470_p1 = grp_fu_1274_p2[25:0];

assign trunc_ln3377_fu_1501_p1 = grp_fu_1279_p2[23:0];

assign ush_2_fu_1099_p3 = ((isNeg_2_fu_1081_p3[0:0] == 1'b1) ? sext_ln1311_2_fu_1095_p1 : add_ln341_fu_1075_p2);

assign ush_3_fu_1216_p3 = ((isNeg_3_fu_1199_p3[0:0] == 1'b1) ? sext_ln1311_3_fu_1212_p1 : add_ln341_1_fu_1193_p2);

assign ush_fu_1390_p3 = ((isNeg_fu_1372_p3[0:0] == 1'b1) ? sext_ln1311_fu_1386_p1 : add_ln510_fu_1366_p2);

assign val_2_fu_1149_p3 = ((isNeg_2_fu_1081_p3[0:0] == 1'b1) ? zext_ln662_2_fu_1135_p1 : tmp_24_fu_1139_p4);

assign val_3_fu_1266_p3 = ((isNeg_3_fu_1199_p3[0:0] == 1'b1) ? zext_ln662_3_fu_1252_p1 : tmp_25_fu_1256_p4);

assign val_fu_1440_p3 = ((isNeg_fu_1372_p3[0:0] == 1'b1) ? zext_ln662_fu_1426_p1 : tmp_23_fu_1430_p4);

assign x_ratio_fu_1491_p2 = (select_ln3376_fu_1484_p3 + 27'd1);

assign xor_ln3383_fu_1617_p2 = (icmp_ln3383_fu_1612_p2 ^ 1'd1);

assign y_ratio_fu_1518_p2 = (select_ln3377_fu_1511_p3 + 24'd1);

assign zext_ln15_2_fu_1067_p1 = mantissa_2_fu_1057_p4;

assign zext_ln15_3_fu_1186_p1 = mantissa_3_fu_1177_p4;

assign zext_ln15_fu_1358_p1 = mantissa_fu_1348_p4;

assign zext_ln2818_fu_927_p1 = select_ln2817_1_fu_892_p3;

assign zext_ln2820_1_fu_917_p1 = tmp_15_fu_910_p3;

assign zext_ln2820_2_fu_932_p1 = select_ln2817_reg_2284_pp0_iter1_reg;

assign zext_ln2820_3_fu_941_p1 = add_ln2820_1_fu_935_p2;

assign zext_ln2820_fu_906_p1 = tmp_s_fu_899_p3;

assign zext_ln2871_1_fu_1867_p1 = or_ln_fu_1859_p3;

assign zext_ln2871_2_fu_1806_p1 = add_ln2871_1_fu_1801_p2;

assign zext_ln2871_3_fu_1878_p1 = shl_ln2871_2_fu_1871_p3;

assign zext_ln2871_fu_1784_p1 = and_ln_fu_1776_p3;

assign zext_ln2872_1_fu_1930_p1 = or_ln1_fu_1905_p3;

assign zext_ln2872_2_fu_1849_p1 = add_ln2872_1_fu_1844_p2;

assign zext_ln2872_3_fu_1941_p1 = shl_ln2872_2_fu_1934_p3;

assign zext_ln2872_fu_1921_p1 = and_ln1_fu_1913_p3;

assign zext_ln2873_1_fu_2031_p1 = or_ln2_reg_2614;

assign zext_ln2873_2_fu_2039_p1 = add_ln2873_1_fu_2034_p2;

assign zext_ln2873_3_fu_2057_p1 = shl_ln2873_2_fu_2049_p3;

assign zext_ln2873_fu_2014_p1 = and_ln2_fu_2006_p3;

assign zext_ln2874_1_fu_2141_p1 = or_ln3_fu_2109_p3;

assign zext_ln2874_2_fu_2150_p1 = add_ln2874_1_fu_2145_p2;

assign zext_ln2874_3_fu_2168_p1 = shl_ln2874_2_fu_2160_p3;

assign zext_ln2874_fu_2124_p1 = and_ln3_fu_2116_p3;

assign zext_ln3380_1_fu_1589_p1 = add_ln3380_reg_2468;

assign zext_ln3380_fu_1530_p1 = ap_phi_mux_i_1_phi_fu_624_p4;

assign zext_ln3381_fu_1609_p1 = select_ln3380_reg_2478;

assign zext_ln3384_1_fu_1708_p1 = tmp_27_fu_1701_p3;

assign zext_ln3384_2_fu_1645_p1 = tmp_28_fu_1638_p3;

assign zext_ln3384_3_fu_1656_p1 = tmp_30_fu_1649_p3;

assign zext_ln3384_4_fu_1718_p1 = select_ln3380_reg_2478_pp1_iter4_reg;

assign zext_ln3384_5_fu_1727_p1 = add_ln3384_2_fu_1721_p2;

assign zext_ln3384_6_fu_1685_p1 = add_ln3384_3_fu_1679_p2;

assign zext_ln3384_fu_1697_p1 = tmp_26_fu_1690_p3;

assign zext_ln341_1_fu_1190_p1 = tmp_46_reg_2327;

assign zext_ln341_fu_1071_p1 = tmp_44_fu_964_p4;

assign zext_ln510_fu_1362_p1 = tmp_42_fu_1334_p4;

assign zext_ln662_2_fu_1135_p1 = tmp_29_fu_1127_p3;

assign zext_ln662_3_fu_1252_p1 = tmp_34_fu_1244_p3;

assign zext_ln662_fu_1426_p1 = tmp_fu_1418_p3;

always @ (posedge ap_clk) begin
    select_ln2776_reg_2410[62:0] <= 63'b011111111100000000000000000000000000000000000000000000000000000;
end

endmodule //face_detect
