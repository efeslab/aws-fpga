// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nbody_core_start_Block_split5462_proc35 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_out_x_0_V_dout,
        stream_out_x_0_V_empty_n,
        stream_out_x_0_V_read,
        stream_out_y_0_V_dout,
        stream_out_y_0_V_empty_n,
        stream_out_y_0_V_read,
        stream_out_z_0_V_dout,
        stream_out_z_0_V_empty_n,
        stream_out_z_0_V_read,
        stream_out_x_1_V_dout,
        stream_out_x_1_V_empty_n,
        stream_out_x_1_V_read,
        stream_out_y_1_V_dout,
        stream_out_y_1_V_empty_n,
        stream_out_y_1_V_read,
        stream_out_z_1_V_dout,
        stream_out_z_1_V_empty_n,
        stream_out_z_1_V_read,
        out_x275_din,
        out_x275_full_n,
        out_x275_write,
        out_y276_din,
        out_y276_full_n,
        out_y276_write,
        out_z277_din,
        out_z277_full_n,
        out_z277_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] stream_out_x_0_V_dout;
input   stream_out_x_0_V_empty_n;
output   stream_out_x_0_V_read;
input  [31:0] stream_out_y_0_V_dout;
input   stream_out_y_0_V_empty_n;
output   stream_out_y_0_V_read;
input  [31:0] stream_out_z_0_V_dout;
input   stream_out_z_0_V_empty_n;
output   stream_out_z_0_V_read;
input  [31:0] stream_out_x_1_V_dout;
input   stream_out_x_1_V_empty_n;
output   stream_out_x_1_V_read;
input  [31:0] stream_out_y_1_V_dout;
input   stream_out_y_1_V_empty_n;
output   stream_out_y_1_V_read;
input  [31:0] stream_out_z_1_V_dout;
input   stream_out_z_1_V_empty_n;
output   stream_out_z_1_V_read;
output  [63:0] out_x275_din;
input   out_x275_full_n;
output   out_x275_write;
output  [63:0] out_y276_din;
input   out_y276_full_n;
output   out_y276_write;
output  [63:0] out_z277_din;
input   out_z277_full_n;
output   out_z277_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_out_x_0_V_read;
reg stream_out_y_0_V_read;
reg stream_out_z_0_V_read;
reg stream_out_x_1_V_read;
reg stream_out_y_1_V_read;
reg stream_out_z_1_V_read;
reg out_x275_write;
reg out_y276_write;
reg out_z277_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_out_x_0_V_blk_n;
reg    stream_out_y_0_V_blk_n;
reg    stream_out_z_0_V_blk_n;
reg    stream_out_x_1_V_blk_n;
reg    stream_out_y_1_V_blk_n;
reg    stream_out_z_1_V_blk_n;
reg    out_x275_blk_n;
reg    out_y276_blk_n;
reg    out_z277_blk_n;
reg    ap_block_state1;
wire   [31:0] bitcast_ln161_1_fu_109_p1;
wire   [31:0] bitcast_ln161_fu_97_p1;
wire   [31:0] bitcast_ln162_1_fu_113_p1;
wire   [31:0] bitcast_ln162_fu_101_p1;
wire   [31:0] bitcast_ln163_1_fu_117_p1;
wire   [31:0] bitcast_ln163_fu_105_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_x275_blk_n = out_x275_full_n;
    end else begin
        out_x275_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_x275_write = 1'b1;
    end else begin
        out_x275_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_y276_blk_n = out_y276_full_n;
    end else begin
        out_y276_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_y276_write = 1'b1;
    end else begin
        out_y276_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_z277_blk_n = out_z277_full_n;
    end else begin
        out_z277_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_z277_write = 1'b1;
    end else begin
        out_z277_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_x_0_V_blk_n = stream_out_x_0_V_empty_n;
    end else begin
        stream_out_x_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_x_0_V_read = 1'b1;
    end else begin
        stream_out_x_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_x_1_V_blk_n = stream_out_x_1_V_empty_n;
    end else begin
        stream_out_x_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_x_1_V_read = 1'b1;
    end else begin
        stream_out_x_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_y_0_V_blk_n = stream_out_y_0_V_empty_n;
    end else begin
        stream_out_y_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_y_0_V_read = 1'b1;
    end else begin
        stream_out_y_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_y_1_V_blk_n = stream_out_y_1_V_empty_n;
    end else begin
        stream_out_y_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_y_1_V_read = 1'b1;
    end else begin
        stream_out_y_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_z_0_V_blk_n = stream_out_z_0_V_empty_n;
    end else begin
        stream_out_z_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_z_0_V_read = 1'b1;
    end else begin
        stream_out_z_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_z_1_V_blk_n = stream_out_z_1_V_empty_n;
    end else begin
        stream_out_z_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_z_1_V_read = 1'b1;
    end else begin
        stream_out_z_1_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (out_z277_full_n == 1'b0) | (out_y276_full_n == 1'b0) | (out_x275_full_n == 1'b0) | (stream_out_z_1_V_empty_n == 1'b0) | (stream_out_y_1_V_empty_n == 1'b0) | (stream_out_x_1_V_empty_n == 1'b0) | (stream_out_z_0_V_empty_n == 1'b0) | (stream_out_y_0_V_empty_n == 1'b0) | (stream_out_x_0_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign bitcast_ln161_1_fu_109_p1 = stream_out_x_1_V_dout;

assign bitcast_ln161_fu_97_p1 = stream_out_x_0_V_dout;

assign bitcast_ln162_1_fu_113_p1 = stream_out_y_1_V_dout;

assign bitcast_ln162_fu_101_p1 = stream_out_y_0_V_dout;

assign bitcast_ln163_1_fu_117_p1 = stream_out_z_1_V_dout;

assign bitcast_ln163_fu_105_p1 = stream_out_z_0_V_dout;

assign out_x275_din = {{bitcast_ln161_1_fu_109_p1}, {bitcast_ln161_fu_97_p1}};

assign out_y276_din = {{bitcast_ln162_1_fu_113_p1}, {bitcast_ln162_fu_101_p1}};

assign out_z277_din = {{bitcast_ln163_1_fu_117_p1}, {bitcast_ln163_fu_105_p1}};

endmodule //nbody_core_start_Block_split5462_proc35
