// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nbody_nbody,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=193904,HLS_SYN_LUT=166503,HLS_VERSION=2020_2}" *)

module nbody (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 78'd1;
parameter    ap_ST_fsm_state2 = 78'd2;
parameter    ap_ST_fsm_state3 = 78'd4;
parameter    ap_ST_fsm_state4 = 78'd8;
parameter    ap_ST_fsm_state5 = 78'd16;
parameter    ap_ST_fsm_state6 = 78'd32;
parameter    ap_ST_fsm_state7 = 78'd64;
parameter    ap_ST_fsm_state8 = 78'd128;
parameter    ap_ST_fsm_state9 = 78'd256;
parameter    ap_ST_fsm_state10 = 78'd512;
parameter    ap_ST_fsm_state11 = 78'd1024;
parameter    ap_ST_fsm_state12 = 78'd2048;
parameter    ap_ST_fsm_state13 = 78'd4096;
parameter    ap_ST_fsm_state14 = 78'd8192;
parameter    ap_ST_fsm_state15 = 78'd16384;
parameter    ap_ST_fsm_state16 = 78'd32768;
parameter    ap_ST_fsm_state17 = 78'd65536;
parameter    ap_ST_fsm_state18 = 78'd131072;
parameter    ap_ST_fsm_state19 = 78'd262144;
parameter    ap_ST_fsm_state20 = 78'd524288;
parameter    ap_ST_fsm_state21 = 78'd1048576;
parameter    ap_ST_fsm_state22 = 78'd2097152;
parameter    ap_ST_fsm_state23 = 78'd4194304;
parameter    ap_ST_fsm_state24 = 78'd8388608;
parameter    ap_ST_fsm_state25 = 78'd16777216;
parameter    ap_ST_fsm_state26 = 78'd33554432;
parameter    ap_ST_fsm_state27 = 78'd67108864;
parameter    ap_ST_fsm_state28 = 78'd134217728;
parameter    ap_ST_fsm_state29 = 78'd268435456;
parameter    ap_ST_fsm_state30 = 78'd536870912;
parameter    ap_ST_fsm_state31 = 78'd1073741824;
parameter    ap_ST_fsm_state32 = 78'd2147483648;
parameter    ap_ST_fsm_state33 = 78'd4294967296;
parameter    ap_ST_fsm_state34 = 78'd8589934592;
parameter    ap_ST_fsm_state35 = 78'd17179869184;
parameter    ap_ST_fsm_state36 = 78'd34359738368;
parameter    ap_ST_fsm_state37 = 78'd68719476736;
parameter    ap_ST_fsm_state38 = 78'd137438953472;
parameter    ap_ST_fsm_state39 = 78'd274877906944;
parameter    ap_ST_fsm_state40 = 78'd549755813888;
parameter    ap_ST_fsm_state41 = 78'd1099511627776;
parameter    ap_ST_fsm_state42 = 78'd2199023255552;
parameter    ap_ST_fsm_state43 = 78'd4398046511104;
parameter    ap_ST_fsm_state44 = 78'd8796093022208;
parameter    ap_ST_fsm_state45 = 78'd17592186044416;
parameter    ap_ST_fsm_state46 = 78'd35184372088832;
parameter    ap_ST_fsm_state47 = 78'd70368744177664;
parameter    ap_ST_fsm_state48 = 78'd140737488355328;
parameter    ap_ST_fsm_state49 = 78'd281474976710656;
parameter    ap_ST_fsm_state50 = 78'd562949953421312;
parameter    ap_ST_fsm_state51 = 78'd1125899906842624;
parameter    ap_ST_fsm_state52 = 78'd2251799813685248;
parameter    ap_ST_fsm_state53 = 78'd4503599627370496;
parameter    ap_ST_fsm_state54 = 78'd9007199254740992;
parameter    ap_ST_fsm_state55 = 78'd18014398509481984;
parameter    ap_ST_fsm_state56 = 78'd36028797018963968;
parameter    ap_ST_fsm_state57 = 78'd72057594037927936;
parameter    ap_ST_fsm_state58 = 78'd144115188075855872;
parameter    ap_ST_fsm_state59 = 78'd288230376151711744;
parameter    ap_ST_fsm_state60 = 78'd576460752303423488;
parameter    ap_ST_fsm_state61 = 78'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 78'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 78'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 78'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 78'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 78'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 78'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 78'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 78'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 78'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 78'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 78'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 78'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 78'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 78'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 78'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 78'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 78'd151115727451828646838272;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [77:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] p_x_0;
reg   [63:0] p_x_0_0_data_reg;
reg    p_x_0_0_vld_reg;
reg    p_x_0_0_ack_out;
wire   [63:0] p_y_0;
reg   [63:0] p_y_0_0_data_reg;
reg    p_y_0_0_vld_reg;
reg    p_y_0_0_ack_out;
wire   [63:0] p_z_0;
reg   [63:0] p_z_0_0_data_reg;
reg    p_z_0_0_vld_reg;
reg    p_z_0_0_ack_out;
wire   [63:0] a_x_0;
reg   [63:0] a_x_0_0_data_reg;
reg    a_x_0_0_vld_reg;
reg    a_x_0_0_ack_out;
wire   [63:0] a_y_0;
reg   [63:0] a_y_0_0_data_reg;
reg    a_y_0_0_vld_reg;
reg    a_y_0_0_ack_out;
wire   [63:0] a_z_0;
reg   [63:0] a_z_0_0_data_reg;
reg    a_z_0_0_vld_reg;
reg    a_z_0_0_ack_out;
wire   [63:0] c_0;
reg   [63:0] c_0_0_data_reg;
reg    c_0_0_vld_reg;
reg    c_0_0_ack_out;
wire   [63:0] outer_tile_start_ptr_0;
reg   [63:0] outer_tile_start_ptr_0_0_data_reg;
reg    outer_tile_start_ptr_0_0_vld_reg;
reg    outer_tile_start_ptr_0_0_ack_out;
wire   [63:0] outer_tile_end_ptr_0;
reg   [63:0] outer_tile_end_ptr_0_0_data_reg;
reg    outer_tile_end_ptr_0_0_vld_reg;
reg    outer_tile_end_ptr_0_0_ack_out;
wire   [63:0] p_x_1;
reg   [63:0] p_x_1_0_data_reg;
reg    p_x_1_0_vld_reg;
reg    p_x_1_0_ack_out;
wire   [63:0] p_y_1;
reg   [63:0] p_y_1_0_data_reg;
reg    p_y_1_0_vld_reg;
reg    p_y_1_0_ack_out;
wire   [63:0] p_z_1;
reg   [63:0] p_z_1_0_data_reg;
reg    p_z_1_0_vld_reg;
reg    p_z_1_0_ack_out;
wire   [63:0] a_x_1;
reg   [63:0] a_x_1_0_data_reg;
reg    a_x_1_0_vld_reg;
reg    a_x_1_0_ack_out;
wire   [63:0] a_y_1;
reg   [63:0] a_y_1_0_data_reg;
reg    a_y_1_0_vld_reg;
reg    a_y_1_0_ack_out;
wire   [63:0] a_z_1;
reg   [63:0] a_z_1_0_data_reg;
reg    a_z_1_0_vld_reg;
reg    a_z_1_0_ack_out;
wire   [63:0] c_1;
reg   [63:0] c_1_0_data_reg;
reg    c_1_0_vld_reg;
reg    c_1_0_ack_out;
wire   [63:0] outer_tile_start_ptr_1;
reg   [63:0] outer_tile_start_ptr_1_0_data_reg;
reg    outer_tile_start_ptr_1_0_vld_reg;
reg    outer_tile_start_ptr_1_0_ack_out;
wire   [63:0] outer_tile_end_ptr_1;
reg   [63:0] outer_tile_end_ptr_1_0_data_reg;
reg    outer_tile_end_ptr_1_0_vld_reg;
reg    outer_tile_end_ptr_1_0_ack_out;
wire   [63:0] EPS_ptr;
reg   [63:0] EPS_ptr_0_data_reg;
reg    EPS_ptr_0_vld_reg;
reg    EPS_ptr_0_ack_out;
wire   [63:0] tiling_factor_ptr;
reg   [63:0] tiling_factor_ptr_0_data_reg;
reg    tiling_factor_ptr_0_vld_reg;
reg    tiling_factor_ptr_0_ack_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [0:0] gmem_ARID;
reg   [31:0] gmem_ARLEN;
reg   [2:0] gmem_ARSIZE;
reg   [1:0] gmem_ARBURST;
reg   [1:0] gmem_ARLOCK;
reg   [3:0] gmem_ARCACHE;
reg   [2:0] gmem_ARPROT;
reg   [3:0] gmem_ARQOS;
reg   [3:0] gmem_ARREGION;
reg   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [63:0] outer_tile_end_ptr_1_read_reg_347;
wire    ap_CS_fsm_state2;
reg   [63:0] outer_tile_start_ptr_1_read_reg_352;
reg   [63:0] c_1_read_reg_357;
reg   [63:0] a_z_1_read_reg_362;
reg   [63:0] a_y_1_read_reg_367;
reg   [63:0] a_x_1_read_reg_372;
reg   [63:0] p_z_1_read_reg_377;
reg   [63:0] p_y_1_read_reg_382;
reg   [63:0] p_x_1_read_reg_387;
reg   [63:0] outer_tile_end_ptr_0_read_reg_392;
reg   [63:0] outer_tile_start_ptr_0_read_reg_397;
reg   [63:0] c_0_read_reg_402;
reg   [63:0] a_z_0_read_reg_407;
reg   [63:0] a_y_0_read_reg_412;
reg   [63:0] a_x_0_read_reg_417;
reg   [63:0] p_z_0_read_reg_422;
reg   [63:0] p_y_0_read_reg_427;
reg   [63:0] p_x_0_read_reg_432;
reg   [57:0] trunc_ln358_1_reg_437;
reg   [57:0] trunc_ln1_reg_442;
wire   [31:0] trunc_ln358_fu_335_p1;
reg   [31:0] trunc_ln358_reg_459;
wire   [31:0] tiling_factor_fu_339_p1;
reg   [31:0] tiling_factor_reg_464;
wire   [31:0] EPS_fu_343_p1;
reg   [31:0] EPS_reg_469;
wire    ap_CS_fsm_state75;
wire    grp_n_body_cu_fu_278_ap_start;
wire    grp_n_body_cu_fu_278_ap_done;
wire    grp_n_body_cu_fu_278_ap_idle;
wire    grp_n_body_cu_fu_278_ap_ready;
wire    grp_n_body_cu_fu_278_m_axi_gmem_AWVALID;
wire   [63:0] grp_n_body_cu_fu_278_m_axi_gmem_AWADDR;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_AWID;
wire   [31:0] grp_n_body_cu_fu_278_m_axi_gmem_AWLEN;
wire   [2:0] grp_n_body_cu_fu_278_m_axi_gmem_AWSIZE;
wire   [1:0] grp_n_body_cu_fu_278_m_axi_gmem_AWBURST;
wire   [1:0] grp_n_body_cu_fu_278_m_axi_gmem_AWLOCK;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_AWCACHE;
wire   [2:0] grp_n_body_cu_fu_278_m_axi_gmem_AWPROT;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_AWQOS;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_AWREGION;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_AWUSER;
wire    grp_n_body_cu_fu_278_m_axi_gmem_WVALID;
wire   [511:0] grp_n_body_cu_fu_278_m_axi_gmem_WDATA;
wire   [63:0] grp_n_body_cu_fu_278_m_axi_gmem_WSTRB;
wire    grp_n_body_cu_fu_278_m_axi_gmem_WLAST;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_WID;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_WUSER;
wire    grp_n_body_cu_fu_278_m_axi_gmem_ARVALID;
wire   [63:0] grp_n_body_cu_fu_278_m_axi_gmem_ARADDR;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_ARID;
wire   [31:0] grp_n_body_cu_fu_278_m_axi_gmem_ARLEN;
wire   [2:0] grp_n_body_cu_fu_278_m_axi_gmem_ARSIZE;
wire   [1:0] grp_n_body_cu_fu_278_m_axi_gmem_ARBURST;
wire   [1:0] grp_n_body_cu_fu_278_m_axi_gmem_ARLOCK;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_ARCACHE;
wire   [2:0] grp_n_body_cu_fu_278_m_axi_gmem_ARPROT;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_ARQOS;
wire   [3:0] grp_n_body_cu_fu_278_m_axi_gmem_ARREGION;
wire   [0:0] grp_n_body_cu_fu_278_m_axi_gmem_ARUSER;
wire    grp_n_body_cu_fu_278_m_axi_gmem_RREADY;
wire    grp_n_body_cu_fu_278_m_axi_gmem_BREADY;
reg   [63:0] grp_n_body_cu_fu_278_outer_tile_start_ptr;
reg   [63:0] grp_n_body_cu_fu_278_outer_tile_end_ptr;
reg   [63:0] grp_n_body_cu_fu_278_p_x;
reg   [63:0] grp_n_body_cu_fu_278_p_y;
reg   [63:0] grp_n_body_cu_fu_278_p_z;
reg   [63:0] grp_n_body_cu_fu_278_c;
reg   [63:0] grp_n_body_cu_fu_278_a_x;
reg   [63:0] grp_n_body_cu_fu_278_a_y;
reg   [63:0] grp_n_body_cu_fu_278_a_z;
reg    grp_n_body_cu_fu_278_ap_start_reg;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state78;
wire  signed [63:0] sext_ln358_fu_315_p1;
wire  signed [63:0] sext_ln359_fu_325_p1;
reg   [77:0] ap_NS_fsm;
reg    ap_block_state1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 78'd1;
#0 p_x_0_0_data_reg = 64'd0;
#0 p_x_0_0_vld_reg = 1'b0;
#0 p_y_0_0_data_reg = 64'd0;
#0 p_y_0_0_vld_reg = 1'b0;
#0 p_z_0_0_data_reg = 64'd0;
#0 p_z_0_0_vld_reg = 1'b0;
#0 a_x_0_0_data_reg = 64'd0;
#0 a_x_0_0_vld_reg = 1'b0;
#0 a_y_0_0_data_reg = 64'd0;
#0 a_y_0_0_vld_reg = 1'b0;
#0 a_z_0_0_data_reg = 64'd0;
#0 a_z_0_0_vld_reg = 1'b0;
#0 c_0_0_data_reg = 64'd0;
#0 c_0_0_vld_reg = 1'b0;
#0 outer_tile_start_ptr_0_0_data_reg = 64'd0;
#0 outer_tile_start_ptr_0_0_vld_reg = 1'b0;
#0 outer_tile_end_ptr_0_0_data_reg = 64'd0;
#0 outer_tile_end_ptr_0_0_vld_reg = 1'b0;
#0 p_x_1_0_data_reg = 64'd0;
#0 p_x_1_0_vld_reg = 1'b0;
#0 p_y_1_0_data_reg = 64'd0;
#0 p_y_1_0_vld_reg = 1'b0;
#0 p_z_1_0_data_reg = 64'd0;
#0 p_z_1_0_vld_reg = 1'b0;
#0 a_x_1_0_data_reg = 64'd0;
#0 a_x_1_0_vld_reg = 1'b0;
#0 a_y_1_0_data_reg = 64'd0;
#0 a_y_1_0_vld_reg = 1'b0;
#0 a_z_1_0_data_reg = 64'd0;
#0 a_z_1_0_vld_reg = 1'b0;
#0 c_1_0_data_reg = 64'd0;
#0 c_1_0_vld_reg = 1'b0;
#0 outer_tile_start_ptr_1_0_data_reg = 64'd0;
#0 outer_tile_start_ptr_1_0_vld_reg = 1'b0;
#0 outer_tile_end_ptr_1_0_data_reg = 64'd0;
#0 outer_tile_end_ptr_1_0_vld_reg = 1'b0;
#0 EPS_ptr_0_data_reg = 64'd0;
#0 EPS_ptr_0_vld_reg = 1'b0;
#0 tiling_factor_ptr_0_data_reg = 64'd0;
#0 tiling_factor_ptr_0_vld_reg = 1'b0;
#0 grp_n_body_cu_fu_278_ap_start_reg = 1'b0;
end

nbody_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .p_x_0(p_x_0),
    .p_y_0(p_y_0),
    .p_z_0(p_z_0),
    .a_x_0(a_x_0),
    .a_y_0(a_y_0),
    .a_z_0(a_z_0),
    .c_0(c_0),
    .outer_tile_start_ptr_0(outer_tile_start_ptr_0),
    .outer_tile_end_ptr_0(outer_tile_end_ptr_0),
    .p_x_1(p_x_1),
    .p_y_1(p_y_1),
    .p_z_1(p_z_1),
    .a_x_1(a_x_1),
    .a_y_1(a_y_1),
    .a_z_1(a_z_1),
    .c_1(c_1),
    .outer_tile_start_ptr_1(outer_tile_start_ptr_1),
    .outer_tile_end_ptr_1(outer_tile_end_ptr_1),
    .EPS_ptr(EPS_ptr),
    .tiling_factor_ptr(tiling_factor_ptr),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

nbody_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 32 ),
    .MAX_WRITE_BURST_LENGTH( 32 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(gmem_ARID),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(gmem_ARSIZE),
    .I_ARLOCK(gmem_ARLOCK),
    .I_ARCACHE(gmem_ARCACHE),
    .I_ARQOS(gmem_ARQOS),
    .I_ARPROT(gmem_ARPROT),
    .I_ARUSER(gmem_ARUSER),
    .I_ARBURST(gmem_ARBURST),
    .I_ARREGION(gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_n_body_cu_fu_278_m_axi_gmem_AWADDR),
    .I_AWID(grp_n_body_cu_fu_278_m_axi_gmem_AWID),
    .I_AWLEN(grp_n_body_cu_fu_278_m_axi_gmem_AWLEN),
    .I_AWSIZE(grp_n_body_cu_fu_278_m_axi_gmem_AWSIZE),
    .I_AWLOCK(grp_n_body_cu_fu_278_m_axi_gmem_AWLOCK),
    .I_AWCACHE(grp_n_body_cu_fu_278_m_axi_gmem_AWCACHE),
    .I_AWQOS(grp_n_body_cu_fu_278_m_axi_gmem_AWQOS),
    .I_AWPROT(grp_n_body_cu_fu_278_m_axi_gmem_AWPROT),
    .I_AWUSER(grp_n_body_cu_fu_278_m_axi_gmem_AWUSER),
    .I_AWBURST(grp_n_body_cu_fu_278_m_axi_gmem_AWBURST),
    .I_AWREGION(grp_n_body_cu_fu_278_m_axi_gmem_AWREGION),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_n_body_cu_fu_278_m_axi_gmem_WDATA),
    .I_WID(grp_n_body_cu_fu_278_m_axi_gmem_WID),
    .I_WUSER(grp_n_body_cu_fu_278_m_axi_gmem_WUSER),
    .I_WLAST(grp_n_body_cu_fu_278_m_axi_gmem_WLAST),
    .I_WSTRB(grp_n_body_cu_fu_278_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

nbody_n_body_cu grp_n_body_cu_fu_278(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_n_body_cu_fu_278_ap_start),
    .ap_done(grp_n_body_cu_fu_278_ap_done),
    .ap_idle(grp_n_body_cu_fu_278_ap_idle),
    .ap_ready(grp_n_body_cu_fu_278_ap_ready),
    .m_axi_gmem_AWVALID(grp_n_body_cu_fu_278_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_n_body_cu_fu_278_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_n_body_cu_fu_278_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_n_body_cu_fu_278_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_n_body_cu_fu_278_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_n_body_cu_fu_278_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_n_body_cu_fu_278_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_n_body_cu_fu_278_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_n_body_cu_fu_278_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_n_body_cu_fu_278_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_n_body_cu_fu_278_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_n_body_cu_fu_278_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_n_body_cu_fu_278_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_n_body_cu_fu_278_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_n_body_cu_fu_278_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_n_body_cu_fu_278_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_n_body_cu_fu_278_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_n_body_cu_fu_278_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_n_body_cu_fu_278_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_n_body_cu_fu_278_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_n_body_cu_fu_278_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_n_body_cu_fu_278_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_n_body_cu_fu_278_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_n_body_cu_fu_278_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_n_body_cu_fu_278_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_n_body_cu_fu_278_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_n_body_cu_fu_278_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_n_body_cu_fu_278_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_n_body_cu_fu_278_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_n_body_cu_fu_278_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_n_body_cu_fu_278_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(gmem_RLAST),
    .m_axi_gmem_RID(gmem_RID),
    .m_axi_gmem_RUSER(gmem_RUSER),
    .m_axi_gmem_RRESP(gmem_RRESP),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_n_body_cu_fu_278_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(gmem_BRESP),
    .m_axi_gmem_BID(gmem_BID),
    .m_axi_gmem_BUSER(gmem_BUSER),
    .tiling_factor_val(tiling_factor_reg_464),
    .outer_tile_start_ptr(grp_n_body_cu_fu_278_outer_tile_start_ptr),
    .outer_tile_end_ptr(grp_n_body_cu_fu_278_outer_tile_end_ptr),
    .EPS_val(EPS_reg_469),
    .p_x(grp_n_body_cu_fu_278_p_x),
    .p_y(grp_n_body_cu_fu_278_p_y),
    .p_z(grp_n_body_cu_fu_278_p_z),
    .c(grp_n_body_cu_fu_278_c),
    .a_x(grp_n_body_cu_fu_278_a_x),
    .a_y(grp_n_body_cu_fu_278_a_y),
    .a_z(grp_n_body_cu_fu_278_a_z)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_n_body_cu_fu_278_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
            grp_n_body_cu_fu_278_ap_start_reg <= 1'b1;
        end else if ((grp_n_body_cu_fu_278_ap_ready == 1'b1)) begin
            grp_n_body_cu_fu_278_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == EPS_ptr_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == EPS_ptr_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == EPS_ptr_0_vld_reg) & (1'b1 == 1'b1)))) begin
        EPS_ptr_0_data_reg <= EPS_ptr;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        EPS_reg_469 <= EPS_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_x_0_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_x_0_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_x_0_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_x_0_0_data_reg <= a_x_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_x_0_read_reg_417 <= a_x_0_0_data_reg;
        a_x_1_read_reg_372 <= a_x_1_0_data_reg;
        a_y_0_read_reg_412 <= a_y_0_0_data_reg;
        a_y_1_read_reg_367 <= a_y_1_0_data_reg;
        a_z_0_read_reg_407 <= a_z_0_0_data_reg;
        a_z_1_read_reg_362 <= a_z_1_0_data_reg;
        c_0_read_reg_402 <= c_0_0_data_reg;
        c_1_read_reg_357 <= c_1_0_data_reg;
        outer_tile_end_ptr_0_read_reg_392 <= outer_tile_end_ptr_0_0_data_reg;
        outer_tile_end_ptr_1_read_reg_347 <= outer_tile_end_ptr_1_0_data_reg;
        outer_tile_start_ptr_0_read_reg_397 <= outer_tile_start_ptr_0_0_data_reg;
        outer_tile_start_ptr_1_read_reg_352 <= outer_tile_start_ptr_1_0_data_reg;
        p_x_0_read_reg_432 <= p_x_0_0_data_reg;
        p_x_1_read_reg_387 <= p_x_1_0_data_reg;
        p_y_0_read_reg_427 <= p_y_0_0_data_reg;
        p_y_1_read_reg_382 <= p_y_1_0_data_reg;
        p_z_0_read_reg_422 <= p_z_0_0_data_reg;
        p_z_1_read_reg_377 <= p_z_1_0_data_reg;
        trunc_ln1_reg_442 <= {{tiling_factor_ptr_0_data_reg[63:6]}};
        trunc_ln358_1_reg_437 <= {{EPS_ptr_0_data_reg[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_x_1_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_x_1_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_x_1_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_x_1_0_data_reg <= a_x_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_y_0_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_y_0_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_y_0_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_y_0_0_data_reg <= a_y_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_y_1_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_y_1_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_y_1_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_y_1_0_data_reg <= a_y_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_z_0_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_z_0_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_z_0_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_z_0_0_data_reg <= a_z_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == a_z_1_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_z_1_0_vld_reg)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == a_z_1_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_z_1_0_data_reg <= a_z_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (c_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (c_0_0_vld_reg == 1'b0)))) begin
        c_0_0_data_reg <= c_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (c_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (c_1_0_vld_reg == 1'b0)))) begin
        c_1_0_data_reg <= c_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (outer_tile_end_ptr_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (outer_tile_end_ptr_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (outer_tile_end_ptr_0_0_vld_reg == 1'b0)))) begin
        outer_tile_end_ptr_0_0_data_reg <= outer_tile_end_ptr_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (outer_tile_end_ptr_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (outer_tile_end_ptr_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (outer_tile_end_ptr_1_0_vld_reg == 1'b0)))) begin
        outer_tile_end_ptr_1_0_data_reg <= outer_tile_end_ptr_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (outer_tile_start_ptr_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (outer_tile_start_ptr_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (outer_tile_start_ptr_0_0_vld_reg == 1'b0)))) begin
        outer_tile_start_ptr_0_0_data_reg <= outer_tile_start_ptr_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (outer_tile_start_ptr_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (outer_tile_start_ptr_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (outer_tile_start_ptr_1_0_vld_reg == 1'b0)))) begin
        outer_tile_start_ptr_1_0_data_reg <= outer_tile_start_ptr_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_x_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_x_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_x_0_0_vld_reg == 1'b0)))) begin
        p_x_0_0_data_reg <= p_x_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_x_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_x_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_x_1_0_vld_reg == 1'b0)))) begin
        p_x_1_0_data_reg <= p_x_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_y_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_y_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_y_0_0_vld_reg == 1'b0)))) begin
        p_y_0_0_data_reg <= p_y_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_y_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_y_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_y_1_0_vld_reg == 1'b0)))) begin
        p_y_1_0_data_reg <= p_y_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_z_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_z_0_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_z_0_0_vld_reg == 1'b0)))) begin
        p_z_0_0_data_reg <= p_z_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (p_z_1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (p_z_1_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (p_z_1_0_vld_reg == 1'b0)))) begin
        p_z_1_0_data_reg <= p_z_1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (tiling_factor_ptr_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (tiling_factor_ptr_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (tiling_factor_ptr_0_vld_reg == 1'b0)))) begin
        tiling_factor_ptr_0_data_reg <= tiling_factor_ptr;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        tiling_factor_reg_464 <= tiling_factor_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        trunc_ln358_reg_459 <= trunc_ln358_fu_335_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        EPS_ptr_0_ack_out = 1'b1;
    end else begin
        EPS_ptr_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_x_0_0_ack_out = 1'b1;
    end else begin
        a_x_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_x_1_0_ack_out = 1'b1;
    end else begin
        a_x_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_y_0_0_ack_out = 1'b1;
    end else begin
        a_y_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_y_1_0_ack_out = 1'b1;
    end else begin
        a_y_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_z_0_0_ack_out = 1'b1;
    end else begin
        a_z_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        a_z_1_0_ack_out = 1'b1;
    end else begin
        a_z_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        c_0_0_ack_out = 1'b1;
    end else begin
        c_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        c_1_0_ack_out = 1'b1;
    end else begin
        c_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = sext_ln359_fu_325_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARADDR = sext_ln358_fu_315_p1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARADDR = grp_n_body_cu_fu_278_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARBURST = grp_n_body_cu_fu_278_m_axi_gmem_ARBURST;
    end else begin
        gmem_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARCACHE = grp_n_body_cu_fu_278_m_axi_gmem_ARCACHE;
    end else begin
        gmem_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARID = grp_n_body_cu_fu_278_m_axi_gmem_ARID;
    end else begin
        gmem_ARID = 1'd0;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARLEN = grp_n_body_cu_fu_278_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARLOCK = grp_n_body_cu_fu_278_m_axi_gmem_ARLOCK;
    end else begin
        gmem_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARPROT = grp_n_body_cu_fu_278_m_axi_gmem_ARPROT;
    end else begin
        gmem_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARQOS = grp_n_body_cu_fu_278_m_axi_gmem_ARQOS;
    end else begin
        gmem_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARREGION = grp_n_body_cu_fu_278_m_axi_gmem_ARREGION;
    end else begin
        gmem_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARSIZE = grp_n_body_cu_fu_278_m_axi_gmem_ARSIZE;
    end else begin
        gmem_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARUSER = grp_n_body_cu_fu_278_m_axi_gmem_ARUSER;
    end else begin
        gmem_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_ARVALID = grp_n_body_cu_fu_278_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_AWVALID = grp_n_body_cu_fu_278_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_BREADY = grp_n_body_cu_fu_278_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_RREADY = grp_n_body_cu_fu_278_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_WVALID = grp_n_body_cu_fu_278_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_a_x = a_x_1_read_reg_372;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_a_x = a_x_0_read_reg_417;
    end else begin
        grp_n_body_cu_fu_278_a_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_a_y = a_y_1_read_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_a_y = a_y_0_read_reg_412;
    end else begin
        grp_n_body_cu_fu_278_a_y = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_a_z = a_z_1_read_reg_362;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_a_z = a_z_0_read_reg_407;
    end else begin
        grp_n_body_cu_fu_278_a_z = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_c = c_1_read_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_c = c_0_read_reg_402;
    end else begin
        grp_n_body_cu_fu_278_c = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_outer_tile_end_ptr = outer_tile_end_ptr_1_read_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_outer_tile_end_ptr = outer_tile_end_ptr_0_read_reg_392;
    end else begin
        grp_n_body_cu_fu_278_outer_tile_end_ptr = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_outer_tile_start_ptr = outer_tile_start_ptr_1_read_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_outer_tile_start_ptr = outer_tile_start_ptr_0_read_reg_397;
    end else begin
        grp_n_body_cu_fu_278_outer_tile_start_ptr = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_p_x = p_x_1_read_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_p_x = p_x_0_read_reg_432;
    end else begin
        grp_n_body_cu_fu_278_p_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_p_y = p_y_1_read_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_p_y = p_y_0_read_reg_427;
    end else begin
        grp_n_body_cu_fu_278_p_y = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_n_body_cu_fu_278_p_z = p_z_1_read_reg_377;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_n_body_cu_fu_278_p_z = p_z_0_read_reg_422;
    end else begin
        grp_n_body_cu_fu_278_p_z = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        outer_tile_end_ptr_0_0_ack_out = 1'b1;
    end else begin
        outer_tile_end_ptr_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        outer_tile_end_ptr_1_0_ack_out = 1'b1;
    end else begin
        outer_tile_end_ptr_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        outer_tile_start_ptr_0_0_ack_out = 1'b1;
    end else begin
        outer_tile_start_ptr_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        outer_tile_start_ptr_1_0_ack_out = 1'b1;
    end else begin
        outer_tile_start_ptr_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_x_0_0_ack_out = 1'b1;
    end else begin
        p_x_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_x_1_0_ack_out = 1'b1;
    end else begin
        p_x_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_y_0_0_ack_out = 1'b1;
    end else begin
        p_y_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_y_1_0_ack_out = 1'b1;
    end else begin
        p_y_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_z_0_0_ack_out = 1'b1;
    end else begin
        p_z_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        p_z_1_0_ack_out = 1'b1;
    end else begin
        p_z_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        tiling_factor_ptr_0_ack_out = 1'b1;
    end else begin
        tiling_factor_ptr_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((grp_n_body_cu_fu_278_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign EPS_fu_343_p1 = trunc_ln358_reg_459;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_n_body_cu_fu_278_ap_start = grp_n_body_cu_fu_278_ap_start_reg;

assign sext_ln358_fu_315_p1 = $signed(trunc_ln358_1_reg_437);

assign sext_ln359_fu_325_p1 = $signed(trunc_ln1_reg_442);

assign tiling_factor_fu_339_p1 = gmem_RDATA[31:0];

assign trunc_ln358_fu_335_p1 = gmem_RDATA[31:0];


// synthesis translate_off
`include "nbody_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //nbody

