// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nbody_core_start_entry38 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        x_val_dout,
        x_val_empty_n,
        x_val_read,
        y_val_dout,
        y_val_empty_n,
        y_val_read,
        z_val_dout,
        z_val_empty_n,
        z_val_read,
        EPS_dout,
        EPS_empty_n,
        EPS_read,
        x_val_out_din,
        x_val_out_full_n,
        x_val_out_write,
        x_val_out1_din,
        x_val_out1_full_n,
        x_val_out1_write,
        y_val_out_din,
        y_val_out_full_n,
        y_val_out_write,
        y_val_out2_din,
        y_val_out2_full_n,
        y_val_out2_write,
        z_val_out_din,
        z_val_out_full_n,
        z_val_out_write,
        z_val_out3_din,
        z_val_out3_full_n,
        z_val_out3_write,
        EPS_out_din,
        EPS_out_full_n,
        EPS_out_write,
        EPS_out4_din,
        EPS_out4_full_n,
        EPS_out4_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] x_val_dout;
input   x_val_empty_n;
output   x_val_read;
input  [63:0] y_val_dout;
input   y_val_empty_n;
output   y_val_read;
input  [63:0] z_val_dout;
input   z_val_empty_n;
output   z_val_read;
input  [31:0] EPS_dout;
input   EPS_empty_n;
output   EPS_read;
output  [31:0] x_val_out_din;
input   x_val_out_full_n;
output   x_val_out_write;
output  [63:0] x_val_out1_din;
input   x_val_out1_full_n;
output   x_val_out1_write;
output  [31:0] y_val_out_din;
input   y_val_out_full_n;
output   y_val_out_write;
output  [63:0] y_val_out2_din;
input   y_val_out2_full_n;
output   y_val_out2_write;
output  [31:0] z_val_out_din;
input   z_val_out_full_n;
output   z_val_out_write;
output  [63:0] z_val_out3_din;
input   z_val_out3_full_n;
output   z_val_out3_write;
output  [31:0] EPS_out_din;
input   EPS_out_full_n;
output   EPS_out_write;
output  [31:0] EPS_out4_din;
input   EPS_out4_full_n;
output   EPS_out4_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_val_read;
reg y_val_read;
reg z_val_read;
reg EPS_read;
reg x_val_out_write;
reg x_val_out1_write;
reg y_val_out_write;
reg y_val_out2_write;
reg z_val_out_write;
reg z_val_out3_write;
reg EPS_out_write;
reg EPS_out4_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    x_val_blk_n;
reg    y_val_blk_n;
reg    z_val_blk_n;
reg    EPS_blk_n;
reg    x_val_out_blk_n;
reg    x_val_out1_blk_n;
reg    y_val_out_blk_n;
reg    y_val_out2_blk_n;
reg    z_val_out_blk_n;
reg    z_val_out3_blk_n;
reg    EPS_out_blk_n;
reg    EPS_out4_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_blk_n = EPS_empty_n;
    end else begin
        EPS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_out4_blk_n = EPS_out4_full_n;
    end else begin
        EPS_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_out4_write = 1'b1;
    end else begin
        EPS_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_out_blk_n = EPS_out_full_n;
    end else begin
        EPS_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_out_write = 1'b1;
    end else begin
        EPS_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        EPS_read = 1'b1;
    end else begin
        EPS_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_blk_n = x_val_empty_n;
    end else begin
        x_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_out1_blk_n = x_val_out1_full_n;
    end else begin
        x_val_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_out1_write = 1'b1;
    end else begin
        x_val_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_out_blk_n = x_val_out_full_n;
    end else begin
        x_val_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_out_write = 1'b1;
    end else begin
        x_val_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_val_read = 1'b1;
    end else begin
        x_val_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_blk_n = y_val_empty_n;
    end else begin
        y_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_out2_blk_n = y_val_out2_full_n;
    end else begin
        y_val_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_out2_write = 1'b1;
    end else begin
        y_val_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_out_blk_n = y_val_out_full_n;
    end else begin
        y_val_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_out_write = 1'b1;
    end else begin
        y_val_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_val_read = 1'b1;
    end else begin
        y_val_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_blk_n = z_val_empty_n;
    end else begin
        z_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_out3_blk_n = z_val_out3_full_n;
    end else begin
        z_val_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_out3_write = 1'b1;
    end else begin
        z_val_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_out_blk_n = z_val_out_full_n;
    end else begin
        z_val_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_out_write = 1'b1;
    end else begin
        z_val_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_val_read = 1'b1;
    end else begin
        z_val_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign EPS_out4_din = EPS_dout;

assign EPS_out_din = EPS_dout;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (z_val_out3_full_n == 1'b0) | (z_val_out_full_n == 1'b0) | (y_val_out2_full_n == 1'b0) | (y_val_out_full_n == 1'b0) | (x_val_out1_full_n == 1'b0) | (x_val_out_full_n == 1'b0) | (z_val_empty_n == 1'b0) | (1'b0 == EPS_out4_full_n) | (1'b0 == EPS_out_full_n) | (1'b0 == EPS_empty_n) | (y_val_empty_n == 1'b0) | (x_val_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign x_val_out1_din = x_val_dout;

assign x_val_out_din = x_val_dout[31:0];

assign y_val_out2_din = y_val_dout;

assign y_val_out_din = y_val_dout[31:0];

assign z_val_out3_din = z_val_dout;

assign z_val_out_din = z_val_dout[31:0];

endmodule //nbody_core_start_entry38
