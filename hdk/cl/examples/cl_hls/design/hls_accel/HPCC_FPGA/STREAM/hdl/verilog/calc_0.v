// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc_0_calc_0,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=13033,HLS_SYN_LUT=8597,HLS_VERSION=2020_2}" *)

module calc_0 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 215'd1;
parameter    ap_ST_fsm_state2 = 215'd2;
parameter    ap_ST_fsm_state3 = 215'd4;
parameter    ap_ST_fsm_state4 = 215'd8;
parameter    ap_ST_fsm_state5 = 215'd16;
parameter    ap_ST_fsm_state6 = 215'd32;
parameter    ap_ST_fsm_state7 = 215'd64;
parameter    ap_ST_fsm_state8 = 215'd128;
parameter    ap_ST_fsm_state9 = 215'd256;
parameter    ap_ST_fsm_state10 = 215'd512;
parameter    ap_ST_fsm_state11 = 215'd1024;
parameter    ap_ST_fsm_state12 = 215'd2048;
parameter    ap_ST_fsm_state13 = 215'd4096;
parameter    ap_ST_fsm_state14 = 215'd8192;
parameter    ap_ST_fsm_state15 = 215'd16384;
parameter    ap_ST_fsm_state16 = 215'd32768;
parameter    ap_ST_fsm_state17 = 215'd65536;
parameter    ap_ST_fsm_state18 = 215'd131072;
parameter    ap_ST_fsm_state19 = 215'd262144;
parameter    ap_ST_fsm_state20 = 215'd524288;
parameter    ap_ST_fsm_state21 = 215'd1048576;
parameter    ap_ST_fsm_state22 = 215'd2097152;
parameter    ap_ST_fsm_state23 = 215'd4194304;
parameter    ap_ST_fsm_state24 = 215'd8388608;
parameter    ap_ST_fsm_state25 = 215'd16777216;
parameter    ap_ST_fsm_state26 = 215'd33554432;
parameter    ap_ST_fsm_state27 = 215'd67108864;
parameter    ap_ST_fsm_state28 = 215'd134217728;
parameter    ap_ST_fsm_state29 = 215'd268435456;
parameter    ap_ST_fsm_state30 = 215'd536870912;
parameter    ap_ST_fsm_state31 = 215'd1073741824;
parameter    ap_ST_fsm_state32 = 215'd2147483648;
parameter    ap_ST_fsm_state33 = 215'd4294967296;
parameter    ap_ST_fsm_state34 = 215'd8589934592;
parameter    ap_ST_fsm_state35 = 215'd17179869184;
parameter    ap_ST_fsm_state36 = 215'd34359738368;
parameter    ap_ST_fsm_state37 = 215'd68719476736;
parameter    ap_ST_fsm_state38 = 215'd137438953472;
parameter    ap_ST_fsm_state39 = 215'd274877906944;
parameter    ap_ST_fsm_state40 = 215'd549755813888;
parameter    ap_ST_fsm_state41 = 215'd1099511627776;
parameter    ap_ST_fsm_state42 = 215'd2199023255552;
parameter    ap_ST_fsm_state43 = 215'd4398046511104;
parameter    ap_ST_fsm_state44 = 215'd8796093022208;
parameter    ap_ST_fsm_state45 = 215'd17592186044416;
parameter    ap_ST_fsm_state46 = 215'd35184372088832;
parameter    ap_ST_fsm_state47 = 215'd70368744177664;
parameter    ap_ST_fsm_state48 = 215'd140737488355328;
parameter    ap_ST_fsm_state49 = 215'd281474976710656;
parameter    ap_ST_fsm_state50 = 215'd562949953421312;
parameter    ap_ST_fsm_state51 = 215'd1125899906842624;
parameter    ap_ST_fsm_state52 = 215'd2251799813685248;
parameter    ap_ST_fsm_state53 = 215'd4503599627370496;
parameter    ap_ST_fsm_state54 = 215'd9007199254740992;
parameter    ap_ST_fsm_state55 = 215'd18014398509481984;
parameter    ap_ST_fsm_state56 = 215'd36028797018963968;
parameter    ap_ST_fsm_state57 = 215'd72057594037927936;
parameter    ap_ST_fsm_state58 = 215'd144115188075855872;
parameter    ap_ST_fsm_state59 = 215'd288230376151711744;
parameter    ap_ST_fsm_state60 = 215'd576460752303423488;
parameter    ap_ST_fsm_state61 = 215'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 215'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 215'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 215'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 215'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 215'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 215'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 215'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 215'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 215'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 215'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 215'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage0 = 215'd4722366482869645213696;
parameter    ap_ST_fsm_state80 = 215'd9444732965739290427392;
parameter    ap_ST_fsm_state81 = 215'd18889465931478580854784;
parameter    ap_ST_fsm_state82 = 215'd37778931862957161709568;
parameter    ap_ST_fsm_state83 = 215'd75557863725914323419136;
parameter    ap_ST_fsm_state84 = 215'd151115727451828646838272;
parameter    ap_ST_fsm_state85 = 215'd302231454903657293676544;
parameter    ap_ST_fsm_state86 = 215'd604462909807314587353088;
parameter    ap_ST_fsm_state87 = 215'd1208925819614629174706176;
parameter    ap_ST_fsm_state88 = 215'd2417851639229258349412352;
parameter    ap_ST_fsm_state89 = 215'd4835703278458516698824704;
parameter    ap_ST_fsm_state90 = 215'd9671406556917033397649408;
parameter    ap_ST_fsm_state91 = 215'd19342813113834066795298816;
parameter    ap_ST_fsm_state92 = 215'd38685626227668133590597632;
parameter    ap_ST_fsm_state93 = 215'd77371252455336267181195264;
parameter    ap_ST_fsm_state94 = 215'd154742504910672534362390528;
parameter    ap_ST_fsm_state95 = 215'd309485009821345068724781056;
parameter    ap_ST_fsm_state96 = 215'd618970019642690137449562112;
parameter    ap_ST_fsm_state97 = 215'd1237940039285380274899124224;
parameter    ap_ST_fsm_state98 = 215'd2475880078570760549798248448;
parameter    ap_ST_fsm_state99 = 215'd4951760157141521099596496896;
parameter    ap_ST_fsm_state100 = 215'd9903520314283042199192993792;
parameter    ap_ST_fsm_state101 = 215'd19807040628566084398385987584;
parameter    ap_ST_fsm_state102 = 215'd39614081257132168796771975168;
parameter    ap_ST_fsm_state103 = 215'd79228162514264337593543950336;
parameter    ap_ST_fsm_state104 = 215'd158456325028528675187087900672;
parameter    ap_ST_fsm_state105 = 215'd316912650057057350374175801344;
parameter    ap_ST_fsm_state106 = 215'd633825300114114700748351602688;
parameter    ap_ST_fsm_state107 = 215'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state108 = 215'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state109 = 215'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state110 = 215'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state111 = 215'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state112 = 215'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state113 = 215'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state114 = 215'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state115 = 215'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state116 = 215'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state117 = 215'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state118 = 215'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state119 = 215'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state120 = 215'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state121 = 215'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state122 = 215'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state123 = 215'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state124 = 215'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state125 = 215'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state126 = 215'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state127 = 215'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state128 = 215'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state129 = 215'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state130 = 215'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state131 = 215'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state132 = 215'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state133 = 215'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state134 = 215'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state135 = 215'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state136 = 215'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state137 = 215'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state138 = 215'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state139 = 215'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state140 = 215'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state141 = 215'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state142 = 215'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state143 = 215'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state144 = 215'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state145 = 215'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state146 = 215'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state147 = 215'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state148 = 215'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state149 = 215'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state150 = 215'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_pp1_stage0 = 215'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state161 = 215'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_pp2_stage0 = 215'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state165 = 215'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state166 = 215'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state167 = 215'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state168 = 215'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state169 = 215'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state170 = 215'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state171 = 215'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state172 = 215'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state173 = 215'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state174 = 215'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state175 = 215'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state176 = 215'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state177 = 215'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state178 = 215'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state179 = 215'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state180 = 215'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state181 = 215'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state182 = 215'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state183 = 215'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state184 = 215'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state185 = 215'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state186 = 215'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state187 = 215'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state188 = 215'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state189 = 215'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state190 = 215'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state191 = 215'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state192 = 215'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state193 = 215'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state194 = 215'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state195 = 215'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state196 = 215'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state197 = 215'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state198 = 215'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state199 = 215'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state200 = 215'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state201 = 215'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state202 = 215'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state203 = 215'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state204 = 215'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state205 = 215'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state206 = 215'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state207 = 215'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state208 = 215'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state209 = 215'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state210 = 215'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state211 = 215'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state212 = 215'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state213 = 215'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state214 = 215'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state215 = 215'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state216 = 215'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state217 = 215'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state218 = 215'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state219 = 215'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state220 = 215'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state221 = 215'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state222 = 215'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state223 = 215'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state224 = 215'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state225 = 215'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state226 = 215'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state227 = 215'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state228 = 215'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state229 = 215'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state230 = 215'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state231 = 215'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state232 = 215'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [214:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] in1;
wire   [63:0] in2;
wire   [63:0] out_r;
wire   [31:0] scalar;
wire   [31:0] array_size;
wire   [31:0] operation_type;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln50_reg_1602;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln75_reg_1872;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state161;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln102_reg_2293;
reg   [0:0] icmp_ln102_reg_2293_pp2_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state232;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [11:0] k_reg_317;
reg   [11:0] k_1_reg_328;
reg   [11:0] k_2_reg_339;
wire   [0:0] icmp_ln41_fu_488_p2;
reg   [0:0] icmp_ln41_reg_1559;
wire   [0:0] icmp_fu_510_p2;
reg   [0:0] icmp_reg_1563;
wire   [17:0] add_ln41_1_fu_536_p2;
reg   [17:0] add_ln41_1_reg_1567;
wire   [17:0] add_ln41_2_fu_542_p2;
reg   [17:0] add_ln41_2_reg_1572;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln50_fu_565_p1;
reg   [63:0] zext_ln50_reg_1580;
wire   [0:0] icmp_ln41_1_fu_548_p2;
reg   [57:0] trunc_ln1_reg_1586;
wire   [11:0] add_ln50_3_fu_594_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state73_pp0_stage0_iter0;
reg    ap_block_state74_pp0_stage0_iter1;
wire    ap_block_state75_pp0_stage0_iter2;
wire    ap_block_state76_pp0_stage0_iter3;
wire    ap_block_state77_pp0_stage0_iter4;
wire    ap_block_state78_pp0_stage0_iter5;
wire    ap_block_state79_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln50_fu_600_p2;
reg   [0:0] icmp_ln50_reg_1602_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1602_pp0_iter2_reg;
reg   [0:0] icmp_ln50_reg_1602_pp0_iter3_reg;
reg   [0:0] icmp_ln50_reg_1602_pp0_iter4_reg;
reg   [0:0] icmp_ln50_reg_1602_pp0_iter5_reg;
wire   [10:0] trunc_ln66_fu_606_p1;
reg   [10:0] trunc_ln66_reg_1606;
reg   [10:0] trunc_ln66_reg_1606_pp0_iter1_reg;
reg   [10:0] trunc_ln66_reg_1606_pp0_iter2_reg;
reg   [10:0] trunc_ln66_reg_1606_pp0_iter3_reg;
reg   [10:0] trunc_ln66_reg_1606_pp0_iter4_reg;
reg   [10:0] trunc_ln66_reg_1606_pp0_iter5_reg;
wire   [31:0] trunc_ln65_fu_610_p1;
reg   [31:0] trunc_ln65_reg_1611;
reg   [31:0] trunc_ln65_1_reg_1616;
reg   [31:0] trunc_ln65_2_reg_1621;
reg   [31:0] trunc_ln65_3_reg_1626;
reg   [31:0] trunc_ln65_4_reg_1631;
reg   [31:0] trunc_ln65_5_reg_1636;
reg   [31:0] trunc_ln65_6_reg_1641;
reg   [31:0] trunc_ln65_7_reg_1646;
reg   [31:0] trunc_ln65_8_reg_1651;
reg   [31:0] trunc_ln65_9_reg_1656;
reg   [31:0] trunc_ln65_s_reg_1661;
reg   [31:0] trunc_ln65_10_reg_1666;
reg   [31:0] trunc_ln65_11_reg_1671;
reg   [31:0] trunc_ln65_12_reg_1676;
reg   [31:0] trunc_ln65_13_reg_1681;
reg   [31:0] trunc_ln65_14_reg_1686;
wire   [31:0] grp_fu_414_p2;
reg   [31:0] mul_i0_reg_1771;
wire   [31:0] grp_fu_418_p2;
reg   [31:0] mul_i1_reg_1776;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] mul_i2_reg_1781;
wire   [31:0] grp_fu_426_p2;
reg   [31:0] mul_i3_reg_1786;
wire   [31:0] grp_fu_430_p2;
reg   [31:0] mul_i4_reg_1791;
wire   [31:0] grp_fu_434_p2;
reg   [31:0] mul_i5_reg_1796;
wire   [31:0] grp_fu_438_p2;
reg   [31:0] mul_i6_reg_1801;
wire   [31:0] grp_fu_442_p2;
reg   [31:0] mul_i7_reg_1806;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] mul_i8_reg_1811;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] mul_i9_reg_1816;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] mul_i_reg_1821;
wire   [31:0] grp_fu_458_p2;
reg   [31:0] mul_i10_reg_1826;
wire   [31:0] grp_fu_462_p2;
reg   [31:0] mul_i11_reg_1831;
wire   [31:0] grp_fu_466_p2;
reg   [31:0] mul_i12_reg_1836;
wire   [31:0] grp_fu_470_p2;
reg   [31:0] mul_i13_reg_1841;
wire   [31:0] grp_fu_474_p2;
reg   [31:0] mul_i14_reg_1846;
wire   [63:0] add_ln50_1_fu_917_p2;
reg   [63:0] add_ln50_1_reg_1851;
wire    ap_CS_fsm_state80;
reg   [57:0] trunc_ln4_reg_1856;
wire   [11:0] add_ln75_fu_945_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state151_pp1_stage0_iter0;
reg    ap_block_state152_pp1_stage0_iter1;
wire    ap_block_state153_pp1_stage0_iter2;
wire    ap_block_state154_pp1_stage0_iter3;
wire    ap_block_state155_pp1_stage0_iter4;
wire    ap_block_state156_pp1_stage0_iter5;
wire    ap_block_state157_pp1_stage0_iter6;
wire    ap_block_state158_pp1_stage0_iter7;
wire    ap_block_state159_pp1_stage0_iter8;
wire    ap_block_state160_pp1_stage0_iter9;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln75_fu_951_p2;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter1_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter2_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter3_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter4_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter5_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter6_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter7_reg;
reg   [0:0] icmp_ln75_reg_1872_pp1_iter8_reg;
reg   [10:0] buffer1_addr_1_reg_1876;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter1_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter2_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter3_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter4_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter5_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter6_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter7_reg;
reg   [10:0] buffer1_addr_1_reg_1876_pp1_iter8_reg;
wire   [31:0] trunc_ln90_fu_962_p1;
reg   [31:0] trunc_ln90_reg_1882;
reg   [31:0] trunc_ln90_1_reg_1887;
reg   [31:0] trunc_ln90_2_reg_1892;
reg   [31:0] trunc_ln90_3_reg_1897;
reg   [31:0] trunc_ln90_4_reg_1902;
reg   [31:0] trunc_ln90_5_reg_1907;
reg   [31:0] trunc_ln90_6_reg_1912;
reg   [31:0] trunc_ln90_7_reg_1917;
reg   [31:0] trunc_ln90_8_reg_1922;
reg   [31:0] trunc_ln90_9_reg_1927;
reg   [31:0] trunc_ln90_s_reg_1932;
reg   [31:0] trunc_ln90_10_reg_1937;
reg   [31:0] trunc_ln90_11_reg_1942;
reg   [31:0] trunc_ln90_12_reg_1947;
reg   [31:0] trunc_ln90_13_reg_1952;
reg   [31:0] trunc_ln90_14_reg_1957;
wire   [31:0] trunc_ln90_15_fu_1116_p1;
reg   [31:0] trunc_ln90_15_reg_1962;
reg   [31:0] trunc_ln90_16_reg_1967;
reg   [31:0] trunc_ln90_17_reg_1972;
reg   [31:0] trunc_ln90_18_reg_1977;
reg   [31:0] trunc_ln90_19_reg_1982;
reg   [31:0] trunc_ln90_20_reg_1987;
reg   [31:0] trunc_ln90_21_reg_1992;
reg   [31:0] trunc_ln90_22_reg_1997;
reg   [31:0] trunc_ln90_23_reg_2002;
reg   [31:0] trunc_ln90_24_reg_2007;
reg   [31:0] trunc_ln90_25_reg_2012;
reg   [31:0] trunc_ln90_26_reg_2017;
reg   [31:0] trunc_ln90_27_reg_2022;
reg   [31:0] trunc_ln90_28_reg_2027;
reg   [31:0] trunc_ln90_29_reg_2032;
reg   [31:0] trunc_ln90_30_reg_2037;
wire   [31:0] grp_fu_350_p2;
reg   [31:0] add36_i0_reg_2202;
wire   [31:0] grp_fu_354_p2;
reg   [31:0] add36_i1_reg_2207;
wire   [31:0] grp_fu_358_p2;
reg   [31:0] add36_i2_reg_2212;
wire   [31:0] grp_fu_362_p2;
reg   [31:0] add36_i3_reg_2217;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] add36_i4_reg_2222;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] add36_i5_reg_2227;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] add36_i6_reg_2232;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] add36_i7_reg_2237;
wire   [31:0] grp_fu_382_p2;
reg   [31:0] add36_i8_reg_2242;
wire   [31:0] grp_fu_386_p2;
reg   [31:0] add36_i9_reg_2247;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] add36_i_reg_2252;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] add36_i10_reg_2257;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] add36_i11_reg_2262;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] add36_i12_reg_2267;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] add36_i13_reg_2272;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] add36_i14_reg_2277;
wire   [11:0] add_ln102_fu_1503_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state162_pp2_stage0_iter0;
wire    ap_block_state163_pp2_stage0_iter1;
wire    ap_block_state164_pp2_stage0_iter2;
reg    ap_block_state164_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln102_fu_1509_p2;
wire   [511:0] buffer1_q1;
reg   [511:0] buffer1_load_1_reg_2302;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state72;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state73;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_CS_fsm_state150;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state151;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state162;
reg   [10:0] buffer1_address0;
reg    buffer1_ce0;
reg    buffer1_we0;
reg   [511:0] buffer1_d0;
reg   [10:0] buffer1_address1;
reg    buffer1_ce1;
reg   [17:0] indvar_reg_306;
reg    ap_block_state1;
wire   [63:0] zext_ln66_fu_913_p1;
wire   [63:0] k_1_cast_fu_957_p1;
wire   [63:0] k_2_cast_cast_fu_1519_p1;
wire  signed [63:0] sext_ln50_fu_584_p1;
wire  signed [63:0] sext_ln75_fu_935_p1;
wire   [63:0] sext_ln102_fu_1492_p1;
wire    ap_block_pp2_stage0_01001;
wire   [511:0] tmp_fu_876_p17;
wire   [511:0] or_ln91_s_fu_1446_p17;
wire   [31:0] grp_fu_350_p0;
wire   [31:0] grp_fu_350_p1;
wire   [31:0] grp_fu_354_p0;
wire   [31:0] grp_fu_354_p1;
wire   [31:0] grp_fu_358_p0;
wire   [31:0] grp_fu_358_p1;
wire   [31:0] grp_fu_362_p0;
wire   [31:0] grp_fu_362_p1;
wire   [31:0] grp_fu_366_p0;
wire   [31:0] grp_fu_366_p1;
wire   [31:0] grp_fu_370_p0;
wire   [31:0] grp_fu_370_p1;
wire   [31:0] grp_fu_374_p0;
wire   [31:0] grp_fu_374_p1;
wire   [31:0] grp_fu_378_p0;
wire   [31:0] grp_fu_378_p1;
wire   [31:0] grp_fu_382_p0;
wire   [31:0] grp_fu_382_p1;
wire   [31:0] grp_fu_386_p0;
wire   [31:0] grp_fu_386_p1;
wire   [31:0] grp_fu_390_p0;
wire   [31:0] grp_fu_390_p1;
wire   [31:0] grp_fu_394_p0;
wire   [31:0] grp_fu_394_p1;
wire   [31:0] grp_fu_398_p0;
wire   [31:0] grp_fu_398_p1;
wire   [31:0] grp_fu_402_p0;
wire   [31:0] grp_fu_402_p1;
wire   [31:0] grp_fu_406_p0;
wire   [31:0] grp_fu_406_p1;
wire   [31:0] grp_fu_410_p0;
wire   [31:0] grp_fu_410_p1;
wire   [31:0] grp_fu_414_p0;
wire   [31:0] grp_fu_418_p0;
wire   [31:0] grp_fu_422_p0;
wire   [31:0] grp_fu_426_p0;
wire   [31:0] grp_fu_430_p0;
wire   [31:0] grp_fu_434_p0;
wire   [31:0] grp_fu_438_p0;
wire   [31:0] grp_fu_442_p0;
wire   [31:0] grp_fu_446_p0;
wire   [31:0] grp_fu_450_p0;
wire   [31:0] grp_fu_454_p0;
wire   [31:0] grp_fu_458_p0;
wire   [31:0] grp_fu_462_p0;
wire   [31:0] grp_fu_466_p0;
wire   [31:0] grp_fu_470_p0;
wire   [31:0] grp_fu_474_p0;
wire   [27:0] trunc_ln_fu_478_p4;
wire   [31:0] operation_type_off_fu_494_p2;
wire   [30:0] tmp_1_fu_500_p4;
wire   [27:0] add_ln41_fu_516_p2;
wire   [16:0] trunc_ln41_1_fu_522_p4;
wire   [17:0] zext_ln41_fu_532_p1;
wire   [16:0] trunc_ln50_fu_553_p1;
wire   [33:0] shl_ln_fu_557_p3;
wire   [63:0] add_ln50_fu_569_p2;
wire   [31:0] empty_41_fu_873_p1;
wire   [31:0] empty_40_fu_870_p1;
wire   [31:0] empty_39_fu_867_p1;
wire   [31:0] empty_38_fu_864_p1;
wire   [31:0] empty_37_fu_861_p1;
wire   [31:0] empty_36_fu_858_p1;
wire   [31:0] empty_35_fu_855_p1;
wire   [31:0] empty_34_fu_852_p1;
wire   [31:0] empty_33_fu_849_p1;
wire   [31:0] empty_32_fu_846_p1;
wire   [31:0] empty_31_fu_843_p1;
wire   [31:0] empty_30_fu_840_p1;
wire   [31:0] empty_29_fu_837_p1;
wire   [31:0] empty_28_fu_834_p1;
wire   [31:0] empty_27_fu_831_p1;
wire   [31:0] empty_26_fu_828_p1;
wire   [63:0] add_ln50_2_fu_921_p2;
wire   [31:0] bitcast_ln91_15_fu_1443_p1;
wire   [31:0] bitcast_ln91_14_fu_1440_p1;
wire   [31:0] bitcast_ln91_13_fu_1437_p1;
wire   [31:0] bitcast_ln91_12_fu_1434_p1;
wire   [31:0] bitcast_ln91_11_fu_1431_p1;
wire   [31:0] bitcast_ln91_10_fu_1428_p1;
wire   [31:0] bitcast_ln91_9_fu_1425_p1;
wire   [31:0] bitcast_ln91_8_fu_1422_p1;
wire   [31:0] bitcast_ln91_7_fu_1419_p1;
wire   [31:0] bitcast_ln91_6_fu_1416_p1;
wire   [31:0] bitcast_ln91_5_fu_1413_p1;
wire   [31:0] bitcast_ln91_4_fu_1410_p1;
wire   [31:0] bitcast_ln91_3_fu_1407_p1;
wire   [31:0] bitcast_ln91_2_fu_1404_p1;
wire   [31:0] bitcast_ln91_1_fu_1401_p1;
wire   [31:0] bitcast_ln91_fu_1398_p1;
wire   [57:0] trunc_ln6_fu_1483_p4;
wire   [10:0] empty_46_fu_1515_p1;
reg    grp_fu_350_ce;
reg    grp_fu_354_ce;
reg    grp_fu_358_ce;
reg    grp_fu_362_ce;
reg    grp_fu_366_ce;
reg    grp_fu_370_ce;
reg    grp_fu_374_ce;
reg    grp_fu_378_ce;
reg    grp_fu_382_ce;
reg    grp_fu_386_ce;
reg    grp_fu_390_ce;
reg    grp_fu_394_ce;
reg    grp_fu_398_ce;
reg    grp_fu_402_ce;
reg    grp_fu_406_ce;
reg    grp_fu_410_ce;
reg    grp_fu_414_ce;
reg    grp_fu_418_ce;
reg    grp_fu_422_ce;
reg    grp_fu_426_ce;
reg    grp_fu_430_ce;
reg    grp_fu_434_ce;
reg    grp_fu_438_ce;
reg    grp_fu_442_ce;
reg    grp_fu_446_ce;
reg    grp_fu_450_ce;
reg    grp_fu_454_ce;
reg    grp_fu_458_ce;
reg    grp_fu_462_ce;
reg    grp_fu_466_ce;
reg    grp_fu_470_ce;
reg    grp_fu_474_ce;
reg   [214:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 215'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
end

calc_0_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .scalar(scalar),
    .array_size(array_size),
    .operation_type(operation_type),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

calc_0_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 32 ),
    .MAX_WRITE_BURST_LENGTH( 32 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2048),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(sext_ln102_fu_1492_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd2048),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(buffer1_load_1_reg_2302),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd18446744073709551615),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

calc_0_buffer1 #(
    .DataWidth( 512 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
buffer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer1_address0),
    .ce0(buffer1_ce0),
    .we0(buffer1_we0),
    .d0(buffer1_d0),
    .address1(buffer1_address1),
    .ce1(buffer1_ce1),
    .q1(buffer1_q1)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_354_p0),
    .din1(grp_fu_354_p1),
    .ce(grp_fu_354_ce),
    .dout(grp_fu_354_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_358_p0),
    .din1(grp_fu_358_p1),
    .ce(grp_fu_358_ce),
    .dout(grp_fu_358_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_362_p0),
    .din1(grp_fu_362_p1),
    .ce(grp_fu_362_ce),
    .dout(grp_fu_362_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_366_p0),
    .din1(grp_fu_366_p1),
    .ce(grp_fu_366_ce),
    .dout(grp_fu_366_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_370_p0),
    .din1(grp_fu_370_p1),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .ce(grp_fu_378_ce),
    .dout(grp_fu_378_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_382_p0),
    .din1(grp_fu_382_p1),
    .ce(grp_fu_382_ce),
    .dout(grp_fu_382_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .ce(grp_fu_386_ce),
    .dout(grp_fu_386_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_390_p0),
    .din1(grp_fu_390_p1),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .ce(grp_fu_394_ce),
    .dout(grp_fu_394_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_398_p0),
    .din1(grp_fu_398_p1),
    .ce(grp_fu_398_ce),
    .dout(grp_fu_398_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_402_p0),
    .din1(grp_fu_402_p1),
    .ce(grp_fu_402_ce),
    .dout(grp_fu_402_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(grp_fu_406_ce),
    .dout(grp_fu_406_p2)
);

calc_0_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_410_p0),
    .din1(grp_fu_410_p1),
    .ce(grp_fu_410_ce),
    .dout(grp_fu_410_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_414_p0),
    .din1(scalar),
    .ce(grp_fu_414_ce),
    .dout(grp_fu_414_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_418_p0),
    .din1(scalar),
    .ce(grp_fu_418_ce),
    .dout(grp_fu_418_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_422_p0),
    .din1(scalar),
    .ce(grp_fu_422_ce),
    .dout(grp_fu_422_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_426_p0),
    .din1(scalar),
    .ce(grp_fu_426_ce),
    .dout(grp_fu_426_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_430_p0),
    .din1(scalar),
    .ce(grp_fu_430_ce),
    .dout(grp_fu_430_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_434_p0),
    .din1(scalar),
    .ce(grp_fu_434_ce),
    .dout(grp_fu_434_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_438_p0),
    .din1(scalar),
    .ce(grp_fu_438_ce),
    .dout(grp_fu_438_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_442_p0),
    .din1(scalar),
    .ce(grp_fu_442_ce),
    .dout(grp_fu_442_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_446_p0),
    .din1(scalar),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_450_p0),
    .din1(scalar),
    .ce(grp_fu_450_ce),
    .dout(grp_fu_450_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_454_p0),
    .din1(scalar),
    .ce(grp_fu_454_ce),
    .dout(grp_fu_454_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_458_p0),
    .din1(scalar),
    .ce(grp_fu_458_ce),
    .dout(grp_fu_458_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_462_p0),
    .din1(scalar),
    .ce(grp_fu_462_ce),
    .dout(grp_fu_462_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_466_p0),
    .din1(scalar),
    .ce(grp_fu_466_ce),
    .dout(grp_fu_466_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_470_p0),
    .din1(scalar),
    .ce(grp_fu_470_ce),
    .dout(grp_fu_470_p2)
);

calc_0_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_474_p0),
    .din1(scalar),
    .ce(grp_fu_474_ce),
    .dout(grp_fu_474_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln41_1_fu_548_p2 == 1'd1) | (icmp_ln41_reg_1559 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state73))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state73)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state73);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state151))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state150)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state151)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state151);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end else if ((1'b1 == ap_CS_fsm_state150)) begin
            ap_enable_reg_pp1_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state162) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state162)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state162);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state232))) begin
        indvar_reg_306 <= add_ln41_2_reg_1572;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln41_fu_488_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_reg_306 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_951_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_1_reg_328 <= add_ln75_fu_945_p2;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        k_1_reg_328 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln102_fu_1509_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        k_2_reg_339 <= add_ln102_fu_1503_p2;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
        k_2_reg_339 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_600_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_317 <= add_ln50_3_fu_594_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        k_reg_317 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1872_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add36_i0_reg_2202 <= grp_fu_350_p2;
        add36_i10_reg_2257 <= grp_fu_394_p2;
        add36_i11_reg_2262 <= grp_fu_398_p2;
        add36_i12_reg_2267 <= grp_fu_402_p2;
        add36_i13_reg_2272 <= grp_fu_406_p2;
        add36_i14_reg_2277 <= grp_fu_410_p2;
        add36_i1_reg_2207 <= grp_fu_354_p2;
        add36_i2_reg_2212 <= grp_fu_358_p2;
        add36_i3_reg_2217 <= grp_fu_362_p2;
        add36_i4_reg_2222 <= grp_fu_366_p2;
        add36_i5_reg_2227 <= grp_fu_370_p2;
        add36_i6_reg_2232 <= grp_fu_374_p2;
        add36_i7_reg_2237 <= grp_fu_378_p2;
        add36_i8_reg_2242 <= grp_fu_382_p2;
        add36_i9_reg_2247 <= grp_fu_386_p2;
        add36_i_reg_2252 <= grp_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_488_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln41_1_reg_1567 <= add_ln41_1_fu_536_p2;
        icmp_reg_1563 <= icmp_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_1559 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln41_2_reg_1572 <= add_ln41_2_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        add_ln50_1_reg_1851 <= add_ln50_1_fu_917_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_951_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer1_addr_1_reg_1876 <= k_1_cast_fu_957_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer1_addr_1_reg_1876_pp1_iter1_reg <= buffer1_addr_1_reg_1876;
        icmp_ln75_reg_1872 <= icmp_ln75_fu_951_p2;
        icmp_ln75_reg_1872_pp1_iter1_reg <= icmp_ln75_reg_1872;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        buffer1_addr_1_reg_1876_pp1_iter2_reg <= buffer1_addr_1_reg_1876_pp1_iter1_reg;
        buffer1_addr_1_reg_1876_pp1_iter3_reg <= buffer1_addr_1_reg_1876_pp1_iter2_reg;
        buffer1_addr_1_reg_1876_pp1_iter4_reg <= buffer1_addr_1_reg_1876_pp1_iter3_reg;
        buffer1_addr_1_reg_1876_pp1_iter5_reg <= buffer1_addr_1_reg_1876_pp1_iter4_reg;
        buffer1_addr_1_reg_1876_pp1_iter6_reg <= buffer1_addr_1_reg_1876_pp1_iter5_reg;
        buffer1_addr_1_reg_1876_pp1_iter7_reg <= buffer1_addr_1_reg_1876_pp1_iter6_reg;
        buffer1_addr_1_reg_1876_pp1_iter8_reg <= buffer1_addr_1_reg_1876_pp1_iter7_reg;
        icmp_ln75_reg_1872_pp1_iter2_reg <= icmp_ln75_reg_1872_pp1_iter1_reg;
        icmp_ln75_reg_1872_pp1_iter3_reg <= icmp_ln75_reg_1872_pp1_iter2_reg;
        icmp_ln75_reg_1872_pp1_iter4_reg <= icmp_ln75_reg_1872_pp1_iter3_reg;
        icmp_ln75_reg_1872_pp1_iter5_reg <= icmp_ln75_reg_1872_pp1_iter4_reg;
        icmp_ln75_reg_1872_pp1_iter6_reg <= icmp_ln75_reg_1872_pp1_iter5_reg;
        icmp_ln75_reg_1872_pp1_iter7_reg <= icmp_ln75_reg_1872_pp1_iter6_reg;
        icmp_ln75_reg_1872_pp1_iter8_reg <= icmp_ln75_reg_1872_pp1_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_reg_2293 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        buffer1_load_1_reg_2302 <= buffer1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln102_reg_2293 <= icmp_ln102_fu_1509_p2;
        icmp_ln102_reg_2293_pp2_iter1_reg <= icmp_ln102_reg_2293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln41_reg_1559 <= icmp_ln41_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_1602 <= icmp_ln50_fu_600_p2;
        icmp_ln50_reg_1602_pp0_iter1_reg <= icmp_ln50_reg_1602;
        trunc_ln66_reg_1606_pp0_iter1_reg <= trunc_ln66_reg_1606;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln50_reg_1602_pp0_iter2_reg <= icmp_ln50_reg_1602_pp0_iter1_reg;
        icmp_ln50_reg_1602_pp0_iter3_reg <= icmp_ln50_reg_1602_pp0_iter2_reg;
        icmp_ln50_reg_1602_pp0_iter4_reg <= icmp_ln50_reg_1602_pp0_iter3_reg;
        icmp_ln50_reg_1602_pp0_iter5_reg <= icmp_ln50_reg_1602_pp0_iter4_reg;
        trunc_ln66_reg_1606_pp0_iter2_reg <= trunc_ln66_reg_1606_pp0_iter1_reg;
        trunc_ln66_reg_1606_pp0_iter3_reg <= trunc_ln66_reg_1606_pp0_iter2_reg;
        trunc_ln66_reg_1606_pp0_iter4_reg <= trunc_ln66_reg_1606_pp0_iter3_reg;
        trunc_ln66_reg_1606_pp0_iter5_reg <= trunc_ln66_reg_1606_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1602_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_i0_reg_1771 <= grp_fu_414_p2;
        mul_i10_reg_1826 <= grp_fu_458_p2;
        mul_i11_reg_1831 <= grp_fu_462_p2;
        mul_i12_reg_1836 <= grp_fu_466_p2;
        mul_i13_reg_1841 <= grp_fu_470_p2;
        mul_i14_reg_1846 <= grp_fu_474_p2;
        mul_i1_reg_1776 <= grp_fu_418_p2;
        mul_i2_reg_1781 <= grp_fu_422_p2;
        mul_i3_reg_1786 <= grp_fu_426_p2;
        mul_i4_reg_1791 <= grp_fu_430_p2;
        mul_i5_reg_1796 <= grp_fu_434_p2;
        mul_i6_reg_1801 <= grp_fu_438_p2;
        mul_i7_reg_1806 <= grp_fu_442_p2;
        mul_i8_reg_1811 <= grp_fu_446_p2;
        mul_i9_reg_1816 <= grp_fu_450_p2;
        mul_i_reg_1821 <= grp_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_1_fu_548_p2 == 1'd0) & (icmp_ln41_reg_1559 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln1_reg_1586 <= {{add_ln50_fu_569_p2[63:6]}};
        zext_ln50_reg_1580[33 : 17] <= zext_ln50_fu_565_p1[33 : 17];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_reg_1563 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        trunc_ln4_reg_1856 <= {{add_ln50_2_fu_921_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1602 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln65_10_reg_1666 <= {{gmem_RDATA[383:352]}};
        trunc_ln65_11_reg_1671 <= {{gmem_RDATA[415:384]}};
        trunc_ln65_12_reg_1676 <= {{gmem_RDATA[447:416]}};
        trunc_ln65_13_reg_1681 <= {{gmem_RDATA[479:448]}};
        trunc_ln65_14_reg_1686 <= {{gmem_RDATA[511:480]}};
        trunc_ln65_1_reg_1616 <= {{gmem_RDATA[63:32]}};
        trunc_ln65_2_reg_1621 <= {{gmem_RDATA[95:64]}};
        trunc_ln65_3_reg_1626 <= {{gmem_RDATA[127:96]}};
        trunc_ln65_4_reg_1631 <= {{gmem_RDATA[159:128]}};
        trunc_ln65_5_reg_1636 <= {{gmem_RDATA[191:160]}};
        trunc_ln65_6_reg_1641 <= {{gmem_RDATA[223:192]}};
        trunc_ln65_7_reg_1646 <= {{gmem_RDATA[255:224]}};
        trunc_ln65_8_reg_1651 <= {{gmem_RDATA[287:256]}};
        trunc_ln65_9_reg_1656 <= {{gmem_RDATA[319:288]}};
        trunc_ln65_reg_1611 <= trunc_ln65_fu_610_p1;
        trunc_ln65_s_reg_1661 <= {{gmem_RDATA[351:320]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_600_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln66_reg_1606 <= trunc_ln66_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1872 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        trunc_ln90_10_reg_1937 <= {{gmem_RDATA[383:352]}};
        trunc_ln90_11_reg_1942 <= {{gmem_RDATA[415:384]}};
        trunc_ln90_12_reg_1947 <= {{gmem_RDATA[447:416]}};
        trunc_ln90_13_reg_1952 <= {{gmem_RDATA[479:448]}};
        trunc_ln90_14_reg_1957 <= {{gmem_RDATA[511:480]}};
        trunc_ln90_15_reg_1962 <= trunc_ln90_15_fu_1116_p1;
        trunc_ln90_16_reg_1967 <= {{buffer1_q1[63:32]}};
        trunc_ln90_17_reg_1972 <= {{buffer1_q1[95:64]}};
        trunc_ln90_18_reg_1977 <= {{buffer1_q1[127:96]}};
        trunc_ln90_19_reg_1982 <= {{buffer1_q1[159:128]}};
        trunc_ln90_1_reg_1887 <= {{gmem_RDATA[63:32]}};
        trunc_ln90_20_reg_1987 <= {{buffer1_q1[191:160]}};
        trunc_ln90_21_reg_1992 <= {{buffer1_q1[223:192]}};
        trunc_ln90_22_reg_1997 <= {{buffer1_q1[255:224]}};
        trunc_ln90_23_reg_2002 <= {{buffer1_q1[287:256]}};
        trunc_ln90_24_reg_2007 <= {{buffer1_q1[319:288]}};
        trunc_ln90_25_reg_2012 <= {{buffer1_q1[351:320]}};
        trunc_ln90_26_reg_2017 <= {{buffer1_q1[383:352]}};
        trunc_ln90_27_reg_2022 <= {{buffer1_q1[415:384]}};
        trunc_ln90_28_reg_2027 <= {{buffer1_q1[447:416]}};
        trunc_ln90_29_reg_2032 <= {{buffer1_q1[479:448]}};
        trunc_ln90_2_reg_1892 <= {{gmem_RDATA[95:64]}};
        trunc_ln90_30_reg_2037 <= {{buffer1_q1[511:480]}};
        trunc_ln90_3_reg_1897 <= {{gmem_RDATA[127:96]}};
        trunc_ln90_4_reg_1902 <= {{gmem_RDATA[159:128]}};
        trunc_ln90_5_reg_1907 <= {{gmem_RDATA[191:160]}};
        trunc_ln90_6_reg_1912 <= {{gmem_RDATA[223:192]}};
        trunc_ln90_7_reg_1917 <= {{gmem_RDATA[255:224]}};
        trunc_ln90_8_reg_1922 <= {{gmem_RDATA[287:256]}};
        trunc_ln90_9_reg_1927 <= {{gmem_RDATA[319:288]}};
        trunc_ln90_reg_1882 <= trunc_ln90_fu_962_p1;
        trunc_ln90_s_reg_1932 <= {{gmem_RDATA[351:320]}};
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_600_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_951_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state151 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state151 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln102_fu_1509_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state162 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state162 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln41_1_fu_548_p2 == 1'd1) | (icmp_ln41_reg_1559 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln41_1_fu_548_p2 == 1'd1) | (icmp_ln41_reg_1559 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        buffer1_address0 = buffer1_addr_1_reg_1876_pp1_iter8_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        buffer1_address0 = zext_ln66_fu_913_p1;
    end else begin
        buffer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        buffer1_address1 = k_2_cast_cast_fu_1519_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer1_address1 = k_1_cast_fu_957_p1;
    end else begin
        buffer1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        buffer1_ce0 = 1'b1;
    end else begin
        buffer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        buffer1_ce1 = 1'b1;
    end else begin
        buffer1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        buffer1_d0 = or_ln91_s_fu_1446_p17;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        buffer1_d0 = tmp_fu_876_p17;
    end else begin
        buffer1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln75_reg_1872_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((icmp_ln50_reg_1602_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        buffer1_we0 = 1'b1;
    end else begin
        buffer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state81)) begin
            gmem_ARADDR = sext_ln75_fu_935_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = sext_ln50_fu_584_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state232))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln75_reg_1872 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln50_reg_1602 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_2293_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln75_reg_1872 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln50_reg_1602 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_2293_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_354_ce = 1'b1;
    end else begin
        grp_fu_354_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_358_ce = 1'b1;
    end else begin
        grp_fu_358_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_362_ce = 1'b1;
    end else begin
        grp_fu_362_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_366_ce = 1'b1;
    end else begin
        grp_fu_366_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_378_ce = 1'b1;
    end else begin
        grp_fu_378_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_382_ce = 1'b1;
    end else begin
        grp_fu_382_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_386_ce = 1'b1;
    end else begin
        grp_fu_386_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_394_ce = 1'b1;
    end else begin
        grp_fu_394_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_398_ce = 1'b1;
    end else begin
        grp_fu_398_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_402_ce = 1'b1;
    end else begin
        grp_fu_402_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_406_ce = 1'b1;
    end else begin
        grp_fu_406_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_410_ce = 1'b1;
    end else begin
        grp_fu_410_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_414_ce = 1'b1;
    end else begin
        grp_fu_414_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_418_ce = 1'b1;
    end else begin
        grp_fu_418_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_422_ce = 1'b1;
    end else begin
        grp_fu_422_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_426_ce = 1'b1;
    end else begin
        grp_fu_426_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_430_ce = 1'b1;
    end else begin
        grp_fu_430_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_434_ce = 1'b1;
    end else begin
        grp_fu_434_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_438_ce = 1'b1;
    end else begin
        grp_fu_438_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_442_ce = 1'b1;
    end else begin
        grp_fu_442_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_450_ce = 1'b1;
    end else begin
        grp_fu_450_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_454_ce = 1'b1;
    end else begin
        grp_fu_454_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_458_ce = 1'b1;
    end else begin
        grp_fu_458_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_462_ce = 1'b1;
    end else begin
        grp_fu_462_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_466_ce = 1'b1;
    end else begin
        grp_fu_466_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_470_ce = 1'b1;
    end else begin
        grp_fu_470_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_474_ce = 1'b1;
    end else begin
        grp_fu_474_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln41_1_fu_548_p2 == 1'd1) | (icmp_ln41_reg_1559 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln50_fu_600_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln50_fu_600_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_reg_1563 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln75_fu_951_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1) & (ap_enable_reg_pp1_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln75_fu_951_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1) & (ap_enable_reg_pp1_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state161 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln102_fu_1509_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln102_fu_1509_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state232))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state232;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_1503_p2 = (k_2_reg_339 + 12'd1);

assign add_ln41_1_fu_536_p2 = (zext_ln41_fu_532_p1 + 18'd1);

assign add_ln41_2_fu_542_p2 = (indvar_reg_306 + 18'd1);

assign add_ln41_fu_516_p2 = ($signed(trunc_ln_fu_478_p4) + $signed(28'd268435455));

assign add_ln50_1_fu_917_p2 = (zext_ln50_reg_1580 + out_r);

assign add_ln50_2_fu_921_p2 = (zext_ln50_reg_1580 + in2);

assign add_ln50_3_fu_594_p2 = (k_reg_317 + 12'd1);

assign add_ln50_fu_569_p2 = (zext_ln50_fu_565_p1 + in1);

assign add_ln75_fu_945_p2 = (k_1_reg_328 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd74];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_1602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_1602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln75_reg_1872 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln75_reg_1872 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_block_state164_io));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_block_state164_io));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state151_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state152_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln75_reg_1872 == 1'd0));
end

assign ap_block_state153_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state154_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state164_io = ((gmem_WREADY == 1'b0) & (icmp_ln102_reg_2293_pp2_iter1_reg == 1'd0));
end

assign ap_block_state164_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_1602 == 1'd0));
end

assign ap_block_state75_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln91_10_fu_1428_p1 = add36_i_reg_2252;

assign bitcast_ln91_11_fu_1431_p1 = add36_i10_reg_2257;

assign bitcast_ln91_12_fu_1434_p1 = add36_i11_reg_2262;

assign bitcast_ln91_13_fu_1437_p1 = add36_i12_reg_2267;

assign bitcast_ln91_14_fu_1440_p1 = add36_i13_reg_2272;

assign bitcast_ln91_15_fu_1443_p1 = add36_i14_reg_2277;

assign bitcast_ln91_1_fu_1401_p1 = add36_i1_reg_2207;

assign bitcast_ln91_2_fu_1404_p1 = add36_i2_reg_2212;

assign bitcast_ln91_3_fu_1407_p1 = add36_i3_reg_2217;

assign bitcast_ln91_4_fu_1410_p1 = add36_i4_reg_2222;

assign bitcast_ln91_5_fu_1413_p1 = add36_i5_reg_2227;

assign bitcast_ln91_6_fu_1416_p1 = add36_i6_reg_2232;

assign bitcast_ln91_7_fu_1419_p1 = add36_i7_reg_2237;

assign bitcast_ln91_8_fu_1422_p1 = add36_i8_reg_2242;

assign bitcast_ln91_9_fu_1425_p1 = add36_i9_reg_2247;

assign bitcast_ln91_fu_1398_p1 = add36_i0_reg_2202;

assign empty_26_fu_828_p1 = mul_i0_reg_1771;

assign empty_27_fu_831_p1 = mul_i1_reg_1776;

assign empty_28_fu_834_p1 = mul_i2_reg_1781;

assign empty_29_fu_837_p1 = mul_i3_reg_1786;

assign empty_30_fu_840_p1 = mul_i4_reg_1791;

assign empty_31_fu_843_p1 = mul_i5_reg_1796;

assign empty_32_fu_846_p1 = mul_i6_reg_1801;

assign empty_33_fu_849_p1 = mul_i7_reg_1806;

assign empty_34_fu_852_p1 = mul_i8_reg_1811;

assign empty_35_fu_855_p1 = mul_i9_reg_1816;

assign empty_36_fu_858_p1 = mul_i_reg_1821;

assign empty_37_fu_861_p1 = mul_i10_reg_1826;

assign empty_38_fu_864_p1 = mul_i11_reg_1831;

assign empty_39_fu_867_p1 = mul_i12_reg_1836;

assign empty_40_fu_870_p1 = mul_i13_reg_1841;

assign empty_41_fu_873_p1 = mul_i14_reg_1846;

assign empty_46_fu_1515_p1 = k_2_reg_339[10:0];

assign grp_fu_350_p0 = trunc_ln90_15_reg_1962;

assign grp_fu_350_p1 = trunc_ln90_reg_1882;

assign grp_fu_354_p0 = trunc_ln90_16_reg_1967;

assign grp_fu_354_p1 = trunc_ln90_1_reg_1887;

assign grp_fu_358_p0 = trunc_ln90_17_reg_1972;

assign grp_fu_358_p1 = trunc_ln90_2_reg_1892;

assign grp_fu_362_p0 = trunc_ln90_18_reg_1977;

assign grp_fu_362_p1 = trunc_ln90_3_reg_1897;

assign grp_fu_366_p0 = trunc_ln90_19_reg_1982;

assign grp_fu_366_p1 = trunc_ln90_4_reg_1902;

assign grp_fu_370_p0 = trunc_ln90_20_reg_1987;

assign grp_fu_370_p1 = trunc_ln90_5_reg_1907;

assign grp_fu_374_p0 = trunc_ln90_21_reg_1992;

assign grp_fu_374_p1 = trunc_ln90_6_reg_1912;

assign grp_fu_378_p0 = trunc_ln90_22_reg_1997;

assign grp_fu_378_p1 = trunc_ln90_7_reg_1917;

assign grp_fu_382_p0 = trunc_ln90_23_reg_2002;

assign grp_fu_382_p1 = trunc_ln90_8_reg_1922;

assign grp_fu_386_p0 = trunc_ln90_24_reg_2007;

assign grp_fu_386_p1 = trunc_ln90_9_reg_1927;

assign grp_fu_390_p0 = trunc_ln90_25_reg_2012;

assign grp_fu_390_p1 = trunc_ln90_s_reg_1932;

assign grp_fu_394_p0 = trunc_ln90_26_reg_2017;

assign grp_fu_394_p1 = trunc_ln90_10_reg_1937;

assign grp_fu_398_p0 = trunc_ln90_27_reg_2022;

assign grp_fu_398_p1 = trunc_ln90_11_reg_1942;

assign grp_fu_402_p0 = trunc_ln90_28_reg_2027;

assign grp_fu_402_p1 = trunc_ln90_12_reg_1947;

assign grp_fu_406_p0 = trunc_ln90_29_reg_2032;

assign grp_fu_406_p1 = trunc_ln90_13_reg_1952;

assign grp_fu_410_p0 = trunc_ln90_30_reg_2037;

assign grp_fu_410_p1 = trunc_ln90_14_reg_1957;

assign grp_fu_414_p0 = trunc_ln65_reg_1611;

assign grp_fu_418_p0 = trunc_ln65_1_reg_1616;

assign grp_fu_422_p0 = trunc_ln65_2_reg_1621;

assign grp_fu_426_p0 = trunc_ln65_3_reg_1626;

assign grp_fu_430_p0 = trunc_ln65_4_reg_1631;

assign grp_fu_434_p0 = trunc_ln65_5_reg_1636;

assign grp_fu_438_p0 = trunc_ln65_6_reg_1641;

assign grp_fu_442_p0 = trunc_ln65_7_reg_1646;

assign grp_fu_446_p0 = trunc_ln65_8_reg_1651;

assign grp_fu_450_p0 = trunc_ln65_9_reg_1656;

assign grp_fu_454_p0 = trunc_ln65_s_reg_1661;

assign grp_fu_458_p0 = trunc_ln65_10_reg_1666;

assign grp_fu_462_p0 = trunc_ln65_11_reg_1671;

assign grp_fu_466_p0 = trunc_ln65_12_reg_1676;

assign grp_fu_470_p0 = trunc_ln65_13_reg_1681;

assign grp_fu_474_p0 = trunc_ln65_14_reg_1686;

assign icmp_fu_510_p2 = ((tmp_1_fu_500_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_1509_p2 = ((k_2_reg_339 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_548_p2 = ((indvar_reg_306 == add_ln41_1_reg_1567) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_488_p2 = ((trunc_ln_fu_478_p4 == 28'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_600_p2 = ((k_reg_317 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_951_p2 = ((k_1_reg_328 == 12'd2048) ? 1'b1 : 1'b0);

assign k_1_cast_fu_957_p1 = k_1_reg_328;

assign k_2_cast_cast_fu_1519_p1 = empty_46_fu_1515_p1;

assign operation_type_off_fu_494_p2 = ($signed(operation_type) + $signed(32'd4294967294));

assign or_ln91_s_fu_1446_p17 = {{{{{{{{{{{{{{{{bitcast_ln91_15_fu_1443_p1}, {bitcast_ln91_14_fu_1440_p1}}, {bitcast_ln91_13_fu_1437_p1}}, {bitcast_ln91_12_fu_1434_p1}}, {bitcast_ln91_11_fu_1431_p1}}, {bitcast_ln91_10_fu_1428_p1}}, {bitcast_ln91_9_fu_1425_p1}}, {bitcast_ln91_8_fu_1422_p1}}, {bitcast_ln91_7_fu_1419_p1}}, {bitcast_ln91_6_fu_1416_p1}}, {bitcast_ln91_5_fu_1413_p1}}, {bitcast_ln91_4_fu_1410_p1}}, {bitcast_ln91_3_fu_1407_p1}}, {bitcast_ln91_2_fu_1404_p1}}, {bitcast_ln91_1_fu_1401_p1}}, {bitcast_ln91_fu_1398_p1}};

assign sext_ln102_fu_1492_p1 = $signed(trunc_ln6_fu_1483_p4);

assign sext_ln50_fu_584_p1 = $signed(trunc_ln1_reg_1586);

assign sext_ln75_fu_935_p1 = $signed(trunc_ln4_reg_1856);

assign shl_ln_fu_557_p3 = {{trunc_ln50_fu_553_p1}, {17'd0}};

assign tmp_1_fu_500_p4 = {{operation_type_off_fu_494_p2[31:1]}};

assign tmp_fu_876_p17 = {{{{{{{{{{{{{{{{empty_41_fu_873_p1}, {empty_40_fu_870_p1}}, {empty_39_fu_867_p1}}, {empty_38_fu_864_p1}}, {empty_37_fu_861_p1}}, {empty_36_fu_858_p1}}, {empty_35_fu_855_p1}}, {empty_34_fu_852_p1}}, {empty_33_fu_849_p1}}, {empty_32_fu_846_p1}}, {empty_31_fu_843_p1}}, {empty_30_fu_840_p1}}, {empty_29_fu_837_p1}}, {empty_28_fu_834_p1}}, {empty_27_fu_831_p1}}, {empty_26_fu_828_p1}};

assign trunc_ln41_1_fu_522_p4 = {{add_ln41_fu_516_p2[27:11]}};

assign trunc_ln50_fu_553_p1 = indvar_reg_306[16:0];

assign trunc_ln65_fu_610_p1 = gmem_RDATA[31:0];

assign trunc_ln66_fu_606_p1 = k_reg_317[10:0];

assign trunc_ln6_fu_1483_p4 = {{add_ln50_1_reg_1851[63:6]}};

assign trunc_ln90_15_fu_1116_p1 = buffer1_q1[31:0];

assign trunc_ln90_fu_962_p1 = gmem_RDATA[31:0];

assign trunc_ln_fu_478_p4 = {{array_size[31:4]}};

assign zext_ln41_fu_532_p1 = trunc_ln41_1_fu_522_p4;

assign zext_ln50_fu_565_p1 = shl_ln_fu_557_p3;

assign zext_ln66_fu_913_p1 = trunc_ln66_reg_1606_pp0_iter5_reg;

always @ (posedge ap_clk) begin
    zext_ln50_reg_1580[16:0] <= 17'b00000000000000000;
    zext_ln50_reg_1580[63:34] <= 30'b000000000000000000000000000000;
end

endmodule //calc_0
