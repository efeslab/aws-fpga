// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_aesl_mux_load_4_1125_x_i8P0A_i64_i64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        return_r,
        return_r_ap_vld,
        label_local_V_0_address0,
        label_local_V_0_ce0,
        label_local_V_0_q0,
        label_local_V_1_address0,
        label_local_V_1_ce0,
        label_local_V_1_q0,
        label_local_V_2_address0,
        label_local_V_2_ce0,
        label_local_V_2_q0,
        label_local_V_3_address0,
        label_local_V_3_ce0,
        label_local_V_3_q0,
        trunc_ln204_dout,
        trunc_ln204_empty_n,
        trunc_ln204_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] return_r;
output   return_r_ap_vld;
output  [10:0] label_local_V_0_address0;
output   label_local_V_0_ce0;
input  [7:0] label_local_V_0_q0;
output  [10:0] label_local_V_1_address0;
output   label_local_V_1_ce0;
input  [7:0] label_local_V_1_q0;
output  [10:0] label_local_V_2_address0;
output   label_local_V_2_ce0;
input  [7:0] label_local_V_2_q0;
output  [10:0] label_local_V_3_address0;
output   label_local_V_3_ce0;
input  [7:0] label_local_V_3_q0;
input  [12:0] trunc_ln204_dout;
input   trunc_ln204_empty_n;
output   trunc_ln204_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] return_r;
reg return_r_ap_vld;
reg label_local_V_0_ce0;
reg label_local_V_1_ce0;
reg label_local_V_2_ce0;
reg label_local_V_3_ce0;
reg trunc_ln204_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    trunc_ln204_blk_n;
wire   [1:0] trunc_ln202_fu_107_p1;
reg   [1:0] trunc_ln202_reg_175;
wire   [63:0] zext_ln202_fu_121_p1;
reg    ap_block_state1;
wire   [7:0] select_ln13_2_fu_166_p3;
reg   [7:0] return_r_preg;
wire    ap_CS_fsm_state2;
wire   [10:0] lshr_ln_fu_111_p4;
wire   [0:0] icmp_ln13_2_fu_139_p2;
wire   [0:0] icmp_ln13_1_fu_134_p2;
wire   [0:0] icmp_ln13_fu_129_p2;
wire   [0:0] or_ln13_fu_152_p2;
wire   [7:0] select_ln13_fu_144_p3;
wire   [7:0] select_ln13_1_fu_158_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 return_r_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        return_r_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            return_r_preg <= select_ln13_2_fu_166_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln202_reg_175 <= trunc_ln202_fu_107_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_0_ce0 = 1'b1;
    end else begin
        label_local_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_1_ce0 = 1'b1;
    end else begin
        label_local_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_2_ce0 = 1'b1;
    end else begin
        label_local_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_3_ce0 = 1'b1;
    end else begin
        label_local_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        return_r = select_ln13_2_fu_166_p3;
    end else begin
        return_r = return_r_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        return_r_ap_vld = 1'b1;
    end else begin
        return_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln204_blk_n = trunc_ln204_empty_n;
    end else begin
        trunc_ln204_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln204_read = 1'b1;
    end else begin
        trunc_ln204_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (trunc_ln204_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln13_1_fu_134_p2 = ((trunc_ln202_reg_175 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_139_p2 = ((trunc_ln202_reg_175 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_129_p2 = ((trunc_ln202_reg_175 == 2'd0) ? 1'b1 : 1'b0);

assign label_local_V_0_address0 = zext_ln202_fu_121_p1;

assign label_local_V_1_address0 = zext_ln202_fu_121_p1;

assign label_local_V_2_address0 = zext_ln202_fu_121_p1;

assign label_local_V_3_address0 = zext_ln202_fu_121_p1;

assign lshr_ln_fu_111_p4 = {{trunc_ln204_dout[12:2]}};

assign or_ln13_fu_152_p2 = (icmp_ln13_2_fu_139_p2 | icmp_ln13_1_fu_134_p2);

assign select_ln13_1_fu_158_p3 = ((icmp_ln13_fu_129_p2[0:0] == 1'b1) ? label_local_V_0_q0 : label_local_V_3_q0);

assign select_ln13_2_fu_166_p3 = ((or_ln13_fu_152_p2[0:0] == 1'b1) ? select_ln13_fu_144_p3 : select_ln13_1_fu_158_p3);

assign select_ln13_fu_144_p3 = ((icmp_ln13_2_fu_139_p2[0:0] == 1'b1) ? label_local_V_2_q0 : label_local_V_1_q0);

assign trunc_ln202_fu_107_p1 = trunc_ln204_dout[1:0];

assign zext_ln202_fu_121_p1 = lshr_ln_fu_111_p4;

endmodule //SgdLR_aesl_mux_load_4_1125_x_i8P0A_i64_i64
