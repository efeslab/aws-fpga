// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_load_weight_2D_from_axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        dest_address0,
        dest_ce0,
        dest_we0,
        dest_d0,
        src
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
output  [7:0] dest_address0;
output   dest_ce0;
output   dest_we0;
output  [7:0] dest_d0;
input  [63:0] src;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg dest_ce0;
reg dest_we0;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state72;
reg   [0:0] icmp_ln188_reg_389;
wire   [0:0] trunc_ln188_fu_225_p1;
wire   [4:0] add_ln188_fu_197_p2;
reg   [4:0] add_ln188_reg_384;
wire    ap_CS_fsm_state71;
wire   [0:0] icmp_ln188_fu_203_p2;
wire   [511:0] zext_ln188_fu_209_p1;
wire   [7:0] tmp_cast_fu_217_p3;
reg   [7:0] tmp_cast_reg_398;
reg   [0:0] trunc_ln188_reg_403;
reg   [511:0] gmem_addr_read_reg_407;
wire   [255:0] trunc_ln189_fu_229_p1;
wire    ap_CS_fsm_state73;
wire   [4:0] add_ln189_fu_233_p2;
wire    ap_CS_fsm_state74;
wire   [255:0] zext_ln700_fu_269_p1;
wire   [0:0] icmp_ln189_fu_239_p2;
wire    ap_CS_fsm_state75;
reg   [4:0] i_reg_123;
wire    ap_CS_fsm_state70;
reg   [255:0] shiftreg13_reg_135;
reg   [511:0] ap_phi_mux_empty_581_phi_fu_149_p4;
reg   [511:0] empty_581_reg_146;
reg    ap_predicate_op164_read_state72;
reg    ap_block_state72;
reg   [4:0] j_reg_156;
reg   [255:0] shiftreg_reg_167;
wire   [63:0] zext_ln191_1_fu_254_p1;
wire  signed [63:0] sext_ln188_fu_186_p1;
wire   [57:0] trunc_ln_fu_176_p4;
wire   [3:0] trunc_ln191_fu_213_p1;
wire   [7:0] zext_ln191_fu_245_p1;
wire   [7:0] add_ln191_fu_249_p2;
wire   [239:0] lshr_ln_fu_259_p4;
wire   [7:0] trunc_ln414_fu_291_p1;
wire   [0:0] p_Result_s_fu_273_p3;
wire   [0:0] icmp_ln414_fu_295_p2;
wire   [0:0] and_ln414_fu_301_p2;
wire   [7:0] trunc_ln1_fu_281_p4;
wire   [7:0] zext_ln415_fu_307_p1;
wire   [7:0] p_Val2_s_fu_311_p2;
wire   [0:0] p_Result_22_fu_317_p3;
wire   [0:0] xor_ln785_fu_331_p2;
wire   [0:0] neg_src_3_fu_325_p2;
wire   [0:0] overflow_fu_337_p2;
wire   [0:0] select_ln340_fu_343_p3;
wire   [7:0] select_ln384_fu_351_p3;
reg   [74:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72) & (trunc_ln188_fu_225_p1 == 1'd1) & (icmp_ln188_reg_389 == 1'd0))) begin
        empty_581_reg_146 <= zext_ln188_fu_209_p1;
    end else if (((1'b1 == ap_CS_fsm_state73) & (trunc_ln188_reg_403 == 1'd0))) begin
        empty_581_reg_146 <= gmem_addr_read_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_123 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        i_reg_123 <= add_ln188_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln189_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        j_reg_156 <= add_ln189_fu_233_p2;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        j_reg_156 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        shiftreg13_reg_135 <= 256'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        shiftreg13_reg_135 <= {{empty_581_reg_146[511:256]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln189_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        shiftreg_reg_167 <= zext_ln700_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        shiftreg_reg_167 <= trunc_ln189_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        add_ln188_reg_384 <= add_ln188_fu_197_p2;
        icmp_ln188_reg_389 <= icmp_ln188_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (trunc_ln188_fu_225_p1 == 1'd0) & (icmp_ln188_reg_389 == 1'd0))) begin
        gmem_addr_read_reg_407 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln188_reg_389 == 1'd0))) begin
        tmp_cast_reg_398[7 : 4] <= tmp_cast_fu_217_p3[7 : 4];
        trunc_ln188_reg_403 <= trunc_ln188_fu_225_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln188_reg_389 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (trunc_ln188_reg_403 == 1'd0))) begin
        ap_phi_mux_empty_581_phi_fu_149_p4 = gmem_addr_read_reg_407;
    end else begin
        ap_phi_mux_empty_581_phi_fu_149_p4 = empty_581_reg_146;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln188_reg_389 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        dest_ce0 = 1'b1;
    end else begin
        dest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln189_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        dest_we0 = 1'b1;
    end else begin
        dest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) & (trunc_ln188_fu_225_p1 == 1'd0) & (icmp_ln188_reg_389 == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (ap_predicate_op164_read_state72 == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if ((~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln188_reg_389 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln188_reg_389 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((icmp_ln189_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln188_fu_197_p2 = (i_reg_123 + 5'd1);

assign add_ln189_fu_233_p2 = (j_reg_156 + 5'd1);

assign add_ln191_fu_249_p2 = (tmp_cast_reg_398 + zext_ln191_fu_245_p1);

assign and_ln414_fu_301_p2 = (p_Result_s_fu_273_p3 & icmp_ln414_fu_295_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

always @ (*) begin
    ap_block_state72 = ((ap_predicate_op164_read_state72 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

always @ (*) begin
    ap_predicate_op164_read_state72 = ((trunc_ln188_fu_225_p1 == 1'd0) & (icmp_ln188_reg_389 == 1'd0));
end

assign dest_address0 = zext_ln191_1_fu_254_p1;

assign dest_d0 = ((select_ln340_fu_343_p3[0:0] == 1'b1) ? select_ln384_fu_351_p3 : p_Val2_s_fu_311_p2);

assign icmp_ln188_fu_203_p2 = ((i_reg_123 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_239_p2 = ((j_reg_156 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_295_p2 = ((trunc_ln414_fu_291_p1 != 8'd0) ? 1'b1 : 1'b0);

assign lshr_ln_fu_259_p4 = {{shiftreg_reg_167[255:16]}};

assign m_axi_gmem_ARADDR = sext_ln188_fu_186_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd8;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign neg_src_3_fu_325_p2 = (p_Result_s_fu_273_p3 & p_Result_22_fu_317_p3);

assign overflow_fu_337_p2 = (xor_ln785_fu_331_p2 & p_Result_22_fu_317_p3);

assign p_Result_22_fu_317_p3 = p_Val2_s_fu_311_p2[32'd7];

assign p_Result_s_fu_273_p3 = shiftreg_reg_167[32'd15];

assign p_Val2_s_fu_311_p2 = (trunc_ln1_fu_281_p4 + zext_ln415_fu_307_p1);

assign select_ln340_fu_343_p3 = ((p_Result_22_fu_317_p3[0:0] == 1'b1) ? xor_ln785_fu_331_p2 : neg_src_3_fu_325_p2);

assign select_ln384_fu_351_p3 = ((overflow_fu_337_p2[0:0] == 1'b1) ? 8'd127 : p_Val2_s_fu_311_p2);

assign sext_ln188_fu_186_p1 = $signed(trunc_ln_fu_176_p4);

assign tmp_cast_fu_217_p3 = {{trunc_ln191_fu_213_p1}, {4'd0}};

assign trunc_ln188_fu_225_p1 = i_reg_123[0:0];

assign trunc_ln189_fu_229_p1 = ap_phi_mux_empty_581_phi_fu_149_p4[255:0];

assign trunc_ln191_fu_213_p1 = i_reg_123[3:0];

assign trunc_ln1_fu_281_p4 = {{shiftreg_reg_167[15:8]}};

assign trunc_ln414_fu_291_p1 = shiftreg_reg_167[7:0];

assign trunc_ln_fu_176_p4 = {{src[63:6]}};

assign xor_ln785_fu_331_p2 = (p_Result_s_fu_273_p3 ^ 1'd1);

assign zext_ln188_fu_209_p1 = shiftreg13_reg_135;

assign zext_ln191_1_fu_254_p1 = add_ln191_fu_249_p2;

assign zext_ln191_fu_245_p1 = j_reg_156;

assign zext_ln415_fu_307_p1 = and_ln414_fu_301_p2;

assign zext_ln700_fu_269_p1 = lshr_ln_fu_259_p4;

always @ (posedge ap_clk) begin
    tmp_cast_reg_398[3:0] <= 4'b0000;
end

endmodule //mobilenet_load_weight_2D_from_axi
