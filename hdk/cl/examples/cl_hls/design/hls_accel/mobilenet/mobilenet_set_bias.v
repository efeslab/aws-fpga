// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_set_bias (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf1_address0,
        buf1_ce0,
        buf1_we0,
        buf1_d0,
        buf2_address0,
        buf2_ce0,
        buf2_we0,
        buf2_d0,
        buf3_address0,
        buf3_ce0,
        buf3_we0,
        buf3_d0,
        buf4_address0,
        buf4_ce0,
        buf4_we0,
        buf4_d0,
        buf5_address0,
        buf5_ce0,
        buf5_we0,
        buf5_d0,
        buf6_address0,
        buf6_ce0,
        buf6_we0,
        buf6_d0,
        buf7_address0,
        buf7_ce0,
        buf7_we0,
        buf7_d0,
        buf8_address0,
        buf8_ce0,
        buf8_we0,
        buf8_d0,
        buf9_address0,
        buf9_ce0,
        buf9_we0,
        buf9_d0,
        buf10_address0,
        buf10_ce0,
        buf10_we0,
        buf10_d0,
        buf11_address0,
        buf11_ce0,
        buf11_we0,
        buf11_d0,
        buf12_address0,
        buf12_ce0,
        buf12_we0,
        buf12_d0,
        buf13_address0,
        buf13_ce0,
        buf13_we0,
        buf13_d0,
        buf14_address0,
        buf14_ce0,
        buf14_we0,
        buf14_d0,
        buf15_address0,
        buf15_ce0,
        buf15_we0,
        buf15_d0,
        bias_buf_V_0_address0,
        bias_buf_V_0_ce0,
        bias_buf_V_0_q0,
        bias_buf_V_1_address0,
        bias_buf_V_1_ce0,
        bias_buf_V_1_q0,
        bias_buf_V_2_address0,
        bias_buf_V_2_ce0,
        bias_buf_V_2_q0,
        bias_buf_V_3_address0,
        bias_buf_V_3_ce0,
        bias_buf_V_3_q0,
        bias_buf_V_4_address0,
        bias_buf_V_4_ce0,
        bias_buf_V_4_q0,
        bias_buf_V_5_address0,
        bias_buf_V_5_ce0,
        bias_buf_V_5_q0,
        bias_buf_V_6_address0,
        bias_buf_V_6_ce0,
        bias_buf_V_6_q0,
        bias_buf_V_7_address0,
        bias_buf_V_7_ce0,
        bias_buf_V_7_q0,
        bias_buf_V_8_address0,
        bias_buf_V_8_ce0,
        bias_buf_V_8_q0,
        bias_buf_V_9_address0,
        bias_buf_V_9_ce0,
        bias_buf_V_9_q0,
        bias_buf_V_10_address0,
        bias_buf_V_10_ce0,
        bias_buf_V_10_q0,
        bias_buf_V_11_address0,
        bias_buf_V_11_ce0,
        bias_buf_V_11_q0,
        bias_buf_V_12_address0,
        bias_buf_V_12_ce0,
        bias_buf_V_12_q0,
        bias_buf_V_13_address0,
        bias_buf_V_13_ce0,
        bias_buf_V_13_q0,
        bias_buf_V_14_address0,
        bias_buf_V_14_ce0,
        bias_buf_V_14_q0,
        bias_buf_V_15_address0,
        bias_buf_V_15_ce0,
        bias_buf_V_15_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [15:0] buf_r_d0;
output  [9:0] buf1_address0;
output   buf1_ce0;
output   buf1_we0;
output  [15:0] buf1_d0;
output  [9:0] buf2_address0;
output   buf2_ce0;
output   buf2_we0;
output  [15:0] buf2_d0;
output  [9:0] buf3_address0;
output   buf3_ce0;
output   buf3_we0;
output  [15:0] buf3_d0;
output  [9:0] buf4_address0;
output   buf4_ce0;
output   buf4_we0;
output  [15:0] buf4_d0;
output  [9:0] buf5_address0;
output   buf5_ce0;
output   buf5_we0;
output  [15:0] buf5_d0;
output  [9:0] buf6_address0;
output   buf6_ce0;
output   buf6_we0;
output  [15:0] buf6_d0;
output  [9:0] buf7_address0;
output   buf7_ce0;
output   buf7_we0;
output  [15:0] buf7_d0;
output  [9:0] buf8_address0;
output   buf8_ce0;
output   buf8_we0;
output  [15:0] buf8_d0;
output  [9:0] buf9_address0;
output   buf9_ce0;
output   buf9_we0;
output  [15:0] buf9_d0;
output  [9:0] buf10_address0;
output   buf10_ce0;
output   buf10_we0;
output  [15:0] buf10_d0;
output  [9:0] buf11_address0;
output   buf11_ce0;
output   buf11_we0;
output  [15:0] buf11_d0;
output  [9:0] buf12_address0;
output   buf12_ce0;
output   buf12_we0;
output  [15:0] buf12_d0;
output  [9:0] buf13_address0;
output   buf13_ce0;
output   buf13_we0;
output  [15:0] buf13_d0;
output  [9:0] buf14_address0;
output   buf14_ce0;
output   buf14_we0;
output  [15:0] buf14_d0;
output  [9:0] buf15_address0;
output   buf15_ce0;
output   buf15_we0;
output  [15:0] buf15_d0;
output  [3:0] bias_buf_V_0_address0;
output   bias_buf_V_0_ce0;
input  [7:0] bias_buf_V_0_q0;
output  [3:0] bias_buf_V_1_address0;
output   bias_buf_V_1_ce0;
input  [7:0] bias_buf_V_1_q0;
output  [3:0] bias_buf_V_2_address0;
output   bias_buf_V_2_ce0;
input  [7:0] bias_buf_V_2_q0;
output  [3:0] bias_buf_V_3_address0;
output   bias_buf_V_3_ce0;
input  [7:0] bias_buf_V_3_q0;
output  [3:0] bias_buf_V_4_address0;
output   bias_buf_V_4_ce0;
input  [7:0] bias_buf_V_4_q0;
output  [3:0] bias_buf_V_5_address0;
output   bias_buf_V_5_ce0;
input  [7:0] bias_buf_V_5_q0;
output  [3:0] bias_buf_V_6_address0;
output   bias_buf_V_6_ce0;
input  [7:0] bias_buf_V_6_q0;
output  [3:0] bias_buf_V_7_address0;
output   bias_buf_V_7_ce0;
input  [7:0] bias_buf_V_7_q0;
output  [3:0] bias_buf_V_8_address0;
output   bias_buf_V_8_ce0;
input  [7:0] bias_buf_V_8_q0;
output  [3:0] bias_buf_V_9_address0;
output   bias_buf_V_9_ce0;
input  [7:0] bias_buf_V_9_q0;
output  [3:0] bias_buf_V_10_address0;
output   bias_buf_V_10_ce0;
input  [7:0] bias_buf_V_10_q0;
output  [3:0] bias_buf_V_11_address0;
output   bias_buf_V_11_ce0;
input  [7:0] bias_buf_V_11_q0;
output  [3:0] bias_buf_V_12_address0;
output   bias_buf_V_12_ce0;
input  [7:0] bias_buf_V_12_q0;
output  [3:0] bias_buf_V_13_address0;
output   bias_buf_V_13_ce0;
input  [7:0] bias_buf_V_13_q0;
output  [3:0] bias_buf_V_14_address0;
output   bias_buf_V_14_ce0;
input  [7:0] bias_buf_V_14_q0;
output  [3:0] bias_buf_V_15_address0;
output   bias_buf_V_15_ce0;
input  [7:0] bias_buf_V_15_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg buf_r_we0;
reg buf1_ce0;
reg buf1_we0;
reg buf2_ce0;
reg buf2_we0;
reg buf3_ce0;
reg buf3_we0;
reg buf4_ce0;
reg buf4_we0;
reg buf5_ce0;
reg buf5_we0;
reg buf6_ce0;
reg buf6_we0;
reg buf7_ce0;
reg buf7_we0;
reg buf8_ce0;
reg buf8_we0;
reg buf9_ce0;
reg buf9_we0;
reg buf10_ce0;
reg buf10_we0;
reg buf11_ce0;
reg buf11_we0;
reg buf12_ce0;
reg buf12_we0;
reg buf13_ce0;
reg buf13_we0;
reg buf14_ce0;
reg buf14_we0;
reg buf15_ce0;
reg buf15_we0;
reg bias_buf_V_0_ce0;
reg bias_buf_V_1_ce0;
reg bias_buf_V_2_ce0;
reg bias_buf_V_3_ce0;
reg bias_buf_V_4_ce0;
reg bias_buf_V_5_ce0;
reg bias_buf_V_6_ce0;
reg bias_buf_V_7_ce0;
reg bias_buf_V_8_ce0;
reg bias_buf_V_9_ce0;
reg bias_buf_V_10_ce0;
reg bias_buf_V_11_ce0;
reg bias_buf_V_12_ce0;
reg bias_buf_V_13_ce0;
reg bias_buf_V_14_ce0;
reg bias_buf_V_15_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_438;
reg   [4:0] j_reg_449;
reg   [5:0] k_reg_460;
wire  signed [15:0] sext_ln226_fu_479_p1;
reg  signed [15:0] sext_ln226_reg_744;
wire    ap_CS_fsm_state2;
wire  signed [15:0] sext_ln226_1_fu_491_p1;
reg  signed [15:0] sext_ln226_1_reg_749;
wire  signed [15:0] sext_ln226_2_fu_503_p1;
reg  signed [15:0] sext_ln226_2_reg_754;
wire  signed [15:0] sext_ln226_3_fu_515_p1;
reg  signed [15:0] sext_ln226_3_reg_759;
wire  signed [15:0] sext_ln226_4_fu_527_p1;
reg  signed [15:0] sext_ln226_4_reg_764;
wire  signed [15:0] sext_ln226_5_fu_539_p1;
reg  signed [15:0] sext_ln226_5_reg_769;
wire  signed [15:0] sext_ln226_6_fu_551_p1;
reg  signed [15:0] sext_ln226_6_reg_774;
wire  signed [15:0] sext_ln226_7_fu_563_p1;
reg  signed [15:0] sext_ln226_7_reg_779;
wire  signed [15:0] sext_ln226_8_fu_575_p1;
reg  signed [15:0] sext_ln226_8_reg_784;
wire  signed [15:0] sext_ln226_9_fu_587_p1;
reg  signed [15:0] sext_ln226_9_reg_789;
wire  signed [15:0] sext_ln226_10_fu_599_p1;
reg  signed [15:0] sext_ln226_10_reg_794;
wire  signed [15:0] sext_ln226_11_fu_611_p1;
reg  signed [15:0] sext_ln226_11_reg_799;
wire  signed [15:0] sext_ln226_12_fu_623_p1;
reg  signed [15:0] sext_ln226_12_reg_804;
wire  signed [15:0] sext_ln226_13_fu_635_p1;
reg  signed [15:0] sext_ln226_13_reg_809;
wire  signed [15:0] sext_ln226_14_fu_647_p1;
reg  signed [15:0] sext_ln226_14_reg_814;
wire  signed [15:0] sext_ln226_15_fu_659_p1;
reg  signed [15:0] sext_ln226_15_reg_819;
wire   [9:0] add_ln221_1_fu_663_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln221_fu_669_p2;
reg   [0:0] icmp_ln221_reg_829;
reg   [0:0] icmp_ln221_reg_829_pp0_iter1_reg;
reg   [0:0] icmp_ln221_reg_829_pp0_iter2_reg;
wire   [5:0] select_ln221_fu_687_p3;
reg   [5:0] select_ln221_reg_833;
reg   [5:0] select_ln221_reg_833_pp0_iter1_reg;
wire   [4:0] select_ln221_1_fu_695_p3;
reg   [4:0] select_ln221_1_reg_838;
wire   [5:0] add_ln222_fu_707_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [4:0] ap_phi_mux_j_phi_fu_453_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln226_1_fu_716_p1;
wire   [10:0] shl_ln_fu_471_p3;
wire   [10:0] shl_ln728_1_fu_483_p3;
wire   [10:0] shl_ln728_2_fu_495_p3;
wire   [10:0] shl_ln728_3_fu_507_p3;
wire   [10:0] shl_ln728_4_fu_519_p3;
wire   [10:0] shl_ln728_5_fu_531_p3;
wire   [10:0] shl_ln728_6_fu_543_p3;
wire   [10:0] shl_ln728_7_fu_555_p3;
wire   [10:0] shl_ln728_8_fu_567_p3;
wire   [10:0] shl_ln728_9_fu_579_p3;
wire   [10:0] shl_ln728_s_fu_591_p3;
wire   [10:0] shl_ln728_10_fu_603_p3;
wire   [10:0] shl_ln728_11_fu_615_p3;
wire   [10:0] shl_ln728_12_fu_627_p3;
wire   [10:0] shl_ln728_13_fu_639_p3;
wire   [10:0] shl_ln728_14_fu_651_p3;
wire   [0:0] icmp_ln222_fu_681_p2;
wire   [4:0] add_ln221_fu_675_p2;
wire   [9:0] grp_fu_735_p3;
wire   [4:0] grp_fu_735_p0;
wire   [6:0] grp_fu_735_p1;
wire   [5:0] grp_fu_735_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_735_p00;
wire   [9:0] grp_fu_735_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

mobilenet_mac_muladd_5ns_7ns_6ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mac_muladd_5ns_7ns_6ns_10_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_735_p0),
    .din1(grp_fu_735_p1),
    .din2(grp_fu_735_p2),
    .ce(1'b1),
    .dout(grp_fu_735_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_669_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_438 <= add_ln221_1_fu_663_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_438 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln221_reg_829 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_449 <= select_ln221_1_reg_838;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_449 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_669_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_460 <= add_ln222_fu_707_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_460 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln221_reg_829 <= icmp_ln221_fu_669_p2;
        icmp_ln221_reg_829_pp0_iter1_reg <= icmp_ln221_reg_829;
        select_ln221_reg_833_pp0_iter1_reg <= select_ln221_reg_833;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln221_reg_829_pp0_iter2_reg <= icmp_ln221_reg_829_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_669_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln221_1_reg_838 <= select_ln221_1_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_669_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln221_reg_833 <= select_ln221_fu_687_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln226_10_reg_794[15 : 3] <= sext_ln226_10_fu_599_p1[15 : 3];
        sext_ln226_11_reg_799[15 : 3] <= sext_ln226_11_fu_611_p1[15 : 3];
        sext_ln226_12_reg_804[15 : 3] <= sext_ln226_12_fu_623_p1[15 : 3];
        sext_ln226_13_reg_809[15 : 3] <= sext_ln226_13_fu_635_p1[15 : 3];
        sext_ln226_14_reg_814[15 : 3] <= sext_ln226_14_fu_647_p1[15 : 3];
        sext_ln226_15_reg_819[15 : 3] <= sext_ln226_15_fu_659_p1[15 : 3];
        sext_ln226_1_reg_749[15 : 3] <= sext_ln226_1_fu_491_p1[15 : 3];
        sext_ln226_2_reg_754[15 : 3] <= sext_ln226_2_fu_503_p1[15 : 3];
        sext_ln226_3_reg_759[15 : 3] <= sext_ln226_3_fu_515_p1[15 : 3];
        sext_ln226_4_reg_764[15 : 3] <= sext_ln226_4_fu_527_p1[15 : 3];
        sext_ln226_5_reg_769[15 : 3] <= sext_ln226_5_fu_539_p1[15 : 3];
        sext_ln226_6_reg_774[15 : 3] <= sext_ln226_6_fu_551_p1[15 : 3];
        sext_ln226_7_reg_779[15 : 3] <= sext_ln226_7_fu_563_p1[15 : 3];
        sext_ln226_8_reg_784[15 : 3] <= sext_ln226_8_fu_575_p1[15 : 3];
        sext_ln226_9_reg_789[15 : 3] <= sext_ln226_9_fu_587_p1[15 : 3];
        sext_ln226_reg_744[15 : 3] <= sext_ln226_fu_479_p1[15 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln221_fu_669_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln221_reg_829 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_453_p4 = select_ln221_1_reg_838;
    end else begin
        ap_phi_mux_j_phi_fu_453_p4 = j_reg_449;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_0_ce0 = 1'b1;
    end else begin
        bias_buf_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_10_ce0 = 1'b1;
    end else begin
        bias_buf_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_11_ce0 = 1'b1;
    end else begin
        bias_buf_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_12_ce0 = 1'b1;
    end else begin
        bias_buf_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_13_ce0 = 1'b1;
    end else begin
        bias_buf_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_14_ce0 = 1'b1;
    end else begin
        bias_buf_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_15_ce0 = 1'b1;
    end else begin
        bias_buf_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_1_ce0 = 1'b1;
    end else begin
        bias_buf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_2_ce0 = 1'b1;
    end else begin
        bias_buf_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_3_ce0 = 1'b1;
    end else begin
        bias_buf_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_4_ce0 = 1'b1;
    end else begin
        bias_buf_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_5_ce0 = 1'b1;
    end else begin
        bias_buf_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_6_ce0 = 1'b1;
    end else begin
        bias_buf_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_7_ce0 = 1'b1;
    end else begin
        bias_buf_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_8_ce0 = 1'b1;
    end else begin
        bias_buf_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buf_V_9_ce0 = 1'b1;
    end else begin
        bias_buf_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf10_ce0 = 1'b1;
    end else begin
        buf10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf10_we0 = 1'b1;
    end else begin
        buf10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf11_ce0 = 1'b1;
    end else begin
        buf11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf11_we0 = 1'b1;
    end else begin
        buf11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf12_ce0 = 1'b1;
    end else begin
        buf12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf12_we0 = 1'b1;
    end else begin
        buf12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf13_ce0 = 1'b1;
    end else begin
        buf13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf13_we0 = 1'b1;
    end else begin
        buf13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf14_ce0 = 1'b1;
    end else begin
        buf14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf14_we0 = 1'b1;
    end else begin
        buf14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf15_ce0 = 1'b1;
    end else begin
        buf15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf15_we0 = 1'b1;
    end else begin
        buf15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf1_ce0 = 1'b1;
    end else begin
        buf1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf1_we0 = 1'b1;
    end else begin
        buf1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf2_ce0 = 1'b1;
    end else begin
        buf2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf2_we0 = 1'b1;
    end else begin
        buf2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf3_ce0 = 1'b1;
    end else begin
        buf3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf3_we0 = 1'b1;
    end else begin
        buf3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf4_ce0 = 1'b1;
    end else begin
        buf4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf4_we0 = 1'b1;
    end else begin
        buf4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf5_ce0 = 1'b1;
    end else begin
        buf5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf5_we0 = 1'b1;
    end else begin
        buf5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf6_ce0 = 1'b1;
    end else begin
        buf6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf6_we0 = 1'b1;
    end else begin
        buf6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf7_ce0 = 1'b1;
    end else begin
        buf7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf7_we0 = 1'b1;
    end else begin
        buf7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf8_ce0 = 1'b1;
    end else begin
        buf8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf8_we0 = 1'b1;
    end else begin
        buf8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf9_ce0 = 1'b1;
    end else begin
        buf9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf9_we0 = 1'b1;
    end else begin
        buf9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln221_reg_829_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln221_fu_669_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln221_fu_669_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln221_1_fu_663_p2 = (indvar_flatten_reg_438 + 10'd1);

assign add_ln221_fu_675_p2 = (ap_phi_mux_j_phi_fu_453_p4 + 5'd1);

assign add_ln222_fu_707_p2 = (select_ln221_fu_687_p3 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_buf_V_0_address0 = 4'd0;

assign bias_buf_V_10_address0 = 4'd0;

assign bias_buf_V_11_address0 = 4'd0;

assign bias_buf_V_12_address0 = 4'd0;

assign bias_buf_V_13_address0 = 4'd0;

assign bias_buf_V_14_address0 = 4'd0;

assign bias_buf_V_15_address0 = 4'd0;

assign bias_buf_V_1_address0 = 4'd0;

assign bias_buf_V_2_address0 = 4'd0;

assign bias_buf_V_3_address0 = 4'd0;

assign bias_buf_V_4_address0 = 4'd0;

assign bias_buf_V_5_address0 = 4'd0;

assign bias_buf_V_6_address0 = 4'd0;

assign bias_buf_V_7_address0 = 4'd0;

assign bias_buf_V_8_address0 = 4'd0;

assign bias_buf_V_9_address0 = 4'd0;

assign buf10_address0 = zext_ln226_1_fu_716_p1;

assign buf10_d0 = sext_ln226_10_reg_794;

assign buf11_address0 = zext_ln226_1_fu_716_p1;

assign buf11_d0 = sext_ln226_11_reg_799;

assign buf12_address0 = zext_ln226_1_fu_716_p1;

assign buf12_d0 = sext_ln226_12_reg_804;

assign buf13_address0 = zext_ln226_1_fu_716_p1;

assign buf13_d0 = sext_ln226_13_reg_809;

assign buf14_address0 = zext_ln226_1_fu_716_p1;

assign buf14_d0 = sext_ln226_14_reg_814;

assign buf15_address0 = zext_ln226_1_fu_716_p1;

assign buf15_d0 = sext_ln226_15_reg_819;

assign buf1_address0 = zext_ln226_1_fu_716_p1;

assign buf1_d0 = sext_ln226_1_reg_749;

assign buf2_address0 = zext_ln226_1_fu_716_p1;

assign buf2_d0 = sext_ln226_2_reg_754;

assign buf3_address0 = zext_ln226_1_fu_716_p1;

assign buf3_d0 = sext_ln226_3_reg_759;

assign buf4_address0 = zext_ln226_1_fu_716_p1;

assign buf4_d0 = sext_ln226_4_reg_764;

assign buf5_address0 = zext_ln226_1_fu_716_p1;

assign buf5_d0 = sext_ln226_5_reg_769;

assign buf6_address0 = zext_ln226_1_fu_716_p1;

assign buf6_d0 = sext_ln226_6_reg_774;

assign buf7_address0 = zext_ln226_1_fu_716_p1;

assign buf7_d0 = sext_ln226_7_reg_779;

assign buf8_address0 = zext_ln226_1_fu_716_p1;

assign buf8_d0 = sext_ln226_8_reg_784;

assign buf9_address0 = zext_ln226_1_fu_716_p1;

assign buf9_d0 = sext_ln226_9_reg_789;

assign buf_r_address0 = zext_ln226_1_fu_716_p1;

assign buf_r_d0 = sext_ln226_reg_744;

assign grp_fu_735_p0 = grp_fu_735_p00;

assign grp_fu_735_p00 = select_ln221_1_fu_695_p3;

assign grp_fu_735_p1 = 10'd42;

assign grp_fu_735_p2 = grp_fu_735_p20;

assign grp_fu_735_p20 = select_ln221_reg_833_pp0_iter1_reg;

assign icmp_ln221_fu_669_p2 = ((indvar_flatten_reg_438 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_681_p2 = ((k_reg_460 == 6'd41) ? 1'b1 : 1'b0);

assign select_ln221_1_fu_695_p3 = ((icmp_ln222_fu_681_p2[0:0] == 1'b1) ? add_ln221_fu_675_p2 : ap_phi_mux_j_phi_fu_453_p4);

assign select_ln221_fu_687_p3 = ((icmp_ln222_fu_681_p2[0:0] == 1'b1) ? 6'd1 : k_reg_460);

assign sext_ln226_10_fu_599_p1 = $signed(shl_ln728_s_fu_591_p3);

assign sext_ln226_11_fu_611_p1 = $signed(shl_ln728_10_fu_603_p3);

assign sext_ln226_12_fu_623_p1 = $signed(shl_ln728_11_fu_615_p3);

assign sext_ln226_13_fu_635_p1 = $signed(shl_ln728_12_fu_627_p3);

assign sext_ln226_14_fu_647_p1 = $signed(shl_ln728_13_fu_639_p3);

assign sext_ln226_15_fu_659_p1 = $signed(shl_ln728_14_fu_651_p3);

assign sext_ln226_1_fu_491_p1 = $signed(shl_ln728_1_fu_483_p3);

assign sext_ln226_2_fu_503_p1 = $signed(shl_ln728_2_fu_495_p3);

assign sext_ln226_3_fu_515_p1 = $signed(shl_ln728_3_fu_507_p3);

assign sext_ln226_4_fu_527_p1 = $signed(shl_ln728_4_fu_519_p3);

assign sext_ln226_5_fu_539_p1 = $signed(shl_ln728_5_fu_531_p3);

assign sext_ln226_6_fu_551_p1 = $signed(shl_ln728_6_fu_543_p3);

assign sext_ln226_7_fu_563_p1 = $signed(shl_ln728_7_fu_555_p3);

assign sext_ln226_8_fu_575_p1 = $signed(shl_ln728_8_fu_567_p3);

assign sext_ln226_9_fu_587_p1 = $signed(shl_ln728_9_fu_579_p3);

assign sext_ln226_fu_479_p1 = $signed(shl_ln_fu_471_p3);

assign shl_ln728_10_fu_603_p3 = {{bias_buf_V_11_q0}, {3'd0}};

assign shl_ln728_11_fu_615_p3 = {{bias_buf_V_12_q0}, {3'd0}};

assign shl_ln728_12_fu_627_p3 = {{bias_buf_V_13_q0}, {3'd0}};

assign shl_ln728_13_fu_639_p3 = {{bias_buf_V_14_q0}, {3'd0}};

assign shl_ln728_14_fu_651_p3 = {{bias_buf_V_15_q0}, {3'd0}};

assign shl_ln728_1_fu_483_p3 = {{bias_buf_V_1_q0}, {3'd0}};

assign shl_ln728_2_fu_495_p3 = {{bias_buf_V_2_q0}, {3'd0}};

assign shl_ln728_3_fu_507_p3 = {{bias_buf_V_3_q0}, {3'd0}};

assign shl_ln728_4_fu_519_p3 = {{bias_buf_V_4_q0}, {3'd0}};

assign shl_ln728_5_fu_531_p3 = {{bias_buf_V_5_q0}, {3'd0}};

assign shl_ln728_6_fu_543_p3 = {{bias_buf_V_6_q0}, {3'd0}};

assign shl_ln728_7_fu_555_p3 = {{bias_buf_V_7_q0}, {3'd0}};

assign shl_ln728_8_fu_567_p3 = {{bias_buf_V_8_q0}, {3'd0}};

assign shl_ln728_9_fu_579_p3 = {{bias_buf_V_9_q0}, {3'd0}};

assign shl_ln728_s_fu_591_p3 = {{bias_buf_V_10_q0}, {3'd0}};

assign shl_ln_fu_471_p3 = {{bias_buf_V_0_q0}, {3'd0}};

assign zext_ln226_1_fu_716_p1 = grp_fu_735_p3;

always @ (posedge ap_clk) begin
    sext_ln226_reg_744[2:0] <= 3'b000;
    sext_ln226_1_reg_749[2:0] <= 3'b000;
    sext_ln226_2_reg_754[2:0] <= 3'b000;
    sext_ln226_3_reg_759[2:0] <= 3'b000;
    sext_ln226_4_reg_764[2:0] <= 3'b000;
    sext_ln226_5_reg_769[2:0] <= 3'b000;
    sext_ln226_6_reg_774[2:0] <= 3'b000;
    sext_ln226_7_reg_779[2:0] <= 3'b000;
    sext_ln226_8_reg_784[2:0] <= 3'b000;
    sext_ln226_9_reg_789[2:0] <= 3'b000;
    sext_ln226_10_reg_794[2:0] <= 3'b000;
    sext_ln226_11_reg_799[2:0] <= 3'b000;
    sext_ln226_12_reg_804[2:0] <= 3'b000;
    sext_ln226_13_reg_809[2:0] <= 3'b000;
    sext_ln226_14_reg_814[2:0] <= 3'b000;
    sext_ln226_15_reg_819[2:0] <= 3'b000;
end

endmodule //mobilenet_set_bias
