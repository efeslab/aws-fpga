// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_compute_engine_16 (
        ap_clk,
        ap_rst,
        w0,
        b0,
        w1,
        b1,
        w2,
        b2,
        w3,
        b3,
        w4,
        b4,
        w5,
        b5,
        w6,
        b6,
        w7,
        b7,
        w8,
        b8,
        w9,
        b9,
        w10,
        b10,
        w11,
        b11,
        w12,
        b12,
        w13,
        b13,
        w14,
        b14,
        w15,
        b15,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] w0;
input  [15:0] b0;
input  [7:0] w1;
input  [15:0] b1;
input  [7:0] w2;
input  [15:0] b2;
input  [7:0] w3;
input  [15:0] b3;
input  [7:0] w4;
input  [15:0] b4;
input  [7:0] w5;
input  [15:0] b5;
input  [7:0] w6;
input  [15:0] b6;
input  [7:0] w7;
input  [15:0] b7;
input  [7:0] w8;
input  [15:0] b8;
input  [7:0] w9;
input  [15:0] b9;
input  [7:0] w10;
input  [15:0] b10;
input  [7:0] w11;
input  [15:0] b11;
input  [7:0] w12;
input  [15:0] b12;
input  [7:0] w13;
input  [15:0] b13;
input  [7:0] w14;
input  [15:0] b14;
input  [7:0] w15;
input  [15:0] b15;
output  [30:0] ap_return;
input   ap_ce;

reg[30:0] ap_return;

reg   [15:0] b15_read_reg_568;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] b15_read_reg_568_pp0_iter1_reg;
reg   [15:0] b15_read_reg_568_pp0_iter2_reg;
reg   [15:0] b15_read_reg_568_pp0_iter3_reg;
reg  signed [15:0] b15_read_reg_568_pp0_iter4_reg;
reg   [7:0] w15_read_reg_573;
reg   [7:0] w15_read_reg_573_pp0_iter1_reg;
reg   [7:0] w15_read_reg_573_pp0_iter2_reg;
reg   [7:0] w15_read_reg_573_pp0_iter3_reg;
reg  signed [7:0] w15_read_reg_573_pp0_iter4_reg;
reg  signed [15:0] b14_read_reg_578;
reg  signed [7:0] w14_read_reg_583;
reg   [15:0] b12_read_reg_588;
reg  signed [15:0] b12_read_reg_588_pp0_iter1_reg;
reg   [7:0] w12_read_reg_593;
reg  signed [7:0] w12_read_reg_593_pp0_iter1_reg;
reg  signed [15:0] b11_read_reg_598;
reg  signed [7:0] w11_read_reg_603;
reg  signed [15:0] b9_read_reg_608;
reg  signed [7:0] w9_read_reg_613;
reg   [15:0] b7_read_reg_618;
reg   [15:0] b7_read_reg_618_pp0_iter1_reg;
reg   [15:0] b7_read_reg_618_pp0_iter2_reg;
reg  signed [15:0] b7_read_reg_618_pp0_iter3_reg;
reg   [7:0] w7_read_reg_623;
reg   [7:0] w7_read_reg_623_pp0_iter1_reg;
reg   [7:0] w7_read_reg_623_pp0_iter2_reg;
reg  signed [7:0] w7_read_reg_623_pp0_iter3_reg;
reg  signed [15:0] b6_read_reg_628;
reg  signed [7:0] w6_read_reg_633;
reg   [15:0] b4_read_reg_638;
reg  signed [15:0] b4_read_reg_638_pp0_iter1_reg;
reg   [7:0] w4_read_reg_643;
reg  signed [7:0] w4_read_reg_643_pp0_iter1_reg;
reg   [15:0] b3_read_reg_648;
reg   [15:0] b3_read_reg_648_pp0_iter1_reg;
reg  signed [15:0] b3_read_reg_648_pp0_iter2_reg;
reg   [7:0] w3_read_reg_653;
reg   [7:0] w3_read_reg_653_pp0_iter1_reg;
reg  signed [7:0] w3_read_reg_653_pp0_iter2_reg;
reg  signed [15:0] b2_read_reg_658;
reg  signed [7:0] w2_read_reg_663;
reg   [15:0] b1_read_reg_668;
reg  signed [15:0] b1_read_reg_668_pp0_iter1_reg;
reg   [7:0] w1_read_reg_673;
reg  signed [7:0] w1_read_reg_673_pp0_iter1_reg;
wire  signed [24:0] grp_fu_475_p3;
wire  signed [24:0] grp_fu_483_p3;
wire  signed [24:0] grp_fu_491_p3;
reg  signed [24:0] tmp6_reg_863;
reg  signed [24:0] tmp6_reg_863_pp0_iter5_reg;
reg  signed [24:0] tmp6_reg_863_pp0_iter6_reg;
wire  signed [24:0] grp_fu_499_p3;
reg  signed [24:0] tmp8_reg_868;
wire  signed [24:0] grp_fu_507_p3;
wire  signed [24:0] grp_fu_524_p3;
reg  signed [24:0] tmp2_reg_893;
wire   [25:0] tmp7_fu_394_p2;
reg   [25:0] tmp7_reg_898;
reg   [25:0] tmp7_reg_898_pp0_iter6_reg;
wire    ap_block_pp0_stage0;
wire  signed [23:0] grp_fu_440_p2;
wire  signed [23:0] grp_fu_447_p2;
wire  signed [23:0] grp_fu_454_p2;
wire  signed [23:0] grp_fu_461_p2;
wire  signed [23:0] grp_fu_468_p2;
wire  signed [24:0] grp_fu_515_p3;
wire  signed [24:0] grp_fu_532_p3;
wire  signed [25:0] tmp9_cast_fu_391_p1;
wire  signed [25:0] tmp8_cast_fu_388_p1;
wire  signed [25:0] tmp2_cast_fu_400_p1;
wire  signed [25:0] grp_fu_541_p3;
(* use_dsp48 = "no" *) wire  signed [25:0] empty_646_fu_403_p2;
wire  signed [26:0] tmp6_cast_fu_412_p1;
wire  signed [26:0] grp_fu_550_p3;
wire  signed [26:0] tmp7_cast_fu_420_p1;
(* use_dsp48 = "no" *) wire   [26:0] tmp4_fu_415_p2;
wire  signed [26:0] empty_647_fu_423_p2;
wire  signed [27:0] grp_fu_559_p3;
wire   [30:0] p_Val2_s_fu_433_p3;
reg    grp_fu_440_ce;
reg    grp_fu_447_ce;
reg    grp_fu_454_ce;
reg    grp_fu_461_ce;
reg    grp_fu_468_ce;
reg    grp_fu_475_ce;
reg    grp_fu_483_ce;
reg    grp_fu_491_ce;
reg    grp_fu_499_ce;
reg    grp_fu_507_ce;
reg    grp_fu_515_ce;
reg    grp_fu_524_ce;
reg    grp_fu_532_ce;
reg    grp_fu_541_ce;
reg    grp_fu_550_ce;
reg    grp_fu_559_ce;
reg    ap_ce_reg;
reg  signed [7:0] w0_int_reg;
reg  signed [15:0] b0_int_reg;
reg   [7:0] w1_int_reg;
reg   [15:0] b1_int_reg;
reg   [7:0] w2_int_reg;
reg   [15:0] b2_int_reg;
reg   [7:0] w3_int_reg;
reg   [15:0] b3_int_reg;
reg   [7:0] w4_int_reg;
reg   [15:0] b4_int_reg;
reg  signed [7:0] w5_int_reg;
reg  signed [15:0] b5_int_reg;
reg   [7:0] w6_int_reg;
reg   [15:0] b6_int_reg;
reg   [7:0] w7_int_reg;
reg   [15:0] b7_int_reg;
reg  signed [7:0] w8_int_reg;
reg  signed [15:0] b8_int_reg;
reg   [7:0] w9_int_reg;
reg   [15:0] b9_int_reg;
reg  signed [7:0] w10_int_reg;
reg  signed [15:0] b10_int_reg;
reg   [7:0] w11_int_reg;
reg   [15:0] b11_int_reg;
reg   [7:0] w12_int_reg;
reg   [15:0] b12_int_reg;
reg  signed [7:0] w13_int_reg;
reg  signed [15:0] b13_int_reg;
reg   [7:0] w14_int_reg;
reg   [15:0] b14_int_reg;
reg   [7:0] w15_int_reg;
reg   [15:0] b15_int_reg;
reg   [30:0] ap_return_int_reg;

mobilenet_mul_mul_16s_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_8s_24_4_1_U360(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b0_int_reg),
    .din1(w0_int_reg),
    .ce(grp_fu_440_ce),
    .dout(grp_fu_440_p2)
);

mobilenet_mul_mul_16s_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_8s_24_4_1_U361(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b5_int_reg),
    .din1(w5_int_reg),
    .ce(grp_fu_447_ce),
    .dout(grp_fu_447_p2)
);

mobilenet_mul_mul_16s_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_8s_24_4_1_U362(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b8_int_reg),
    .din1(w8_int_reg),
    .ce(grp_fu_454_ce),
    .dout(grp_fu_454_p2)
);

mobilenet_mul_mul_16s_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_8s_24_4_1_U363(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b10_int_reg),
    .din1(w10_int_reg),
    .ce(grp_fu_461_ce),
    .dout(grp_fu_461_p2)
);

mobilenet_mul_mul_16s_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_8s_24_4_1_U364(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b13_int_reg),
    .din1(w13_int_reg),
    .ce(grp_fu_468_ce),
    .dout(grp_fu_468_p2)
);

mobilenet_mac_muladd_16s_8s_24s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_24s_25_4_0_U365(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b2_read_reg_658),
    .din1(w2_read_reg_663),
    .din2(grp_fu_440_p2),
    .ce(grp_fu_475_ce),
    .dout(grp_fu_475_p3)
);

mobilenet_mac_muladd_16s_8s_24s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_24s_25_4_0_U366(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b6_read_reg_628),
    .din1(w6_read_reg_633),
    .din2(grp_fu_447_p2),
    .ce(grp_fu_483_ce),
    .dout(grp_fu_483_p3)
);

mobilenet_mac_muladd_16s_8s_24s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_24s_25_4_0_U367(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b9_read_reg_608),
    .din1(w9_read_reg_613),
    .din2(grp_fu_454_p2),
    .ce(grp_fu_491_ce),
    .dout(grp_fu_491_p3)
);

mobilenet_mac_muladd_16s_8s_24s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_24s_25_4_0_U368(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b11_read_reg_598),
    .din1(w11_read_reg_603),
    .din2(grp_fu_461_p2),
    .ce(grp_fu_499_ce),
    .dout(grp_fu_499_p3)
);

mobilenet_mac_muladd_16s_8s_24s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_24s_25_4_0_U369(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b14_read_reg_578),
    .din1(w14_read_reg_583),
    .din2(grp_fu_468_p2),
    .ce(grp_fu_507_ce),
    .dout(grp_fu_507_p3)
);

mobilenet_mac_muladd_16s_8s_25s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 25 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_25s_25_4_0_U370(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b1_read_reg_668_pp0_iter1_reg),
    .din1(w1_read_reg_673_pp0_iter1_reg),
    .din2(grp_fu_475_p3),
    .ce(grp_fu_515_ce),
    .dout(grp_fu_515_p3)
);

mobilenet_mac_muladd_16s_8s_25s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 25 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_25s_25_4_0_U371(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b4_read_reg_638_pp0_iter1_reg),
    .din1(w4_read_reg_643_pp0_iter1_reg),
    .din2(grp_fu_483_p3),
    .ce(grp_fu_524_ce),
    .dout(grp_fu_524_p3)
);

mobilenet_mac_muladd_16s_8s_25s_25_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 25 ),
    .dout_WIDTH( 25 ))
mac_muladd_16s_8s_25s_25_4_0_U372(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b12_read_reg_588_pp0_iter1_reg),
    .din1(w12_read_reg_593_pp0_iter1_reg),
    .din2(grp_fu_507_p3),
    .ce(grp_fu_532_ce),
    .dout(grp_fu_532_p3)
);

mobilenet_mac_muladd_16s_8s_25s_26_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 25 ),
    .dout_WIDTH( 26 ))
mac_muladd_16s_8s_25s_26_4_0_U373(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b3_read_reg_648_pp0_iter2_reg),
    .din1(w3_read_reg_653_pp0_iter2_reg),
    .din2(grp_fu_515_p3),
    .ce(grp_fu_541_ce),
    .dout(grp_fu_541_p3)
);

mobilenet_mac_muladd_16s_8s_26s_27_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 27 ))
mac_muladd_16s_8s_26s_27_4_0_U374(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b7_read_reg_618_pp0_iter3_reg),
    .din1(w7_read_reg_623_pp0_iter3_reg),
    .din2(empty_646_fu_403_p2),
    .ce(grp_fu_550_ce),
    .dout(grp_fu_550_p3)
);

mobilenet_mac_muladd_16s_8s_27s_28_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_8s_27s_28_4_0_U375(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b15_read_reg_568_pp0_iter4_reg),
    .din1(w15_read_reg_573_pp0_iter4_reg),
    .din2(empty_647_fu_423_p2),
    .ce(grp_fu_559_ce),
    .dout(grp_fu_559_p3)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg[30 : 3] <= p_Val2_s_fu_433_p3[30 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        b0_int_reg <= b0;
        b10_int_reg <= b10;
        b11_int_reg <= b11;
        b12_int_reg <= b12;
        b13_int_reg <= b13;
        b14_int_reg <= b14;
        b15_int_reg <= b15;
        b1_int_reg <= b1;
        b2_int_reg <= b2;
        b3_int_reg <= b3;
        b4_int_reg <= b4;
        b5_int_reg <= b5;
        b6_int_reg <= b6;
        b7_int_reg <= b7;
        b8_int_reg <= b8;
        b9_int_reg <= b9;
        w0_int_reg <= w0;
        w10_int_reg <= w10;
        w11_int_reg <= w11;
        w12_int_reg <= w12;
        w13_int_reg <= w13;
        w14_int_reg <= w14;
        w15_int_reg <= w15;
        w1_int_reg <= w1;
        w2_int_reg <= w2;
        w3_int_reg <= w3;
        w4_int_reg <= w4;
        w5_int_reg <= w5;
        w6_int_reg <= w6;
        w7_int_reg <= w7;
        w8_int_reg <= w8;
        w9_int_reg <= w9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        b11_read_reg_598 <= b11_int_reg;
        b12_read_reg_588 <= b12_int_reg;
        b12_read_reg_588_pp0_iter1_reg <= b12_read_reg_588;
        b14_read_reg_578 <= b14_int_reg;
        b15_read_reg_568 <= b15_int_reg;
        b15_read_reg_568_pp0_iter1_reg <= b15_read_reg_568;
        b15_read_reg_568_pp0_iter2_reg <= b15_read_reg_568_pp0_iter1_reg;
        b15_read_reg_568_pp0_iter3_reg <= b15_read_reg_568_pp0_iter2_reg;
        b15_read_reg_568_pp0_iter4_reg <= b15_read_reg_568_pp0_iter3_reg;
        b1_read_reg_668 <= b1_int_reg;
        b1_read_reg_668_pp0_iter1_reg <= b1_read_reg_668;
        b2_read_reg_658 <= b2_int_reg;
        b3_read_reg_648 <= b3_int_reg;
        b3_read_reg_648_pp0_iter1_reg <= b3_read_reg_648;
        b3_read_reg_648_pp0_iter2_reg <= b3_read_reg_648_pp0_iter1_reg;
        b4_read_reg_638 <= b4_int_reg;
        b4_read_reg_638_pp0_iter1_reg <= b4_read_reg_638;
        b6_read_reg_628 <= b6_int_reg;
        b7_read_reg_618 <= b7_int_reg;
        b7_read_reg_618_pp0_iter1_reg <= b7_read_reg_618;
        b7_read_reg_618_pp0_iter2_reg <= b7_read_reg_618_pp0_iter1_reg;
        b7_read_reg_618_pp0_iter3_reg <= b7_read_reg_618_pp0_iter2_reg;
        b9_read_reg_608 <= b9_int_reg;
        tmp2_reg_893 <= grp_fu_524_p3;
        tmp6_reg_863 <= grp_fu_491_p3;
        tmp6_reg_863_pp0_iter5_reg <= tmp6_reg_863;
        tmp6_reg_863_pp0_iter6_reg <= tmp6_reg_863_pp0_iter5_reg;
        tmp7_reg_898 <= tmp7_fu_394_p2;
        tmp7_reg_898_pp0_iter6_reg <= tmp7_reg_898;
        tmp8_reg_868 <= grp_fu_499_p3;
        w11_read_reg_603 <= w11_int_reg;
        w12_read_reg_593 <= w12_int_reg;
        w12_read_reg_593_pp0_iter1_reg <= w12_read_reg_593;
        w14_read_reg_583 <= w14_int_reg;
        w15_read_reg_573 <= w15_int_reg;
        w15_read_reg_573_pp0_iter1_reg <= w15_read_reg_573;
        w15_read_reg_573_pp0_iter2_reg <= w15_read_reg_573_pp0_iter1_reg;
        w15_read_reg_573_pp0_iter3_reg <= w15_read_reg_573_pp0_iter2_reg;
        w15_read_reg_573_pp0_iter4_reg <= w15_read_reg_573_pp0_iter3_reg;
        w1_read_reg_673 <= w1_int_reg;
        w1_read_reg_673_pp0_iter1_reg <= w1_read_reg_673;
        w2_read_reg_663 <= w2_int_reg;
        w3_read_reg_653 <= w3_int_reg;
        w3_read_reg_653_pp0_iter1_reg <= w3_read_reg_653;
        w3_read_reg_653_pp0_iter2_reg <= w3_read_reg_653_pp0_iter1_reg;
        w4_read_reg_643 <= w4_int_reg;
        w4_read_reg_643_pp0_iter1_reg <= w4_read_reg_643;
        w6_read_reg_633 <= w6_int_reg;
        w7_read_reg_623 <= w7_int_reg;
        w7_read_reg_623_pp0_iter1_reg <= w7_read_reg_623;
        w7_read_reg_623_pp0_iter2_reg <= w7_read_reg_623_pp0_iter1_reg;
        w7_read_reg_623_pp0_iter3_reg <= w7_read_reg_623_pp0_iter2_reg;
        w9_read_reg_613 <= w9_int_reg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = p_Val2_s_fu_433_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_440_ce = 1'b1;
    end else begin
        grp_fu_440_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_447_ce = 1'b1;
    end else begin
        grp_fu_447_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_454_ce = 1'b1;
    end else begin
        grp_fu_454_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_461_ce = 1'b1;
    end else begin
        grp_fu_461_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_468_ce = 1'b1;
    end else begin
        grp_fu_468_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_475_ce = 1'b1;
    end else begin
        grp_fu_475_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_483_ce = 1'b1;
    end else begin
        grp_fu_483_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_491_ce = 1'b1;
    end else begin
        grp_fu_491_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_499_ce = 1'b1;
    end else begin
        grp_fu_499_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_507_ce = 1'b1;
    end else begin
        grp_fu_507_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_515_ce = 1'b1;
    end else begin
        grp_fu_515_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_524_ce = 1'b1;
    end else begin
        grp_fu_524_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_532_ce = 1'b1;
    end else begin
        grp_fu_532_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_541_ce = 1'b1;
    end else begin
        grp_fu_541_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_550_ce = 1'b1;
    end else begin
        grp_fu_550_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_559_ce = 1'b1;
    end else begin
        grp_fu_559_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign empty_646_fu_403_p2 = ($signed(tmp2_cast_fu_400_p1) + $signed(grp_fu_541_p3));

assign empty_647_fu_423_p2 = ($signed(tmp7_cast_fu_420_p1) + $signed(tmp4_fu_415_p2));

assign p_Val2_s_fu_433_p3 = {{grp_fu_559_p3}, {3'd0}};

assign tmp2_cast_fu_400_p1 = tmp2_reg_893;

assign tmp4_fu_415_p2 = ($signed(tmp6_cast_fu_412_p1) + $signed(grp_fu_550_p3));

assign tmp6_cast_fu_412_p1 = tmp6_reg_863_pp0_iter6_reg;

assign tmp7_cast_fu_420_p1 = $signed(tmp7_reg_898_pp0_iter6_reg);

assign tmp7_fu_394_p2 = ($signed(tmp9_cast_fu_391_p1) + $signed(tmp8_cast_fu_388_p1));

assign tmp8_cast_fu_388_p1 = tmp8_reg_868;

assign tmp9_cast_fu_391_p1 = grp_fu_532_p3;

always @ (posedge ap_clk) begin
    ap_return_int_reg[2:0] <= 3'b000;
end

endmodule //mobilenet_compute_engine_16
