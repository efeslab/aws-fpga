// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_copy_to_DDR_pool6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        ddr_pool6,
        ch,
        col,
        row,
        FM_buf_pool_V_0_address0,
        FM_buf_pool_V_0_ce0,
        FM_buf_pool_V_0_q0,
        FM_buf_pool_V_1_address0,
        FM_buf_pool_V_1_ce0,
        FM_buf_pool_V_1_q0,
        FM_buf_pool_V_2_address0,
        FM_buf_pool_V_2_ce0,
        FM_buf_pool_V_2_q0,
        FM_buf_pool_V_3_address0,
        FM_buf_pool_V_3_ce0,
        FM_buf_pool_V_3_q0,
        FM_buf_pool_V_4_address0,
        FM_buf_pool_V_4_ce0,
        FM_buf_pool_V_4_q0,
        FM_buf_pool_V_5_address0,
        FM_buf_pool_V_5_ce0,
        FM_buf_pool_V_5_q0,
        FM_buf_pool_V_6_address0,
        FM_buf_pool_V_6_ce0,
        FM_buf_pool_V_6_q0,
        FM_buf_pool_V_7_address0,
        FM_buf_pool_V_7_ce0,
        FM_buf_pool_V_7_q0,
        FM_buf_pool_V_8_address0,
        FM_buf_pool_V_8_ce0,
        FM_buf_pool_V_8_q0,
        FM_buf_pool_V_9_address0,
        FM_buf_pool_V_9_ce0,
        FM_buf_pool_V_9_q0,
        FM_buf_pool_V_10_address0,
        FM_buf_pool_V_10_ce0,
        FM_buf_pool_V_10_q0,
        FM_buf_pool_V_11_address0,
        FM_buf_pool_V_11_ce0,
        FM_buf_pool_V_11_q0,
        FM_buf_pool_V_12_address0,
        FM_buf_pool_V_12_ce0,
        FM_buf_pool_V_12_q0,
        FM_buf_pool_V_13_address0,
        FM_buf_pool_V_13_ce0,
        FM_buf_pool_V_13_q0,
        FM_buf_pool_V_14_address0,
        FM_buf_pool_V_14_ce0,
        FM_buf_pool_V_14_q0,
        FM_buf_pool_V_15_address0,
        FM_buf_pool_V_15_ce0,
        FM_buf_pool_V_15_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state77 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] ddr_pool6;
input  [2:0] ch;
input  [1:0] col;
input  [1:0] row;
output  [7:0] FM_buf_pool_V_0_address0;
output   FM_buf_pool_V_0_ce0;
input  [15:0] FM_buf_pool_V_0_q0;
output  [7:0] FM_buf_pool_V_1_address0;
output   FM_buf_pool_V_1_ce0;
input  [15:0] FM_buf_pool_V_1_q0;
output  [7:0] FM_buf_pool_V_2_address0;
output   FM_buf_pool_V_2_ce0;
input  [15:0] FM_buf_pool_V_2_q0;
output  [7:0] FM_buf_pool_V_3_address0;
output   FM_buf_pool_V_3_ce0;
input  [15:0] FM_buf_pool_V_3_q0;
output  [7:0] FM_buf_pool_V_4_address0;
output   FM_buf_pool_V_4_ce0;
input  [15:0] FM_buf_pool_V_4_q0;
output  [7:0] FM_buf_pool_V_5_address0;
output   FM_buf_pool_V_5_ce0;
input  [15:0] FM_buf_pool_V_5_q0;
output  [7:0] FM_buf_pool_V_6_address0;
output   FM_buf_pool_V_6_ce0;
input  [15:0] FM_buf_pool_V_6_q0;
output  [7:0] FM_buf_pool_V_7_address0;
output   FM_buf_pool_V_7_ce0;
input  [15:0] FM_buf_pool_V_7_q0;
output  [7:0] FM_buf_pool_V_8_address0;
output   FM_buf_pool_V_8_ce0;
input  [15:0] FM_buf_pool_V_8_q0;
output  [7:0] FM_buf_pool_V_9_address0;
output   FM_buf_pool_V_9_ce0;
input  [15:0] FM_buf_pool_V_9_q0;
output  [7:0] FM_buf_pool_V_10_address0;
output   FM_buf_pool_V_10_ce0;
input  [15:0] FM_buf_pool_V_10_q0;
output  [7:0] FM_buf_pool_V_11_address0;
output   FM_buf_pool_V_11_ce0;
input  [15:0] FM_buf_pool_V_11_q0;
output  [7:0] FM_buf_pool_V_12_address0;
output   FM_buf_pool_V_12_ce0;
input  [15:0] FM_buf_pool_V_12_q0;
output  [7:0] FM_buf_pool_V_13_address0;
output   FM_buf_pool_V_13_ce0;
input  [15:0] FM_buf_pool_V_13_q0;
output  [7:0] FM_buf_pool_V_14_address0;
output   FM_buf_pool_V_14_ce0;
input  [15:0] FM_buf_pool_V_14_q0;
output  [7:0] FM_buf_pool_V_15_address0;
output   FM_buf_pool_V_15_ce0;
input  [15:0] FM_buf_pool_V_15_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg FM_buf_pool_V_0_ce0;
reg FM_buf_pool_V_1_ce0;
reg FM_buf_pool_V_2_ce0;
reg FM_buf_pool_V_3_ce0;
reg FM_buf_pool_V_4_ce0;
reg FM_buf_pool_V_5_ce0;
reg FM_buf_pool_V_6_ce0;
reg FM_buf_pool_V_7_ce0;
reg FM_buf_pool_V_8_ce0;
reg FM_buf_pool_V_9_ce0;
reg FM_buf_pool_V_10_ce0;
reg FM_buf_pool_V_11_ce0;
reg FM_buf_pool_V_12_ce0;
reg FM_buf_pool_V_13_ce0;
reg FM_buf_pool_V_14_ce0;
reg FM_buf_pool_V_15_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln289_reg_1002;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter4_reg;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter5_reg;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter74;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter73_reg;
reg   [11:0] indvar_flatten36_reg_401;
reg   [4:0] i_reg_412;
reg   [8:0] indvar_flatten_reg_424;
reg   [3:0] j_reg_435;
reg   [4:0] k_reg_447;
wire   [7:0] zext_ln289_fu_476_p1;
reg   [7:0] zext_ln289_reg_965;
wire   [5:0] or_ln289_cast7_fu_486_p1;
reg   [5:0] or_ln289_cast7_reg_971;
wire   [63:0] empty_618_fu_518_p2;
reg   [63:0] empty_618_reg_977;
wire   [5:0] p_cast6_fu_524_p2;
reg   [5:0] p_cast6_reg_982;
wire   [12:0] p_mid126_fu_534_p2;
reg   [12:0] p_mid126_reg_987;
wire   [5:0] empty_619_fu_540_p1;
reg   [5:0] empty_619_reg_992;
wire   [11:0] add_ln289_2_fu_544_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
wire    ap_block_state65_pp0_stage0_iter63;
wire    ap_block_state66_pp0_stage0_iter64;
wire    ap_block_state67_pp0_stage0_iter65;
wire    ap_block_state68_pp0_stage0_iter66;
wire    ap_block_state69_pp0_stage0_iter67;
wire    ap_block_state70_pp0_stage0_iter68;
wire    ap_block_state71_pp0_stage0_iter69;
wire    ap_block_state72_pp0_stage0_iter70;
wire    ap_block_state73_pp0_stage0_iter71;
wire    ap_block_state74_pp0_stage0_iter72;
wire    ap_block_state75_pp0_stage0_iter73;
reg    ap_block_state76_pp0_stage0_iter74;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln289_fu_550_p2;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter1_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter2_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter3_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter6_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter7_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter8_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter9_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter10_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter11_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter12_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter13_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter14_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter15_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter16_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter17_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter18_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter19_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter20_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter21_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter22_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter23_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter24_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter25_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter26_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter27_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter28_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter29_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter30_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter31_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter32_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter33_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter34_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter35_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter36_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter37_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter38_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter39_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter40_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter41_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter42_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter43_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter44_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter45_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter46_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter47_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter48_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter49_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter50_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter51_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter52_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter53_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter54_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter55_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter56_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter57_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter58_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter59_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter60_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter61_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter62_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter63_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter64_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter65_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter66_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter67_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter68_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter69_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter70_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter71_reg;
reg   [0:0] icmp_ln289_reg_1002_pp0_iter72_reg;
wire   [4:0] add_ln289_fu_556_p2;
reg   [4:0] add_ln289_reg_1006;
wire   [0:0] icmp_ln290_fu_562_p2;
reg   [0:0] icmp_ln290_reg_1011;
reg   [0:0] icmp_ln290_reg_1011_pp0_iter1_reg;
reg   [0:0] icmp_ln290_reg_1011_pp0_iter2_reg;
reg   [0:0] icmp_ln290_reg_1011_pp0_iter3_reg;
wire   [4:0] select_ln289_1_fu_576_p3;
reg   [4:0] select_ln289_1_reg_1019;
wire   [3:0] trunc_ln289_fu_584_p1;
reg   [3:0] trunc_ln289_reg_1024;
reg   [3:0] trunc_ln289_reg_1024_pp0_iter1_reg;
reg   [3:0] trunc_ln289_reg_1024_pp0_iter2_reg;
reg   [3:0] trunc_ln289_reg_1024_pp0_iter3_reg;
reg   [3:0] trunc_ln289_reg_1024_pp0_iter4_reg;
wire   [0:0] and_ln289_fu_600_p2;
reg   [0:0] and_ln289_reg_1029;
reg   [0:0] and_ln289_reg_1029_pp0_iter1_reg;
reg   [0:0] and_ln289_reg_1029_pp0_iter2_reg;
reg   [0:0] and_ln289_reg_1029_pp0_iter3_reg;
wire   [3:0] indvars_iv_next6_fu_606_p2;
reg   [3:0] indvars_iv_next6_reg_1035;
wire   [4:0] select_ln290_fu_618_p3;
reg   [4:0] select_ln290_reg_1040;
reg   [4:0] select_ln290_reg_1040_pp0_iter1_reg;
reg   [4:0] select_ln290_reg_1040_pp0_iter2_reg;
reg   [4:0] select_ln290_reg_1040_pp0_iter3_reg;
wire   [3:0] select_ln290_1_fu_626_p3;
reg   [3:0] select_ln290_1_reg_1046;
reg   [3:0] select_ln290_1_reg_1046_pp0_iter1_reg;
reg   [3:0] select_ln290_1_reg_1046_pp0_iter2_reg;
reg   [3:0] select_ln290_1_reg_1046_pp0_iter3_reg;
wire   [4:0] add_ln293_fu_634_p2;
wire   [8:0] select_ln290_4_fu_646_p3;
wire   [5:0] add_ln293_2_fu_836_p2;
reg   [5:0] add_ln293_2_reg_1143;
reg   [57:0] trunc_ln_reg_1149;
wire   [63:0] shl_ln293_fu_896_p2;
reg   [63:0] shl_ln293_reg_1154;
wire   [511:0] shl_ln293_1_fu_913_p2;
reg   [511:0] shl_ln293_1_reg_1159;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter4_state6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg   [4:0] ap_phi_mux_i_phi_fu_416_p4;
reg   [3:0] ap_phi_mux_j_phi_fu_439_p4;
wire   [63:0] zext_ln293_7_fu_784_p1;
wire  signed [63:0] sext_ln293_fu_919_p1;
reg    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln_fu_458_p3;
wire   [4:0] tmp_fu_466_p4;
wire   [4:0] or_ln289_fu_480_p2;
wire   [6:0] tmp_s_fu_490_p4;
wire   [6:0] empty_fu_500_p2;
wire   [63:0] zext_ln289_1_fu_506_p1;
wire   [5:0] empty_617_fu_514_p1;
wire   [5:0] empty_616_fu_510_p1;
wire   [4:0] p_mid126_fu_534_p0;
wire   [8:0] p_mid126_fu_534_p1;
wire   [0:0] icmp_ln291_fu_594_p2;
wire   [0:0] xor_ln289_fu_588_p2;
wire   [3:0] select_ln289_fu_568_p3;
wire   [0:0] or_ln290_fu_612_p2;
wire   [8:0] add_ln290_fu_640_p2;
wire   [20:0] grp_fu_929_p3;
wire   [13:0] grp_fu_938_p3;
wire   [5:0] empty_622_fu_668_p1;
wire   [5:0] empty_625_fu_671_p1;
wire   [20:0] grp_fu_947_p3;
wire   [5:0] empty_627_fu_680_p1;
wire   [20:0] select_ln289_3_fu_690_p3;
wire   [63:0] zext_ln289_4_fu_695_p1;
wire   [5:0] add_ln293_5_fu_704_p2;
wire   [5:0] add_ln293_3_fu_674_p2;
wire   [5:0] tmp_16_fu_723_p3;
wire   [7:0] p_shl_cast_fu_716_p3;
wire   [7:0] zext_ln293_5_fu_730_p1;
wire   [13:0] grp_fu_956_p3;
wire   [12:0] trunc_ln290_1_fu_743_p1;
wire   [12:0] trunc_ln290_fu_740_p1;
wire   [12:0] select_ln289_5_fu_746_p3;
wire   [5:0] select_ln289_2_fu_683_p3;
wire   [5:0] empty_628_fu_759_p1;
wire   [5:0] add_ln293_8_fu_762_p2;
wire   [5:0] select_ln289_4_fu_709_p3;
wire   [7:0] add_ln293_7_fu_734_p2;
wire   [7:0] zext_ln293_6_fu_775_p1;
wire   [7:0] add_ln293_9_fu_778_p2;
wire   [5:0] shl_ln2_fu_804_p3;
wire   [12:0] select_ln290_2_fu_752_p3;
wire   [12:0] zext_ln293_2_fu_811_p1;
wire   [12:0] add_ln293_4_fu_815_p2;
wire   [63:0] zext_ln293_4_fu_821_p1;
wire   [63:0] add_ln289_1_fu_699_p2;
wire   [5:0] add_ln293_6_fu_831_p2;
wire   [5:0] select_ln290_3_fu_768_p3;
wire   [63:0] add_ln293_1_fu_825_p2;
wire   [15:0] tmp_6_fu_852_p18;
wire   [63:0] zext_ln293_1_fu_893_p1;
wire   [8:0] shl_ln293_2_fu_902_p3;
wire   [511:0] zext_ln293_fu_889_p1;
wire   [511:0] zext_ln293_3_fu_909_p1;
wire   [6:0] grp_fu_929_p0;
wire   [4:0] grp_fu_929_p1;
wire   [13:0] grp_fu_929_p2;
wire   [4:0] grp_fu_938_p0;
wire   [3:0] grp_fu_938_p1;
wire   [8:0] grp_fu_938_p2;
wire   [6:0] grp_fu_947_p0;
wire   [4:0] grp_fu_947_p1;
wire   [13:0] grp_fu_947_p2;
wire   [4:0] grp_fu_956_p0;
wire   [3:0] grp_fu_956_p1;
wire   [8:0] grp_fu_956_p2;
reg    grp_fu_929_ce;
reg    grp_fu_938_ce;
reg    grp_fu_947_ce;
reg    grp_fu_956_ce;
wire    ap_CS_fsm_state77;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_929_p10;
wire   [5:0] grp_fu_938_p10;
wire   [7:0] grp_fu_947_p10;
wire   [5:0] grp_fu_956_p10;
wire   [12:0] p_mid126_fu_534_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
end

mobilenet_mul_5ns_9ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
mul_5ns_9ns_13_1_1_U537(
    .din0(p_mid126_fu_534_p0),
    .din1(p_mid126_fu_534_p1),
    .dout(p_mid126_fu_534_p2)
);

mobilenet_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U538(
    .din0(FM_buf_pool_V_0_q0),
    .din1(FM_buf_pool_V_1_q0),
    .din2(FM_buf_pool_V_2_q0),
    .din3(FM_buf_pool_V_3_q0),
    .din4(FM_buf_pool_V_4_q0),
    .din5(FM_buf_pool_V_5_q0),
    .din6(FM_buf_pool_V_6_q0),
    .din7(FM_buf_pool_V_7_q0),
    .din8(FM_buf_pool_V_8_q0),
    .din9(FM_buf_pool_V_9_q0),
    .din10(FM_buf_pool_V_10_q0),
    .din11(FM_buf_pool_V_11_q0),
    .din12(FM_buf_pool_V_12_q0),
    .din13(FM_buf_pool_V_13_q0),
    .din14(FM_buf_pool_V_14_q0),
    .din15(FM_buf_pool_V_15_q0),
    .din16(trunc_ln289_reg_1024_pp0_iter4_reg),
    .dout(tmp_6_fu_852_p18)
);

mobilenet_am_addmul_7ns_5ns_14ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 21 ))
am_addmul_7ns_5ns_14ns_21_4_1_U539(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_929_p0),
    .din1(grp_fu_929_p1),
    .din2(grp_fu_929_p2),
    .ce(grp_fu_929_ce),
    .dout(grp_fu_929_p3)
);

mobilenet_am_addmul_5ns_4ns_9ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 14 ))
am_addmul_5ns_4ns_9ns_14_4_1_U540(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_938_p0),
    .din1(grp_fu_938_p1),
    .din2(grp_fu_938_p2),
    .ce(grp_fu_938_ce),
    .dout(grp_fu_938_p3)
);

mobilenet_am_addmul_7ns_5ns_14ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 21 ))
am_addmul_7ns_5ns_14ns_21_4_1_U541(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_947_p0),
    .din1(grp_fu_947_p1),
    .din2(grp_fu_947_p2),
    .ce(grp_fu_947_ce),
    .dout(grp_fu_947_p3)
);

mobilenet_am_addmul_5ns_4ns_9ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 14 ))
am_addmul_5ns_4ns_9ns_14_4_1_U542(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_956_p0),
    .din1(grp_fu_956_p1),
    .din2(grp_fu_956_p2),
    .ce(grp_fu_956_ce),
    .dout(grp_fu_956_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter4_state6)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter74 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_412 <= select_ln289_1_reg_1019;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_412 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_550_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten36_reg_401 <= add_ln289_2_fu_544_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten36_reg_401 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_550_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_424 <= select_ln290_4_fu_646_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_424 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_435 <= select_ln290_1_reg_1046;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_435 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_550_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_447 <= add_ln293_fu_634_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_447 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln289_reg_1006 <= add_ln289_fu_556_p2;
        and_ln289_reg_1029 <= and_ln289_fu_600_p2;
        icmp_ln290_reg_1011 <= icmp_ln290_fu_562_p2;
        indvars_iv_next6_reg_1035 <= indvars_iv_next6_fu_606_p2;
        select_ln290_reg_1040 <= select_ln290_fu_618_p3;
        trunc_ln289_reg_1024 <= trunc_ln289_fu_584_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_reg_1002_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln293_2_reg_1143 <= add_ln293_2_fu_836_p2;
        trunc_ln_reg_1149 <= {{add_ln293_1_fu_825_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln289_reg_1029_pp0_iter1_reg <= and_ln289_reg_1029;
        icmp_ln289_reg_1002 <= icmp_ln289_fu_550_p2;
        icmp_ln289_reg_1002_pp0_iter1_reg <= icmp_ln289_reg_1002;
        icmp_ln290_reg_1011_pp0_iter1_reg <= icmp_ln290_reg_1011;
        select_ln290_1_reg_1046_pp0_iter1_reg <= select_ln290_1_reg_1046;
        select_ln290_reg_1040_pp0_iter1_reg <= select_ln290_reg_1040;
        trunc_ln289_reg_1024_pp0_iter1_reg <= trunc_ln289_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln289_reg_1029_pp0_iter2_reg <= and_ln289_reg_1029_pp0_iter1_reg;
        and_ln289_reg_1029_pp0_iter3_reg <= and_ln289_reg_1029_pp0_iter2_reg;
        icmp_ln289_reg_1002_pp0_iter10_reg <= icmp_ln289_reg_1002_pp0_iter9_reg;
        icmp_ln289_reg_1002_pp0_iter11_reg <= icmp_ln289_reg_1002_pp0_iter10_reg;
        icmp_ln289_reg_1002_pp0_iter12_reg <= icmp_ln289_reg_1002_pp0_iter11_reg;
        icmp_ln289_reg_1002_pp0_iter13_reg <= icmp_ln289_reg_1002_pp0_iter12_reg;
        icmp_ln289_reg_1002_pp0_iter14_reg <= icmp_ln289_reg_1002_pp0_iter13_reg;
        icmp_ln289_reg_1002_pp0_iter15_reg <= icmp_ln289_reg_1002_pp0_iter14_reg;
        icmp_ln289_reg_1002_pp0_iter16_reg <= icmp_ln289_reg_1002_pp0_iter15_reg;
        icmp_ln289_reg_1002_pp0_iter17_reg <= icmp_ln289_reg_1002_pp0_iter16_reg;
        icmp_ln289_reg_1002_pp0_iter18_reg <= icmp_ln289_reg_1002_pp0_iter17_reg;
        icmp_ln289_reg_1002_pp0_iter19_reg <= icmp_ln289_reg_1002_pp0_iter18_reg;
        icmp_ln289_reg_1002_pp0_iter20_reg <= icmp_ln289_reg_1002_pp0_iter19_reg;
        icmp_ln289_reg_1002_pp0_iter21_reg <= icmp_ln289_reg_1002_pp0_iter20_reg;
        icmp_ln289_reg_1002_pp0_iter22_reg <= icmp_ln289_reg_1002_pp0_iter21_reg;
        icmp_ln289_reg_1002_pp0_iter23_reg <= icmp_ln289_reg_1002_pp0_iter22_reg;
        icmp_ln289_reg_1002_pp0_iter24_reg <= icmp_ln289_reg_1002_pp0_iter23_reg;
        icmp_ln289_reg_1002_pp0_iter25_reg <= icmp_ln289_reg_1002_pp0_iter24_reg;
        icmp_ln289_reg_1002_pp0_iter26_reg <= icmp_ln289_reg_1002_pp0_iter25_reg;
        icmp_ln289_reg_1002_pp0_iter27_reg <= icmp_ln289_reg_1002_pp0_iter26_reg;
        icmp_ln289_reg_1002_pp0_iter28_reg <= icmp_ln289_reg_1002_pp0_iter27_reg;
        icmp_ln289_reg_1002_pp0_iter29_reg <= icmp_ln289_reg_1002_pp0_iter28_reg;
        icmp_ln289_reg_1002_pp0_iter2_reg <= icmp_ln289_reg_1002_pp0_iter1_reg;
        icmp_ln289_reg_1002_pp0_iter30_reg <= icmp_ln289_reg_1002_pp0_iter29_reg;
        icmp_ln289_reg_1002_pp0_iter31_reg <= icmp_ln289_reg_1002_pp0_iter30_reg;
        icmp_ln289_reg_1002_pp0_iter32_reg <= icmp_ln289_reg_1002_pp0_iter31_reg;
        icmp_ln289_reg_1002_pp0_iter33_reg <= icmp_ln289_reg_1002_pp0_iter32_reg;
        icmp_ln289_reg_1002_pp0_iter34_reg <= icmp_ln289_reg_1002_pp0_iter33_reg;
        icmp_ln289_reg_1002_pp0_iter35_reg <= icmp_ln289_reg_1002_pp0_iter34_reg;
        icmp_ln289_reg_1002_pp0_iter36_reg <= icmp_ln289_reg_1002_pp0_iter35_reg;
        icmp_ln289_reg_1002_pp0_iter37_reg <= icmp_ln289_reg_1002_pp0_iter36_reg;
        icmp_ln289_reg_1002_pp0_iter38_reg <= icmp_ln289_reg_1002_pp0_iter37_reg;
        icmp_ln289_reg_1002_pp0_iter39_reg <= icmp_ln289_reg_1002_pp0_iter38_reg;
        icmp_ln289_reg_1002_pp0_iter3_reg <= icmp_ln289_reg_1002_pp0_iter2_reg;
        icmp_ln289_reg_1002_pp0_iter40_reg <= icmp_ln289_reg_1002_pp0_iter39_reg;
        icmp_ln289_reg_1002_pp0_iter41_reg <= icmp_ln289_reg_1002_pp0_iter40_reg;
        icmp_ln289_reg_1002_pp0_iter42_reg <= icmp_ln289_reg_1002_pp0_iter41_reg;
        icmp_ln289_reg_1002_pp0_iter43_reg <= icmp_ln289_reg_1002_pp0_iter42_reg;
        icmp_ln289_reg_1002_pp0_iter44_reg <= icmp_ln289_reg_1002_pp0_iter43_reg;
        icmp_ln289_reg_1002_pp0_iter45_reg <= icmp_ln289_reg_1002_pp0_iter44_reg;
        icmp_ln289_reg_1002_pp0_iter46_reg <= icmp_ln289_reg_1002_pp0_iter45_reg;
        icmp_ln289_reg_1002_pp0_iter47_reg <= icmp_ln289_reg_1002_pp0_iter46_reg;
        icmp_ln289_reg_1002_pp0_iter48_reg <= icmp_ln289_reg_1002_pp0_iter47_reg;
        icmp_ln289_reg_1002_pp0_iter49_reg <= icmp_ln289_reg_1002_pp0_iter48_reg;
        icmp_ln289_reg_1002_pp0_iter4_reg <= icmp_ln289_reg_1002_pp0_iter3_reg;
        icmp_ln289_reg_1002_pp0_iter50_reg <= icmp_ln289_reg_1002_pp0_iter49_reg;
        icmp_ln289_reg_1002_pp0_iter51_reg <= icmp_ln289_reg_1002_pp0_iter50_reg;
        icmp_ln289_reg_1002_pp0_iter52_reg <= icmp_ln289_reg_1002_pp0_iter51_reg;
        icmp_ln289_reg_1002_pp0_iter53_reg <= icmp_ln289_reg_1002_pp0_iter52_reg;
        icmp_ln289_reg_1002_pp0_iter54_reg <= icmp_ln289_reg_1002_pp0_iter53_reg;
        icmp_ln289_reg_1002_pp0_iter55_reg <= icmp_ln289_reg_1002_pp0_iter54_reg;
        icmp_ln289_reg_1002_pp0_iter56_reg <= icmp_ln289_reg_1002_pp0_iter55_reg;
        icmp_ln289_reg_1002_pp0_iter57_reg <= icmp_ln289_reg_1002_pp0_iter56_reg;
        icmp_ln289_reg_1002_pp0_iter58_reg <= icmp_ln289_reg_1002_pp0_iter57_reg;
        icmp_ln289_reg_1002_pp0_iter59_reg <= icmp_ln289_reg_1002_pp0_iter58_reg;
        icmp_ln289_reg_1002_pp0_iter5_reg <= icmp_ln289_reg_1002_pp0_iter4_reg;
        icmp_ln289_reg_1002_pp0_iter60_reg <= icmp_ln289_reg_1002_pp0_iter59_reg;
        icmp_ln289_reg_1002_pp0_iter61_reg <= icmp_ln289_reg_1002_pp0_iter60_reg;
        icmp_ln289_reg_1002_pp0_iter62_reg <= icmp_ln289_reg_1002_pp0_iter61_reg;
        icmp_ln289_reg_1002_pp0_iter63_reg <= icmp_ln289_reg_1002_pp0_iter62_reg;
        icmp_ln289_reg_1002_pp0_iter64_reg <= icmp_ln289_reg_1002_pp0_iter63_reg;
        icmp_ln289_reg_1002_pp0_iter65_reg <= icmp_ln289_reg_1002_pp0_iter64_reg;
        icmp_ln289_reg_1002_pp0_iter66_reg <= icmp_ln289_reg_1002_pp0_iter65_reg;
        icmp_ln289_reg_1002_pp0_iter67_reg <= icmp_ln289_reg_1002_pp0_iter66_reg;
        icmp_ln289_reg_1002_pp0_iter68_reg <= icmp_ln289_reg_1002_pp0_iter67_reg;
        icmp_ln289_reg_1002_pp0_iter69_reg <= icmp_ln289_reg_1002_pp0_iter68_reg;
        icmp_ln289_reg_1002_pp0_iter6_reg <= icmp_ln289_reg_1002_pp0_iter5_reg;
        icmp_ln289_reg_1002_pp0_iter70_reg <= icmp_ln289_reg_1002_pp0_iter69_reg;
        icmp_ln289_reg_1002_pp0_iter71_reg <= icmp_ln289_reg_1002_pp0_iter70_reg;
        icmp_ln289_reg_1002_pp0_iter72_reg <= icmp_ln289_reg_1002_pp0_iter71_reg;
        icmp_ln289_reg_1002_pp0_iter73_reg <= icmp_ln289_reg_1002_pp0_iter72_reg;
        icmp_ln289_reg_1002_pp0_iter7_reg <= icmp_ln289_reg_1002_pp0_iter6_reg;
        icmp_ln289_reg_1002_pp0_iter8_reg <= icmp_ln289_reg_1002_pp0_iter7_reg;
        icmp_ln289_reg_1002_pp0_iter9_reg <= icmp_ln289_reg_1002_pp0_iter8_reg;
        icmp_ln290_reg_1011_pp0_iter2_reg <= icmp_ln290_reg_1011_pp0_iter1_reg;
        icmp_ln290_reg_1011_pp0_iter3_reg <= icmp_ln290_reg_1011_pp0_iter2_reg;
        select_ln290_1_reg_1046_pp0_iter2_reg <= select_ln290_1_reg_1046_pp0_iter1_reg;
        select_ln290_1_reg_1046_pp0_iter3_reg <= select_ln290_1_reg_1046_pp0_iter2_reg;
        select_ln290_reg_1040_pp0_iter2_reg <= select_ln290_reg_1040_pp0_iter1_reg;
        select_ln290_reg_1040_pp0_iter3_reg <= select_ln290_reg_1040_pp0_iter2_reg;
        trunc_ln289_reg_1024_pp0_iter2_reg <= trunc_ln289_reg_1024_pp0_iter1_reg;
        trunc_ln289_reg_1024_pp0_iter3_reg <= trunc_ln289_reg_1024_pp0_iter2_reg;
        trunc_ln289_reg_1024_pp0_iter4_reg <= trunc_ln289_reg_1024_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_618_reg_977 <= empty_618_fu_518_p2;
        empty_619_reg_992 <= empty_619_fu_540_p1;
        or_ln289_cast7_reg_971[4 : 1] <= or_ln289_cast7_fu_486_p1[4 : 1];
        p_cast6_reg_982 <= p_cast6_fu_524_p2;
        p_mid126_reg_987 <= p_mid126_fu_534_p2;
        zext_ln289_reg_965[6 : 4] <= zext_ln289_fu_476_p1[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_550_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln289_1_reg_1019 <= select_ln289_1_fu_576_p3;
        select_ln290_1_reg_1046 <= select_ln290_1_fu_626_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_reg_1002_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shl_ln293_1_reg_1159 <= shl_ln293_1_fu_913_p2;
        shl_ln293_reg_1154 <= shl_ln293_fu_896_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_0_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_10_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_11_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_12_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_13_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_14_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_15_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_1_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_2_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_3_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_4_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_5_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_6_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_7_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_8_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf_pool_V_9_ce0 = 1'b1;
    end else begin
        FM_buf_pool_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_fu_550_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_416_p4 = select_ln289_1_reg_1019;
    end else begin
        ap_phi_mux_i_phi_fu_416_p4 = i_reg_412;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_439_p4 = select_ln290_1_reg_1046;
    end else begin
        ap_phi_mux_j_phi_fu_439_p4 = j_reg_435;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_929_ce = 1'b1;
    end else begin
        grp_fu_929_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_938_ce = 1'b1;
    end else begin
        grp_fu_938_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_947_ce = 1'b1;
    end else begin
        grp_fu_947_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_956_ce = 1'b1;
    end else begin
        grp_fu_956_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_reg_1002_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)) & ~((ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FM_buf_pool_V_0_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_10_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_11_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_12_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_13_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_14_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_15_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_1_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_2_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_3_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_4_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_5_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_6_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_7_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_8_address0 = zext_ln293_7_fu_784_p1;

assign FM_buf_pool_V_9_address0 = zext_ln293_7_fu_784_p1;

assign add_ln289_1_fu_699_p2 = (empty_618_reg_977 + zext_ln289_4_fu_695_p1);

assign add_ln289_2_fu_544_p2 = (indvar_flatten36_reg_401 + 12'd1);

assign add_ln289_fu_556_p2 = (ap_phi_mux_i_phi_fu_416_p4 + 5'd1);

assign add_ln290_fu_640_p2 = (indvar_flatten_reg_424 + 9'd1);

assign add_ln293_1_fu_825_p2 = (zext_ln293_4_fu_821_p1 + add_ln289_1_fu_699_p2);

assign add_ln293_2_fu_836_p2 = (add_ln293_6_fu_831_p2 + select_ln290_3_fu_768_p3);

assign add_ln293_3_fu_674_p2 = (empty_622_fu_668_p1 + empty_625_fu_671_p1);

assign add_ln293_4_fu_815_p2 = (select_ln290_2_fu_752_p3 + zext_ln293_2_fu_811_p1);

assign add_ln293_5_fu_704_p2 = (empty_627_fu_680_p1 + empty_619_reg_992);

assign add_ln293_6_fu_831_p2 = (p_cast6_reg_982 + shl_ln2_fu_804_p3);

assign add_ln293_7_fu_734_p2 = (p_shl_cast_fu_716_p3 + zext_ln293_5_fu_730_p1);

assign add_ln293_8_fu_762_p2 = (select_ln289_2_fu_683_p3 + empty_628_fu_759_p1);

assign add_ln293_9_fu_778_p2 = (add_ln293_7_fu_734_p2 + zext_ln293_6_fu_775_p1);

assign add_ln293_fu_634_p2 = (select_ln290_fu_618_p3 + 5'd1);

assign and_ln289_fu_600_p2 = (xor_ln289_fu_588_p2 & icmp_ln291_fu_594_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0) & (ap_enable_reg_pp0_iter74 == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_pp0_stage0_iter74 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln289_reg_1002_pp0_iter73_reg == 1'd0));
end

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln289_reg_1002_pp0_iter4_reg == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem_WREADY == 1'b0) & (icmp_ln289_reg_1002_pp0_iter5_reg == 1'd0));
end

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_616_fu_510_p1 = ddr_pool6[5:0];

assign empty_617_fu_514_p1 = empty_fu_500_p2[5:0];

assign empty_618_fu_518_p2 = (zext_ln289_1_fu_506_p1 + ddr_pool6);

assign empty_619_fu_540_p1 = p_mid126_fu_534_p2[5:0];

assign empty_622_fu_668_p1 = grp_fu_929_p3[5:0];

assign empty_625_fu_671_p1 = grp_fu_938_p3[5:0];

assign empty_627_fu_680_p1 = grp_fu_947_p3[5:0];

assign empty_628_fu_759_p1 = grp_fu_956_p3[5:0];

assign empty_fu_500_p2 = (tmp_s_fu_490_p4 | 7'd2);

assign grp_fu_929_p0 = zext_ln289_reg_965;

assign grp_fu_929_p1 = grp_fu_929_p10;

assign grp_fu_929_p10 = i_reg_412;

assign grp_fu_929_p2 = 21'd6888;

assign grp_fu_938_p0 = or_ln289_cast7_reg_971;

assign grp_fu_938_p1 = grp_fu_938_p10;

assign grp_fu_938_p10 = j_reg_435;

assign grp_fu_938_p2 = 14'd164;

assign grp_fu_947_p0 = zext_ln289_reg_965;

assign grp_fu_947_p1 = grp_fu_947_p10;

assign grp_fu_947_p10 = add_ln289_reg_1006;

assign grp_fu_947_p2 = 21'd6888;

assign grp_fu_956_p0 = or_ln289_cast7_reg_971;

assign grp_fu_956_p1 = grp_fu_956_p10;

assign grp_fu_956_p10 = indvars_iv_next6_reg_1035;

assign grp_fu_956_p2 = 14'd164;

assign icmp_ln289_fu_550_p2 = ((indvar_flatten36_reg_401 == 12'd3200) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_562_p2 = ((indvar_flatten_reg_424 == 9'd200) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_594_p2 = ((k_reg_447 == 5'd20) ? 1'b1 : 1'b0);

assign indvars_iv_next6_fu_606_p2 = (select_ln289_fu_568_p3 + 4'd1);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = sext_ln293_fu_919_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = shl_ln293_1_reg_1159;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = shl_ln293_reg_1154;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln289_cast7_fu_486_p1 = or_ln289_fu_480_p2;

assign or_ln289_fu_480_p2 = (tmp_fu_466_p4 | 5'd1);

assign or_ln290_fu_612_p2 = (icmp_ln290_fu_562_p2 | and_ln289_fu_600_p2);

assign p_cast6_fu_524_p2 = (empty_617_fu_514_p1 + empty_616_fu_510_p1);

assign p_mid126_fu_534_p0 = p_mid126_fu_534_p00;

assign p_mid126_fu_534_p00 = or_ln289_fu_480_p2;

assign p_mid126_fu_534_p1 = 13'd164;

assign p_shl_cast_fu_716_p3 = {{select_ln290_1_reg_1046_pp0_iter3_reg}, {4'd0}};

assign select_ln289_1_fu_576_p3 = ((icmp_ln290_fu_562_p2[0:0] == 1'b1) ? add_ln289_fu_556_p2 : ap_phi_mux_i_phi_fu_416_p4);

assign select_ln289_2_fu_683_p3 = ((icmp_ln290_reg_1011_pp0_iter3_reg[0:0] == 1'b1) ? empty_627_fu_680_p1 : empty_622_fu_668_p1);

assign select_ln289_3_fu_690_p3 = ((icmp_ln290_reg_1011_pp0_iter3_reg[0:0] == 1'b1) ? grp_fu_947_p3 : grp_fu_929_p3);

assign select_ln289_4_fu_709_p3 = ((icmp_ln290_reg_1011_pp0_iter3_reg[0:0] == 1'b1) ? add_ln293_5_fu_704_p2 : add_ln293_3_fu_674_p2);

assign select_ln289_5_fu_746_p3 = ((icmp_ln290_reg_1011_pp0_iter3_reg[0:0] == 1'b1) ? p_mid126_reg_987 : trunc_ln290_1_fu_743_p1);

assign select_ln289_fu_568_p3 = ((icmp_ln290_fu_562_p2[0:0] == 1'b1) ? 4'd0 : ap_phi_mux_j_phi_fu_439_p4);

assign select_ln290_1_fu_626_p3 = ((and_ln289_fu_600_p2[0:0] == 1'b1) ? indvars_iv_next6_fu_606_p2 : select_ln289_fu_568_p3);

assign select_ln290_2_fu_752_p3 = ((and_ln289_reg_1029_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln290_fu_740_p1 : select_ln289_5_fu_746_p3);

assign select_ln290_3_fu_768_p3 = ((and_ln289_reg_1029_pp0_iter3_reg[0:0] == 1'b1) ? add_ln293_8_fu_762_p2 : select_ln289_4_fu_709_p3);

assign select_ln290_4_fu_646_p3 = ((icmp_ln290_fu_562_p2[0:0] == 1'b1) ? 9'd1 : add_ln290_fu_640_p2);

assign select_ln290_fu_618_p3 = ((or_ln290_fu_612_p2[0:0] == 1'b1) ? 5'd0 : k_reg_447);

assign sext_ln293_fu_919_p1 = $signed(trunc_ln_reg_1149);

assign shl_ln293_1_fu_913_p2 = zext_ln293_fu_889_p1 << zext_ln293_3_fu_909_p1;

assign shl_ln293_2_fu_902_p3 = {{add_ln293_2_reg_1143}, {3'd0}};

assign shl_ln293_fu_896_p2 = 64'd3 << zext_ln293_1_fu_893_p1;

assign shl_ln2_fu_804_p3 = {{select_ln290_reg_1040_pp0_iter3_reg}, {1'd0}};

assign shl_ln_fu_458_p3 = {{ch}, {4'd0}};

assign tmp_16_fu_723_p3 = {{select_ln290_1_reg_1046_pp0_iter3_reg}, {2'd0}};

assign tmp_fu_466_p4 = {{{col}, {col}}, {1'd0}};

assign tmp_s_fu_490_p4 = {{{row}, {row}}, {3'd0}};

assign trunc_ln289_fu_584_p1 = select_ln289_1_fu_576_p3[3:0];

assign trunc_ln290_1_fu_743_p1 = grp_fu_938_p3[12:0];

assign trunc_ln290_fu_740_p1 = grp_fu_956_p3[12:0];

assign xor_ln289_fu_588_p2 = (icmp_ln290_fu_562_p2 ^ 1'd1);

assign zext_ln289_1_fu_506_p1 = empty_fu_500_p2;

assign zext_ln289_4_fu_695_p1 = select_ln289_3_fu_690_p3;

assign zext_ln289_fu_476_p1 = shl_ln_fu_458_p3;

assign zext_ln293_1_fu_893_p1 = add_ln293_2_reg_1143;

assign zext_ln293_2_fu_811_p1 = shl_ln2_fu_804_p3;

assign zext_ln293_3_fu_909_p1 = shl_ln293_2_fu_902_p3;

assign zext_ln293_4_fu_821_p1 = add_ln293_4_fu_815_p2;

assign zext_ln293_5_fu_730_p1 = tmp_16_fu_723_p3;

assign zext_ln293_6_fu_775_p1 = select_ln290_reg_1040_pp0_iter3_reg;

assign zext_ln293_7_fu_784_p1 = add_ln293_9_fu_778_p2;

assign zext_ln293_fu_889_p1 = tmp_6_fu_852_p18;

always @ (posedge ap_clk) begin
    zext_ln289_reg_965[3:0] <= 4'b0000;
    zext_ln289_reg_965[7] <= 1'b0;
    or_ln289_cast7_reg_971[0] <= 1'b1;
    or_ln289_cast7_reg_971[5] <= 1'b0;
end

endmodule //mobilenet_copy_to_DDR_pool6
