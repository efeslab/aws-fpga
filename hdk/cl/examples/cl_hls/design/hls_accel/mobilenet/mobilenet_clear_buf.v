// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_clear_buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FM_buf2_V_0_address0,
        FM_buf2_V_0_ce0,
        FM_buf2_V_0_we0,
        FM_buf2_V_0_d0,
        FM_buf2_V_1_address0,
        FM_buf2_V_1_ce0,
        FM_buf2_V_1_we0,
        FM_buf2_V_1_d0,
        FM_buf2_V_2_address0,
        FM_buf2_V_2_ce0,
        FM_buf2_V_2_we0,
        FM_buf2_V_2_d0,
        FM_buf2_V_3_address0,
        FM_buf2_V_3_ce0,
        FM_buf2_V_3_we0,
        FM_buf2_V_3_d0,
        FM_buf2_V_4_address0,
        FM_buf2_V_4_ce0,
        FM_buf2_V_4_we0,
        FM_buf2_V_4_d0,
        FM_buf2_V_5_address0,
        FM_buf2_V_5_ce0,
        FM_buf2_V_5_we0,
        FM_buf2_V_5_d0,
        FM_buf2_V_6_address0,
        FM_buf2_V_6_ce0,
        FM_buf2_V_6_we0,
        FM_buf2_V_6_d0,
        FM_buf2_V_7_address0,
        FM_buf2_V_7_ce0,
        FM_buf2_V_7_we0,
        FM_buf2_V_7_d0,
        FM_buf2_V_8_address0,
        FM_buf2_V_8_ce0,
        FM_buf2_V_8_we0,
        FM_buf2_V_8_d0,
        FM_buf2_V_9_address0,
        FM_buf2_V_9_ce0,
        FM_buf2_V_9_we0,
        FM_buf2_V_9_d0,
        FM_buf2_V_10_address0,
        FM_buf2_V_10_ce0,
        FM_buf2_V_10_we0,
        FM_buf2_V_10_d0,
        FM_buf2_V_11_address0,
        FM_buf2_V_11_ce0,
        FM_buf2_V_11_we0,
        FM_buf2_V_11_d0,
        FM_buf2_V_12_address0,
        FM_buf2_V_12_ce0,
        FM_buf2_V_12_we0,
        FM_buf2_V_12_d0,
        FM_buf2_V_13_address0,
        FM_buf2_V_13_ce0,
        FM_buf2_V_13_we0,
        FM_buf2_V_13_d0,
        FM_buf2_V_14_address0,
        FM_buf2_V_14_ce0,
        FM_buf2_V_14_we0,
        FM_buf2_V_14_d0,
        FM_buf2_V_15_address0,
        FM_buf2_V_15_ce0,
        FM_buf2_V_15_we0,
        FM_buf2_V_15_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] FM_buf2_V_0_address0;
output   FM_buf2_V_0_ce0;
output   FM_buf2_V_0_we0;
output  [15:0] FM_buf2_V_0_d0;
output  [9:0] FM_buf2_V_1_address0;
output   FM_buf2_V_1_ce0;
output   FM_buf2_V_1_we0;
output  [15:0] FM_buf2_V_1_d0;
output  [9:0] FM_buf2_V_2_address0;
output   FM_buf2_V_2_ce0;
output   FM_buf2_V_2_we0;
output  [15:0] FM_buf2_V_2_d0;
output  [9:0] FM_buf2_V_3_address0;
output   FM_buf2_V_3_ce0;
output   FM_buf2_V_3_we0;
output  [15:0] FM_buf2_V_3_d0;
output  [9:0] FM_buf2_V_4_address0;
output   FM_buf2_V_4_ce0;
output   FM_buf2_V_4_we0;
output  [15:0] FM_buf2_V_4_d0;
output  [9:0] FM_buf2_V_5_address0;
output   FM_buf2_V_5_ce0;
output   FM_buf2_V_5_we0;
output  [15:0] FM_buf2_V_5_d0;
output  [9:0] FM_buf2_V_6_address0;
output   FM_buf2_V_6_ce0;
output   FM_buf2_V_6_we0;
output  [15:0] FM_buf2_V_6_d0;
output  [9:0] FM_buf2_V_7_address0;
output   FM_buf2_V_7_ce0;
output   FM_buf2_V_7_we0;
output  [15:0] FM_buf2_V_7_d0;
output  [9:0] FM_buf2_V_8_address0;
output   FM_buf2_V_8_ce0;
output   FM_buf2_V_8_we0;
output  [15:0] FM_buf2_V_8_d0;
output  [9:0] FM_buf2_V_9_address0;
output   FM_buf2_V_9_ce0;
output   FM_buf2_V_9_we0;
output  [15:0] FM_buf2_V_9_d0;
output  [9:0] FM_buf2_V_10_address0;
output   FM_buf2_V_10_ce0;
output   FM_buf2_V_10_we0;
output  [15:0] FM_buf2_V_10_d0;
output  [9:0] FM_buf2_V_11_address0;
output   FM_buf2_V_11_ce0;
output   FM_buf2_V_11_we0;
output  [15:0] FM_buf2_V_11_d0;
output  [9:0] FM_buf2_V_12_address0;
output   FM_buf2_V_12_ce0;
output   FM_buf2_V_12_we0;
output  [15:0] FM_buf2_V_12_d0;
output  [9:0] FM_buf2_V_13_address0;
output   FM_buf2_V_13_ce0;
output   FM_buf2_V_13_we0;
output  [15:0] FM_buf2_V_13_d0;
output  [9:0] FM_buf2_V_14_address0;
output   FM_buf2_V_14_ce0;
output   FM_buf2_V_14_we0;
output  [15:0] FM_buf2_V_14_d0;
output  [9:0] FM_buf2_V_15_address0;
output   FM_buf2_V_15_ce0;
output   FM_buf2_V_15_we0;
output  [15:0] FM_buf2_V_15_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg FM_buf2_V_0_ce0;
reg FM_buf2_V_0_we0;
reg FM_buf2_V_1_ce0;
reg FM_buf2_V_1_we0;
reg FM_buf2_V_2_ce0;
reg FM_buf2_V_2_we0;
reg FM_buf2_V_3_ce0;
reg FM_buf2_V_3_we0;
reg FM_buf2_V_4_ce0;
reg FM_buf2_V_4_we0;
reg FM_buf2_V_5_ce0;
reg FM_buf2_V_5_we0;
reg FM_buf2_V_6_ce0;
reg FM_buf2_V_6_we0;
reg FM_buf2_V_7_ce0;
reg FM_buf2_V_7_we0;
reg FM_buf2_V_8_ce0;
reg FM_buf2_V_8_we0;
reg FM_buf2_V_9_ce0;
reg FM_buf2_V_9_we0;
reg FM_buf2_V_10_ce0;
reg FM_buf2_V_10_we0;
reg FM_buf2_V_11_ce0;
reg FM_buf2_V_11_we0;
reg FM_buf2_V_12_ce0;
reg FM_buf2_V_12_we0;
reg FM_buf2_V_13_ce0;
reg FM_buf2_V_13_we0;
reg FM_buf2_V_14_ce0;
reg FM_buf2_V_14_we0;
reg FM_buf2_V_15_ce0;
reg FM_buf2_V_15_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_296;
reg   [4:0] j_reg_307;
reg   [5:0] k_reg_318;
wire   [9:0] add_ln425_1_fu_329_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln425_fu_335_p2;
reg   [0:0] icmp_ln425_reg_415;
reg   [0:0] icmp_ln425_reg_415_pp0_iter1_reg;
reg   [0:0] icmp_ln425_reg_415_pp0_iter2_reg;
wire   [5:0] select_ln425_fu_353_p3;
reg   [5:0] select_ln425_reg_419;
reg   [5:0] select_ln425_reg_419_pp0_iter1_reg;
wire   [4:0] select_ln425_1_fu_361_p3;
reg   [4:0] select_ln425_1_reg_424;
wire   [5:0] add_ln426_fu_373_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [4:0] ap_phi_mux_j_phi_fu_311_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln429_1_fu_382_p1;
wire   [0:0] icmp_ln426_fu_347_p2;
wire   [4:0] add_ln425_fu_341_p2;
wire   [9:0] grp_fu_401_p3;
wire   [4:0] grp_fu_401_p0;
wire   [6:0] grp_fu_401_p1;
wire   [5:0] grp_fu_401_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_401_p00;
wire   [9:0] grp_fu_401_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

mobilenet_mac_muladd_5ns_7ns_6ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mac_muladd_5ns_7ns_6ns_10_4_1_U621(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_401_p0),
    .din1(grp_fu_401_p1),
    .din2(grp_fu_401_p2),
    .ce(1'b1),
    .dout(grp_fu_401_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln425_fu_335_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_296 <= add_ln425_1_fu_329_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_296 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln425_reg_415 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_307 <= select_ln425_1_reg_424;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_307 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln425_fu_335_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_reg_318 <= add_ln426_fu_373_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_318 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln425_reg_415 <= icmp_ln425_fu_335_p2;
        icmp_ln425_reg_415_pp0_iter1_reg <= icmp_ln425_reg_415;
        select_ln425_reg_419_pp0_iter1_reg <= select_ln425_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln425_reg_415_pp0_iter2_reg <= icmp_ln425_reg_415_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln425_fu_335_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln425_1_reg_424 <= select_ln425_1_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln425_fu_335_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln425_reg_419 <= select_ln425_fu_353_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_0_ce0 = 1'b1;
    end else begin
        FM_buf2_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_0_we0 = 1'b1;
    end else begin
        FM_buf2_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_10_ce0 = 1'b1;
    end else begin
        FM_buf2_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_10_we0 = 1'b1;
    end else begin
        FM_buf2_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_11_ce0 = 1'b1;
    end else begin
        FM_buf2_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_11_we0 = 1'b1;
    end else begin
        FM_buf2_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_12_ce0 = 1'b1;
    end else begin
        FM_buf2_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_12_we0 = 1'b1;
    end else begin
        FM_buf2_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_13_ce0 = 1'b1;
    end else begin
        FM_buf2_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_13_we0 = 1'b1;
    end else begin
        FM_buf2_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_14_ce0 = 1'b1;
    end else begin
        FM_buf2_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_14_we0 = 1'b1;
    end else begin
        FM_buf2_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_15_ce0 = 1'b1;
    end else begin
        FM_buf2_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_15_we0 = 1'b1;
    end else begin
        FM_buf2_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_1_ce0 = 1'b1;
    end else begin
        FM_buf2_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_1_we0 = 1'b1;
    end else begin
        FM_buf2_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_2_ce0 = 1'b1;
    end else begin
        FM_buf2_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_2_we0 = 1'b1;
    end else begin
        FM_buf2_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_3_ce0 = 1'b1;
    end else begin
        FM_buf2_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_3_we0 = 1'b1;
    end else begin
        FM_buf2_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_4_ce0 = 1'b1;
    end else begin
        FM_buf2_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_4_we0 = 1'b1;
    end else begin
        FM_buf2_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_5_ce0 = 1'b1;
    end else begin
        FM_buf2_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_5_we0 = 1'b1;
    end else begin
        FM_buf2_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_6_ce0 = 1'b1;
    end else begin
        FM_buf2_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_6_we0 = 1'b1;
    end else begin
        FM_buf2_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_7_ce0 = 1'b1;
    end else begin
        FM_buf2_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_7_we0 = 1'b1;
    end else begin
        FM_buf2_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_8_ce0 = 1'b1;
    end else begin
        FM_buf2_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_8_we0 = 1'b1;
    end else begin
        FM_buf2_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_9_ce0 = 1'b1;
    end else begin
        FM_buf2_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln425_reg_415_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        FM_buf2_V_9_we0 = 1'b1;
    end else begin
        FM_buf2_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln425_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln425_reg_415 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_311_p4 = select_ln425_1_reg_424;
    end else begin
        ap_phi_mux_j_phi_fu_311_p4 = j_reg_307;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln425_fu_335_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln425_fu_335_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FM_buf2_V_0_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_0_d0 = 16'd0;

assign FM_buf2_V_10_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_10_d0 = 16'd0;

assign FM_buf2_V_11_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_11_d0 = 16'd0;

assign FM_buf2_V_12_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_12_d0 = 16'd0;

assign FM_buf2_V_13_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_13_d0 = 16'd0;

assign FM_buf2_V_14_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_14_d0 = 16'd0;

assign FM_buf2_V_15_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_15_d0 = 16'd0;

assign FM_buf2_V_1_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_1_d0 = 16'd0;

assign FM_buf2_V_2_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_2_d0 = 16'd0;

assign FM_buf2_V_3_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_3_d0 = 16'd0;

assign FM_buf2_V_4_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_4_d0 = 16'd0;

assign FM_buf2_V_5_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_5_d0 = 16'd0;

assign FM_buf2_V_6_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_6_d0 = 16'd0;

assign FM_buf2_V_7_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_7_d0 = 16'd0;

assign FM_buf2_V_8_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_8_d0 = 16'd0;

assign FM_buf2_V_9_address0 = zext_ln429_1_fu_382_p1;

assign FM_buf2_V_9_d0 = 16'd0;

assign add_ln425_1_fu_329_p2 = (indvar_flatten_reg_296 + 10'd1);

assign add_ln425_fu_341_p2 = (ap_phi_mux_j_phi_fu_311_p4 + 5'd1);

assign add_ln426_fu_373_p2 = (select_ln425_fu_353_p3 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_401_p0 = grp_fu_401_p00;

assign grp_fu_401_p00 = select_ln425_1_fu_361_p3;

assign grp_fu_401_p1 = 10'd42;

assign grp_fu_401_p2 = grp_fu_401_p20;

assign grp_fu_401_p20 = select_ln425_reg_419_pp0_iter1_reg;

assign icmp_ln425_fu_335_p2 = ((indvar_flatten_reg_296 == 10'd924) ? 1'b1 : 1'b0);

assign icmp_ln426_fu_347_p2 = ((k_reg_318 == 6'd42) ? 1'b1 : 1'b0);

assign select_ln425_1_fu_361_p3 = ((icmp_ln426_fu_347_p2[0:0] == 1'b1) ? add_ln425_fu_341_p2 : ap_phi_mux_j_phi_fu_311_p4);

assign select_ln425_fu_353_p3 = ((icmp_ln426_fu_347_p2[0:0] == 1'b1) ? 6'd0 : k_reg_318);

assign zext_ln429_1_fu_382_p1 = grp_fu_401_p3;

endmodule //mobilenet_clear_buf
