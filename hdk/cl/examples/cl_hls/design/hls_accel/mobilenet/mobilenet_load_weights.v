// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mobilenet_load_weights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weights_address0,
        weights_ce0,
        weights_q0,
        weights1_address0,
        weights1_ce0,
        weights1_q0,
        weights2_address0,
        weights2_ce0,
        weights2_q0,
        weights3_address0,
        weights3_ce0,
        weights3_q0,
        weights4_address0,
        weights4_ce0,
        weights4_q0,
        weights5_address0,
        weights5_ce0,
        weights5_q0,
        weights6_address0,
        weights6_ce0,
        weights6_q0,
        weights7_address0,
        weights7_ce0,
        weights7_q0,
        weights8_address0,
        weights8_ce0,
        weights8_q0,
        weights9_address0,
        weights9_ce0,
        weights9_q0,
        weights10_address0,
        weights10_ce0,
        weights10_q0,
        weights11_address0,
        weights11_ce0,
        weights11_q0,
        weights12_address0,
        weights12_ce0,
        weights12_q0,
        weights13_address0,
        weights13_ce0,
        weights13_q0,
        weights14_address0,
        weights14_ce0,
        weights14_q0,
        weights15_address0,
        weights15_ce0,
        weights15_q0,
        i,
        j,
        i_out_din,
        i_out_full_n,
        i_out_write,
        j_out_din,
        j_out_full_n,
        j_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] weights_address0;
output   weights_ce0;
input  [7:0] weights_q0;
output  [3:0] weights1_address0;
output   weights1_ce0;
input  [7:0] weights1_q0;
output  [3:0] weights2_address0;
output   weights2_ce0;
input  [7:0] weights2_q0;
output  [3:0] weights3_address0;
output   weights3_ce0;
input  [7:0] weights3_q0;
output  [3:0] weights4_address0;
output   weights4_ce0;
input  [7:0] weights4_q0;
output  [3:0] weights5_address0;
output   weights5_ce0;
input  [7:0] weights5_q0;
output  [3:0] weights6_address0;
output   weights6_ce0;
input  [7:0] weights6_q0;
output  [3:0] weights7_address0;
output   weights7_ce0;
input  [7:0] weights7_q0;
output  [3:0] weights8_address0;
output   weights8_ce0;
input  [7:0] weights8_q0;
output  [3:0] weights9_address0;
output   weights9_ce0;
input  [7:0] weights9_q0;
output  [3:0] weights10_address0;
output   weights10_ce0;
input  [7:0] weights10_q0;
output  [3:0] weights11_address0;
output   weights11_ce0;
input  [7:0] weights11_q0;
output  [3:0] weights12_address0;
output   weights12_ce0;
input  [7:0] weights12_q0;
output  [3:0] weights13_address0;
output   weights13_ce0;
input  [7:0] weights13_q0;
output  [3:0] weights14_address0;
output   weights14_ce0;
input  [7:0] weights14_q0;
output  [3:0] weights15_address0;
output   weights15_ce0;
input  [7:0] weights15_q0;
input  [1:0] i;
input  [1:0] j;
output  [1:0] i_out_din;
input   i_out_full_n;
output   i_out_write;
output  [1:0] j_out_din;
input   j_out_full_n;
output   j_out_write;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_ce0;
reg weights1_ce0;
reg weights2_ce0;
reg weights3_ce0;
reg weights4_ce0;
reg weights5_ce0;
reg weights6_ce0;
reg weights7_ce0;
reg weights8_ce0;
reg weights9_ce0;
reg weights10_ce0;
reg weights11_ce0;
reg weights12_ce0;
reg weights13_ce0;
reg weights14_ce0;
reg weights15_ce0;
reg i_out_write;
reg j_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    i_out_blk_n;
reg    j_out_blk_n;
wire   [63:0] zext_ln20_2_fu_330_p1;
reg    ap_block_state1;
wire   [3:0] tmp_fu_306_p3;
wire   [3:0] zext_ln20_fu_302_p1;
wire   [3:0] sub_ln20_fu_314_p2;
wire   [3:0] zext_ln20_1_fu_320_p1;
wire   [3:0] add_ln20_fu_324_p2;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_out_blk_n = i_out_full_n;
    end else begin
        i_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_out_write = 1'b1;
    end else begin
        i_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_out_blk_n = j_out_full_n;
    end else begin
        j_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_out_write = 1'b1;
    end else begin
        j_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights10_ce0 = 1'b1;
    end else begin
        weights10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights11_ce0 = 1'b1;
    end else begin
        weights11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights12_ce0 = 1'b1;
    end else begin
        weights12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights13_ce0 = 1'b1;
    end else begin
        weights13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights14_ce0 = 1'b1;
    end else begin
        weights14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights15_ce0 = 1'b1;
    end else begin
        weights15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights1_ce0 = 1'b1;
    end else begin
        weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights2_ce0 = 1'b1;
    end else begin
        weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights3_ce0 = 1'b1;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights4_ce0 = 1'b1;
    end else begin
        weights4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights5_ce0 = 1'b1;
    end else begin
        weights5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights6_ce0 = 1'b1;
    end else begin
        weights6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights7_ce0 = 1'b1;
    end else begin
        weights7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights8_ce0 = 1'b1;
    end else begin
        weights8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights9_ce0 = 1'b1;
    end else begin
        weights9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_324_p2 = (sub_ln20_fu_314_p2 + zext_ln20_1_fu_320_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (j_out_full_n == 1'b0) | (i_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = weights_q0;

assign ap_return_1 = weights1_q0;

assign ap_return_10 = weights10_q0;

assign ap_return_11 = weights11_q0;

assign ap_return_12 = weights12_q0;

assign ap_return_13 = weights13_q0;

assign ap_return_14 = weights14_q0;

assign ap_return_15 = weights15_q0;

assign ap_return_2 = weights2_q0;

assign ap_return_3 = weights3_q0;

assign ap_return_4 = weights4_q0;

assign ap_return_5 = weights5_q0;

assign ap_return_6 = weights6_q0;

assign ap_return_7 = weights7_q0;

assign ap_return_8 = weights8_q0;

assign ap_return_9 = weights9_q0;

assign i_out_din = i;

assign j_out_din = j;

assign sub_ln20_fu_314_p2 = (tmp_fu_306_p3 - zext_ln20_fu_302_p1);

assign tmp_fu_306_p3 = {{i}, {2'd0}};

assign weights10_address0 = zext_ln20_2_fu_330_p1;

assign weights11_address0 = zext_ln20_2_fu_330_p1;

assign weights12_address0 = zext_ln20_2_fu_330_p1;

assign weights13_address0 = zext_ln20_2_fu_330_p1;

assign weights14_address0 = zext_ln20_2_fu_330_p1;

assign weights15_address0 = zext_ln20_2_fu_330_p1;

assign weights1_address0 = zext_ln20_2_fu_330_p1;

assign weights2_address0 = zext_ln20_2_fu_330_p1;

assign weights3_address0 = zext_ln20_2_fu_330_p1;

assign weights4_address0 = zext_ln20_2_fu_330_p1;

assign weights5_address0 = zext_ln20_2_fu_330_p1;

assign weights6_address0 = zext_ln20_2_fu_330_p1;

assign weights7_address0 = zext_ln20_2_fu_330_p1;

assign weights8_address0 = zext_ln20_2_fu_330_p1;

assign weights9_address0 = zext_ln20_2_fu_330_p1;

assign weights_address0 = zext_ln20_2_fu_330_p1;

assign zext_ln20_1_fu_320_p1 = j;

assign zext_ln20_2_fu_330_p1 = add_ln20_fu_324_p2;

assign zext_ln20_fu_302_p1 = i;

endmodule //mobilenet_load_weights
