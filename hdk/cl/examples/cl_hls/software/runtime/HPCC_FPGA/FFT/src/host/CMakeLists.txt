
add_subdirectory(../../../shared ${CMAKE_BINARY_DIR}/lib/hpccbase)
set(HOST_SOURCE execution_default.cpp fft_benchmark.cpp)

set(HOST_EXE_NAME FFT)
set(LIB_NAME fft_lib)

if (INTELFPGAOPENCL_FOUND)
    add_library(${LIB_NAME}_intel STATIC ${HOST_SOURCE})
    target_include_directories(${LIB_NAME}_intel PRIVATE ${HPCCBaseLibrary_INCLUDE_DIRS} ${CMAKE_BINARY_DIR}/src/common ${IntelFPGAOpenCL_INCLUDE_DIRS})
    target_include_directories(${LIB_NAME}_intel PUBLIC ${CMAKE_SOURCE_DIR}/src/host)
    add_executable(${HOST_EXE_NAME}_intel main.cpp)
    target_link_libraries(${LIB_NAME}_intel "${IntelFPGAOpenCL_LIBRARIES}" "${OpenMP_CXX_FLAGS}")
    target_link_libraries(${LIB_NAME}_intel hpcc_fpga_base)
    target_link_libraries(${HOST_EXE_NAME}_intel ${LIB_NAME}_intel)
    if (USE_SVM)
        target_compile_definitions(${LIB_NAME}_intel PRIVATE -DCL_VERSION_2_0)
    endif()
    target_compile_definitions(${LIB_NAME}_intel PRIVATE -DINTEL_FPGA)
    target_compile_options(${LIB_NAME}_intel PRIVATE "${OpenMP_CXX_FLAGS}")
    add_test(NAME test_intel_host_executable COMMAND $<TARGET_FILE:${HOST_EXE_NAME}_intel> -h)
endif()

if (Vitis_FOUND)
    add_library(${LIB_NAME}_xilinx STATIC ${HOST_SOURCE})
    target_include_directories(${LIB_NAME}_xilinx PRIVATE ${HPCCBaseLibrary_INCLUDE_DIRS} ${CMAKE_BINARY_DIR}/src/common ${Vitis_INCLUDE_DIRS})
    target_include_directories(${LIB_NAME}_xilinx PUBLIC ${CMAKE_SOURCE_DIR}/src/host)
    add_executable(${HOST_EXE_NAME}_xilinx main.cpp)
    target_link_libraries(${LIB_NAME}_xilinx ${Vitis_LIBRARIES} "${OpenMP_CXX_FLAGS}")
    target_link_libraries(${LIB_NAME}_xilinx hpcc_fpga_base)
    target_link_libraries(${HOST_EXE_NAME}_xilinx ${LIB_NAME}_xilinx)
    target_compile_definitions(${LIB_NAME}_xilinx PRIVATE -DXILINX_FPGA)
    target_compile_options(${LIB_NAME}_xilinx PRIVATE "${OpenMP_CXX_FLAGS}")
    add_test(NAME test_xilinx_host_executable COMMAND $<TARGET_FILE:${HOST_EXE_NAME}_xilinx> -h)
endif()

if (USE_FPGARR)
    message(STATUS "Use FPGARR")
    add_library(${LIB_NAME}_fpgarr STATIC ${HOST_SOURCE})
    target_include_directories(${LIB_NAME}_fpgarr PRIVATE ${HPCCBaseLibrary_INCLUDE_DIRS} ${CMAKE_BINARY_DIR}/src/common ${Vitis_INCLUDE_DIRS})
    target_include_directories(${LIB_NAME}_fpgarr PUBLIC ${CMAKE_SOURCE_DIR}/src/host)
    target_include_directories(${LIB_NAME}_fpgarr PUBLIC ${CL_FPGARR_OPENCL_INC})
    target_link_libraries(${LIB_NAME}_fpgarr hpcc_fpga_base)
    target_compile_definitions(${LIB_NAME}_fpgarr PRIVATE -DXILINX_FPGA)
    add_library(${HOST_EXE_NAME}_fpgarr OBJECT main.cpp)
    target_include_directories(${HOST_EXE_NAME}_fpgarr PUBLIC ${CL_FPGARR_OPENCL_INC})
    target_link_libraries(${HOST_EXE_NAME}_fpgarr ${LIB_NAME}_fpgarr)
    add_custom_target(fpgarr_gen DEPENDS ${LIB_NAME}_fpgarr ${HOST_EXE_NAME}_fpgarr hpcc_fpga_base)
    add_custom_command(TARGET fpgarr_gen POST_BUILD COMMAND ${CMAKE_COMMAND} -E
        copy $<TARGET_FILE:${LIB_NAME}_fpgarr> $<TARGET_FILE:hpcc_fpga_base>
        $<TARGET_OBJECTS:${HOST_EXE_NAME}_fpgarr> ${CMAKE_BINARY_DIR})
endif()
