// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rendering_projection (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        i_V,
        input_r,
        i_V_out_din,
        i_V_out_full_n,
        i_V_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [11:0] i_V;
input  [63:0] input_r;
output  [11:0] i_V_out_din;
input   i_V_out_full_n;
output   i_V_out_write;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg i_V_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
reg    i_V_out_blk_n;
wire  signed [14:0] sub_ln1345_fu_160_p2;
reg  signed [14:0] sub_ln1345_reg_596;
reg   [57:0] trunc_ln_reg_601;
wire   [3:0] trunc_ln323_fu_198_p1;
reg   [3:0] trunc_ln323_reg_606;
wire   [5:0] trunc_ln323_2_fu_202_p1;
reg   [5:0] trunc_ln323_2_reg_611;
wire   [5:0] add_ln323_1_fu_223_p2;
reg   [5:0] add_ln323_1_reg_624;
reg   [57:0] trunc_ln2_reg_629;
wire   [5:0] add_ln324_1_fu_280_p2;
reg   [5:0] add_ln324_1_reg_634;
reg   [57:0] trunc_ln3_reg_639;
wire   [5:0] add_ln325_1_fu_330_p2;
reg   [5:0] add_ln325_1_reg_644;
reg   [511:0] gmem_addr_read_reg_661;
wire   [7:0] trunc_ln674_fu_371_p1;
reg   [7:0] trunc_ln674_reg_666;
reg   [7:0] triangle_2d_y0_V_write_assign_reg_671;
reg   [7:0] triangle_3ds_z0_V_i_reg_676;
reg   [7:0] triangle_2d_x1_V_write_assign_reg_681;
reg   [511:0] gmem_addr_64_read_reg_686;
wire   [7:0] trunc_ln674_1_fu_421_p1;
reg   [7:0] trunc_ln674_1_reg_691;
reg   [7:0] triangle_3ds_z1_V_i_reg_696;
reg   [7:0] triangle_2d_x2_V_write_assign_reg_701;
reg   [7:0] triangle_2d_y2_V_write_assign_reg_706;
reg   [511:0] gmem_addr_65_read_reg_711;
reg   [6:0] tmp_1_reg_716;
wire   [7:0] trunc_ln674_2_fu_490_p1;
reg   [7:0] trunc_ln674_2_reg_721;
wire    ap_CS_fsm_state75;
reg   [6:0] tmp_2_reg_726;
wire  signed [63:0] sext_ln323_1_fu_206_p1;
wire  signed [63:0] sext_ln324_fu_335_p1;
wire  signed [63:0] sext_ln325_fu_345_p1;
reg    ap_block_state1;
wire   [13:0] shl_ln_fu_144_p3;
wire   [14:0] zext_ln1345_fu_152_p1;
wire   [14:0] zext_ln1345_1_fu_156_p1;
wire   [16:0] tmp_fu_166_p3;
wire  signed [49:0] sext_ln323_fu_174_p1;
wire   [63:0] zext_ln323_fu_178_p1;
wire   [63:0] add_ln323_fu_182_p2;
wire   [5:0] trunc_ln323_1_fu_216_p3;
wire  signed [47:0] sext_ln215_fu_228_p1;
wire   [48:0] zext_ln215_fu_231_p1;
wire   [48:0] add_ln1346_fu_235_p2;
wire   [50:0] shl_ln1_fu_241_p3;
wire   [63:0] zext_ln324_fu_249_p1;
wire   [63:0] add_ln324_fu_253_p2;
wire   [3:0] trunc_ln324_fu_268_p1;
wire   [5:0] trunc_ln324_1_fu_272_p3;
wire   [48:0] add_ln1346_1_fu_285_p2;
wire   [50:0] shl_ln2_fu_291_p3;
wire   [63:0] zext_ln325_fu_299_p1;
wire   [63:0] add_ln325_fu_303_p2;
wire   [3:0] trunc_ln325_fu_318_p1;
wire   [5:0] trunc_ln325_1_fu_322_p3;
wire   [8:0] shl_ln323_1_fu_355_p3;
wire   [511:0] zext_ln323_1_fu_362_p1;
wire   [511:0] lshr_ln323_fu_366_p2;
wire   [8:0] shl_ln324_1_fu_405_p3;
wire   [511:0] zext_ln324_1_fu_412_p1;
wire   [511:0] lshr_ln324_fu_416_p2;
wire   [7:0] mul_ln1364_fu_458_p0;
wire   [9:0] mul_ln1364_fu_458_p1;
wire   [16:0] mul_ln1364_fu_458_p2;
wire   [8:0] shl_ln325_1_fu_474_p3;
wire   [511:0] zext_ln325_1_fu_481_p1;
wire   [511:0] lshr_ln325_fu_485_p2;
wire   [7:0] mul_ln1364_1_fu_497_p0;
wire   [9:0] mul_ln1364_1_fu_497_p1;
wire   [16:0] mul_ln1364_1_fu_497_p2;
wire    ap_CS_fsm_state76;
wire   [7:0] mul_ln1364_2_fu_522_p0;
wire   [9:0] mul_ln1364_2_fu_522_p1;
wire   [16:0] mul_ln1364_2_fu_522_p2;
wire   [6:0] tmp_3_fu_528_p4;
wire   [7:0] zext_ln1364_1_fu_513_p1;
wire   [7:0] zext_ln1364_5_fu_538_p1;
wire   [7:0] add_ln213_fu_542_p2;
wire   [7:0] zext_ln1364_3_fu_516_p1;
wire   [7:0] add_ln213_1_fu_548_p2;
reg   [75:0] ap_NS_fsm;
wire   [16:0] mul_ln1364_1_fu_497_p00;
wire   [16:0] mul_ln1364_2_fu_522_p00;
wire   [16:0] mul_ln1364_fu_458_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
end

rendering_mul_8ns_10ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_8ns_10ns_17_1_1_U1(
    .din0(mul_ln1364_fu_458_p0),
    .din1(mul_ln1364_fu_458_p1),
    .dout(mul_ln1364_fu_458_p2)
);

rendering_mul_8ns_10ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_8ns_10ns_17_1_1_U2(
    .din0(mul_ln1364_1_fu_497_p0),
    .din1(mul_ln1364_1_fu_497_p1),
    .dout(mul_ln1364_1_fu_497_p2)
);

rendering_mul_8ns_10ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_8ns_10ns_17_1_1_U3(
    .din0(mul_ln1364_2_fu_522_p0),
    .din1(mul_ln1364_2_fu_522_p1),
    .dout(mul_ln1364_2_fu_522_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln323_1_reg_624 <= add_ln323_1_fu_223_p2;
        add_ln324_1_reg_634 <= add_ln324_1_fu_280_p2;
        add_ln325_1_reg_644 <= add_ln325_1_fu_330_p2;
        trunc_ln2_reg_629 <= {{add_ln324_fu_253_p2[63:6]}};
        trunc_ln3_reg_639 <= {{add_ln325_fu_303_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_addr_64_read_reg_686 <= m_axi_gmem_RDATA;
        triangle_2d_x1_V_write_assign_reg_681 <= {{lshr_ln323_fu_366_p2[31:24]}};
        triangle_2d_y0_V_write_assign_reg_671 <= {{lshr_ln323_fu_366_p2[15:8]}};
        triangle_3ds_z0_V_i_reg_676 <= {{lshr_ln323_fu_366_p2[23:16]}};
        trunc_ln674_reg_666 <= trunc_ln674_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem_addr_65_read_reg_711 <= m_axi_gmem_RDATA;
        tmp_1_reg_716 <= {{mul_ln1364_fu_458_p2[16:10]}};
        triangle_2d_x2_V_write_assign_reg_701 <= {{lshr_ln324_fu_416_p2[23:16]}};
        triangle_2d_y2_V_write_assign_reg_706 <= {{lshr_ln324_fu_416_p2[31:24]}};
        triangle_3ds_z1_V_i_reg_696 <= {{lshr_ln324_fu_416_p2[15:8]}};
        trunc_ln674_1_reg_691 <= trunc_ln674_1_fu_421_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem_addr_read_reg_661 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln1345_reg_596 <= sub_ln1345_fu_160_p2;
        trunc_ln323_2_reg_611 <= trunc_ln323_2_fu_202_p1;
        trunc_ln323_reg_606 <= trunc_ln323_fu_198_p1;
        trunc_ln_reg_601 <= {{add_ln323_fu_182_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_2_reg_726 <= {{mul_ln1364_1_fu_497_p2[16:10]}};
        trunc_ln674_2_reg_721 <= trunc_ln674_2_fu_490_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_out_blk_n = i_V_out_full_n;
    end else begin
        i_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (i_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_out_write = 1'b1;
    end else begin
        i_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_gmem_ARADDR = sext_ln325_fu_345_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_gmem_ARADDR = sext_ln324_fu_335_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_gmem_ARADDR = sext_ln323_1_fu_206_p1;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_ARREADY == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_RVALID == 1'b1)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (i_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1346_1_fu_285_p2 = (zext_ln215_fu_231_p1 + 49'd2);

assign add_ln1346_fu_235_p2 = (zext_ln215_fu_231_p1 + 49'd1);

assign add_ln213_1_fu_548_p2 = (add_ln213_fu_542_p2 + zext_ln1364_3_fu_516_p1);

assign add_ln213_fu_542_p2 = (zext_ln1364_1_fu_513_p1 + zext_ln1364_5_fu_538_p1);

assign add_ln323_1_fu_223_p2 = (trunc_ln323_1_fu_216_p3 + trunc_ln323_2_reg_611);

assign add_ln323_fu_182_p2 = (zext_ln323_fu_178_p1 + input_r);

assign add_ln324_1_fu_280_p2 = (trunc_ln324_1_fu_272_p3 + trunc_ln323_2_reg_611);

assign add_ln324_fu_253_p2 = (zext_ln324_fu_249_p1 + input_r);

assign add_ln325_1_fu_330_p2 = (trunc_ln325_1_fu_322_p3 + trunc_ln323_2_reg_611);

assign add_ln325_fu_303_p2 = (zext_ln325_fu_299_p1 + input_r);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (i_V_out_full_n == 1'b0));
end

assign ap_return_0 = trunc_ln674_reg_666;

assign ap_return_1 = triangle_2d_y0_V_write_assign_reg_671;

assign ap_return_2 = triangle_2d_x1_V_write_assign_reg_681;

assign ap_return_3 = trunc_ln674_1_reg_691;

assign ap_return_4 = triangle_2d_x2_V_write_assign_reg_701;

assign ap_return_5 = triangle_2d_y2_V_write_assign_reg_706;

assign ap_return_6 = add_ln213_1_fu_548_p2;

assign i_V_out_din = i_V;

assign lshr_ln323_fu_366_p2 = gmem_addr_read_reg_661 >> zext_ln323_1_fu_362_p1;

assign lshr_ln324_fu_416_p2 = gmem_addr_64_read_reg_686 >> zext_ln324_1_fu_412_p1;

assign lshr_ln325_fu_485_p2 = gmem_addr_65_read_reg_711 >> zext_ln325_1_fu_481_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln1364_1_fu_497_p0 = mul_ln1364_1_fu_497_p00;

assign mul_ln1364_1_fu_497_p00 = triangle_3ds_z1_V_i_reg_696;

assign mul_ln1364_1_fu_497_p1 = 17'd342;

assign mul_ln1364_2_fu_522_p0 = mul_ln1364_2_fu_522_p00;

assign mul_ln1364_2_fu_522_p00 = trunc_ln674_2_reg_721;

assign mul_ln1364_2_fu_522_p1 = 17'd342;

assign mul_ln1364_fu_458_p0 = mul_ln1364_fu_458_p00;

assign mul_ln1364_fu_458_p00 = triangle_3ds_z0_V_i_reg_676;

assign mul_ln1364_fu_458_p1 = 17'd342;

assign sext_ln215_fu_228_p1 = sub_ln1345_reg_596;

assign sext_ln323_1_fu_206_p1 = $signed(trunc_ln_reg_601);

assign sext_ln323_fu_174_p1 = $signed(tmp_fu_166_p3);

assign sext_ln324_fu_335_p1 = $signed(trunc_ln2_reg_629);

assign sext_ln325_fu_345_p1 = $signed(trunc_ln3_reg_639);

assign shl_ln1_fu_241_p3 = {{add_ln1346_fu_235_p2}, {2'd0}};

assign shl_ln2_fu_291_p3 = {{add_ln1346_1_fu_285_p2}, {2'd0}};

assign shl_ln323_1_fu_355_p3 = {{add_ln323_1_reg_624}, {3'd0}};

assign shl_ln324_1_fu_405_p3 = {{add_ln324_1_reg_634}, {3'd0}};

assign shl_ln325_1_fu_474_p3 = {{add_ln325_1_reg_644}, {3'd0}};

assign shl_ln_fu_144_p3 = {{i_V}, {2'd0}};

assign sub_ln1345_fu_160_p2 = (zext_ln1345_fu_152_p1 - zext_ln1345_1_fu_156_p1);

assign tmp_3_fu_528_p4 = {{mul_ln1364_2_fu_522_p2[16:10]}};

assign tmp_fu_166_p3 = {{sub_ln1345_fu_160_p2}, {2'd0}};

assign trunc_ln323_1_fu_216_p3 = {{trunc_ln323_reg_606}, {2'd0}};

assign trunc_ln323_2_fu_202_p1 = input_r[5:0];

assign trunc_ln323_fu_198_p1 = sub_ln1345_fu_160_p2[3:0];

assign trunc_ln324_1_fu_272_p3 = {{trunc_ln324_fu_268_p1}, {2'd0}};

assign trunc_ln324_fu_268_p1 = add_ln1346_fu_235_p2[3:0];

assign trunc_ln325_1_fu_322_p3 = {{trunc_ln325_fu_318_p1}, {2'd0}};

assign trunc_ln325_fu_318_p1 = add_ln1346_1_fu_285_p2[3:0];

assign trunc_ln674_1_fu_421_p1 = lshr_ln324_fu_416_p2[7:0];

assign trunc_ln674_2_fu_490_p1 = lshr_ln325_fu_485_p2[7:0];

assign trunc_ln674_fu_371_p1 = lshr_ln323_fu_366_p2[7:0];

assign zext_ln1345_1_fu_156_p1 = i_V;

assign zext_ln1345_fu_152_p1 = shl_ln_fu_144_p3;

assign zext_ln1364_1_fu_513_p1 = tmp_1_reg_716;

assign zext_ln1364_3_fu_516_p1 = tmp_2_reg_726;

assign zext_ln1364_5_fu_538_p1 = tmp_3_fu_528_p4;

assign zext_ln215_fu_231_p1 = $unsigned(sext_ln215_fu_228_p1);

assign zext_ln323_1_fu_362_p1 = shl_ln323_1_fu_355_p3;

assign zext_ln323_fu_178_p1 = $unsigned(sext_ln323_fu_174_p1);

assign zext_ln324_1_fu_412_p1 = shl_ln324_1_fu_405_p3;

assign zext_ln324_fu_249_p1 = shl_ln1_fu_241_p3;

assign zext_ln325_1_fu_481_p1 = shl_ln325_1_fu_474_p3;

assign zext_ln325_fu_299_p1 = shl_ln2_fu_291_p3;

endmodule //rendering_projection
